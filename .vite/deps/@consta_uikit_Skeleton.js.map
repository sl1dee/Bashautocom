{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/Skeleton/Skeleton.tsx", "../../node_modules/@consta/src/components/Skeleton/SkeletonBrick/SkeletonBrick.tsx", "../../node_modules/@consta/src/components/Skeleton/SkeletonCircle/SkeletonCircle.tsx", "../../node_modules/@consta/src/components/Skeleton/SkeletonText/SkeletonText.tsx"],
  "sourcesContent": ["import './Skeleton.css';\n\nimport { cn } from '../../utils/bem';\n\nexport { SkeletonBrick } from './SkeletonBrick/SkeletonBrick';\nexport { SkeletonCircle } from './SkeletonCircle/SkeletonCircle';\nexport { SkeletonText } from './SkeletonText/SkeletonText';\n\nexport const cnSkeleton = cn('Skeleton');\n", "import React, { CSSProperties } from 'react';\n\nimport { cnSkeleton } from '../Skeleton';\n\ntype SkeletonBrickProps = {\n  className?: string;\n  width?: CSSProperties['width'];\n  height: CSSProperties['height'];\n};\n\nexport const SkeletonBrick: React.FC<SkeletonBrickProps> = ({\n  className,\n  width = '100%',\n  height,\n}) => (\n  <div className={cnSkeleton(null, [className])} style={{ width, height }} />\n);\n", "import './SkeletonCircle.css';\n\nimport React, { CSSProperties } from 'react';\n\nimport { cn } from '##/utils/bem';\n\nimport { cnSkeleton } from '../Skeleton';\n\ntype SkeletonCircleProps = {\n  className?: string;\n  size: CSSProperties['width'] & CSSProperties['height'];\n};\n\nconst cnSkeletonCircle = cn('SkeletonCircle');\n\nexport const SkeletonCircle: React.FC<SkeletonCircleProps> = ({\n  className,\n  size,\n}) => (\n  <div\n    className={cnSkeletonCircle(null, [cnSkeleton(), className])}\n    style={{ width: size, height: size }}\n  />\n);\n", "import './SkeletonText.css';\n\nimport React from 'react';\n\nimport {\n  TextPropLineHeight,\n  textPropLineHeightDefault,\n  TextPropSize,\n  textPropSizeDefault,\n} from '##/components/Text';\nimport { cn } from '##/utils/bem';\n\nimport { SkeletonBrick } from '../Skeleton';\n\ntype SkeletonTextProps = {\n  className?: string;\n  rows: number;\n  fontSize?: TextPropSize;\n  lineHeight?: TextPropLineHeight;\n};\n\nconst cnSkeletonText = cn('SkeletonText');\n\nexport const getRowWidth = (\n  idx: number,\n  total: number,\n): React.ComponentProps<typeof SkeletonBrick>['height'] => {\n  if (idx === total - 1) {\n    return '50%';\n  }\n\n  switch (idx % 3) {\n    case 0:\n      return '100%';\n    case 1:\n      return '85%';\n    case 2:\n      return '93%';\n  }\n\n  return '100%';\n};\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = ({\n  className,\n  rows,\n  fontSize = textPropSizeDefault,\n  lineHeight = textPropLineHeightDefault,\n}) => {\n  const varFontSize = `var(--size-text-${fontSize})`;\n  const varLineHeight = `var(--line-height-text-${lineHeight})`;\n  return (\n    <div\n      className={cnSkeletonText(null, [className])}\n      key={\n        /* форсируем полный ререндер компонента при смене количества строк,\n          чтобы анимация у всех строк запустилась заново */\n        rows\n      }\n    >\n      {new Array(rows).fill(null).map((_v, idx) => (\n        <div\n          key={idx}\n          className={cnSkeletonText('Row')}\n          style={{ fontSize: varFontSize, height: varLineHeight }}\n        >\n          <SkeletonBrick width={getRowWidth(idx, rows)} height={varFontSize} />\n        </div>\n      ))}\n    </div>\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,OAAA;;;ACAA,mBAAqC;AAU9B,IAAMA,gBAA8C,SAAA,GAAA;AAAA,MACzDC,IADyD,EACzDA,WADyD,IAAA,EAEzDC,OAAAA,IAFyD,WAAA,IAEjD,SAFiD,GAGzDC,IAHyD,EAGzDA;AAHyD,SAKzD,aAAAC,QAAA,cAAA,OAAA,EAAK,WAAWC,WAAW,MAAM,CAACJ,CAAD,CAAP,GAAqB,OAAO,EAAEC,OAAAA,GAAOC,QAAAA,EAAT,EAAtD,CAAA;AALyD;;;ACR3D,IAAAG,gBAAqC;AAFrC,OAAA;AAaA,IAAMC,mBAAmBC,GAAG,gBAAD;AAEpB,IAAMC,iBAAgD,SAAA,GAAA;AAAA,MAC3DC,IAD2D,EAC3DA,WACAC,IAF2D,EAE3DA;AAF2D,SAI3D,cAAAC,QAAA,cAAA,OAAA,EACE,WAAWL,iBAAiB,MAAM,CAACM,WAAU,GAAIH,CAAf,CAAP,GAC3B,OAAO,EAAEI,OAAOH,GAAMI,QAAQJ,EAAvB,EAFT,CAAA;AAJ2D;;;ACb7D,IAAAK,gBAAkB;AAFlB,OAAA;AAqBA,IAAMC,iBAAiBC,GAAG,cAAD;AAElB,IAAMC,cAAc,SACzBC,GACAC,GACyD;AACzD,MAAID,MAAQC,IAAQ;AAClB,WAAO;AAGT,UAAQD,IAAM,GAAd;IACE,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;EANX;AASA,SAAO;AACR;AAEM,IAAME,eAA4C,SAAA,GAKnD;AAAA,MAJJC,IAII,EAJJA,WACAC,IAGI,EAHJA,MAGI,IAAA,EAFJC,UAAAA,IAEI,WAAA,IAFOC,sBAEP,GAAA,IAAA,EADJC,YAAAA,IACI,WAAA,IADSC,4BACT,GACEC,IAAW,mBAAA,OAAsBJ,GAAtB,GAAA,GACXK,IAAa,0BAAA,OAA6BH,GAA7B,GAAA;AACnB,SACE,cAAAI,QAAA,cAAA,OAAA,EACE,WAAWd,eAAe,MAAM,CAACM,CAAD,CAAP,GACzB,KAGEC,EALJ,GAQOQ,MAAMR,CAAV,EAAgBS,KAAK,IAArB,EAA2BC,IAAI,SAACC,IAAIf,IAAL;AAAA,WAC9B,cAAAW,QAAA,cAAA,OAAA,EACE,KAAKX,IACL,WAAWH,eAAe,KAAD,GACzB,OAAO,EAAEQ,UAAUI,GAAaO,QAAQN,EAAjC,EAHT,GAKE,cAAAC,QAAA,cAAC,eAAD,EAAe,OAAOZ,YAAYC,IAAKI,CAAN,GAAa,QAAQK,EAAtD,CAAA,CALF;EAD8B,CAA/B,CARH;AAmBH;;;AH/DM,IAAMQ,aAAaC,GAAG,UAAD;",
  "names": ["SkeletonBrick", "className", "width", "height", "React", "cnSkeleton", "import_react", "cnSkeletonCircle", "cn", "SkeletonCircle", "className", "size", "React", "cnSkeleton", "width", "height", "import_react", "cnSkeletonText", "cn", "getRowWidth", "idx", "total", "SkeletonText", "className", "rows", "fontSize", "textPropSizeDefault", "lineHeight", "textPropLineHeightDefault", "varFontSize", "varLineHeight", "React", "Array", "fill", "map", "_v", "height", "cnSkeleton", "cn"]
}
