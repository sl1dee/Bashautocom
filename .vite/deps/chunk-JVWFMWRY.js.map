{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/icons/Icon/Icon.tsx", "../../node_modules/@consta/src/components/IconsProvider/IconsProvider.tsx", "../../node_modules/@consta/src/utils/bem.ts", "../../node_modules/@consta/src/components/IconsProvider/IconsProviderList/IconsProviderList.tsx", "../../node_modules/@consta/src/components/IconsProvider/IconsProviderIcon/IconsProviderIcon.tsx"],
  "sourcesContent": ["import './Icon.css';\n\nimport React, { forwardRef, useContext, useEffect, useMemo } from 'react';\n\nimport { cnIcons, IconsContext } from '##/components/IconsProvider';\n\nimport { cn } from '../../utils/bem';\n\nexport const iconPropSize = ['m', 's', 'xs', 'l'] as const;\nexport type IconPropSize = typeof iconPropSize[number];\nexport const iconPropSizeDefault = iconPropSize[0];\n\nexport const iconPropView = [\n  'primary',\n  'alert',\n  'brand',\n  'ghost',\n  'link',\n  'secondary',\n  'success',\n  'warning',\n  'disabled',\n] as const;\nexport type IconPropView = typeof iconPropView[number];\nexport const iconPropViewDefault = iconPropView[0];\n\nexport type IconProps = {\n  view?: IconPropView;\n  size?: IconPropSize;\n} & React.RefAttributes<HTMLSpanElement> &\n  React.HTMLAttributes<HTMLSpanElement>;\n\nexport type IconComponent = React.FC<IconProps>;\n\nexport const cnIcon = cn('Icon');\n\nconst renderTypeDefault = {\n  l: 'default',\n  m: 'default',\n  s: 'default',\n  xs: 'default',\n};\n\nexport type CreateIconRenderType = {\n  l?: 'use' | 'default';\n  m?: 'use' | 'default';\n  s?: 'use' | 'default';\n  xs?: 'use' | 'default';\n};\n\nexport type CreateIconArguments = {\n  l: React.FC<React.SVGProps<SVGSVGElement>>;\n  m: React.FC<React.SVGProps<SVGSVGElement>>;\n  s: React.FC<React.SVGProps<SVGSVGElement>>;\n  xs: React.FC<React.SVGProps<SVGSVGElement>>;\n  name: string;\n  renderType?: CreateIconRenderType;\n  color?: 'mono' | 'multiple';\n};\n\nexport function createIcon(createProps: CreateIconArguments) {\n  const { name, renderType = renderTypeDefault, color = 'mono' } = createProps;\n  const IconComponent: IconComponent = forwardRef<HTMLSpanElement, IconProps>(\n    (props, ref) => {\n      const { size = 'm', className, view } = props;\n      const Svg = createProps[size];\n      const { addIcon, removeIcon } = useContext(IconsContext);\n\n      const SvgElement = useMemo(() => {\n        return renderType[size] === 'use'\n          ? Svg({ className: cnIcon('Svg', { color }) })\n          : null;\n      }, [Svg]);\n\n      const { children, ...otherProps } = SvgElement?.props ?? {};\n\n      useEffect(() => {\n        if (renderType[size] === 'use') {\n          addIcon?.(name, size, SvgElement);\n        }\n      }, [SvgElement, renderType, size]);\n\n      useEffect(() => {\n        return () => {\n          if (renderType[size] === 'use') {\n            removeIcon?.(name, size);\n          }\n        };\n      }, [Svg, renderType, size]);\n\n      return (\n        <span\n          {...props}\n          className={cnIcon({ size, view, color }, [name, className])}\n          ref={ref}\n        >\n          {addIcon && renderType[size] === 'use' ? (\n            <svg {...otherProps}>\n              <use x=\"0\" y=\"0\" xlinkHref={`#${cnIcons(`${name}_${size}`)}`} />\n            </svg>\n          ) : (\n            <Svg className={cnIcon('Svg')} />\n          )}\n        </span>\n      );\n    },\n  );\n\n  return IconComponent;\n}\n", "import './IconsProvider.css';\n\nimport React, { createContext, useMemo, useState } from 'react';\n\nimport { IconProps } from '##/icons/Icon';\nimport { cn } from '##/utils/bem';\n\nimport { IconsProviderList } from './IconsProviderList/IconsProviderList';\n\nexport type Icons = Record<\n  string,\n  { count: number; svg: React.ReactElement | null }\n>;\n\ntype IconsContextAddIcon = (\n  iconName: string,\n  size: IconProps['size'],\n  svg: React.ReactElement | null,\n) => void;\n\ntype IconsContextRemoveIcon = (\n  iconName: string,\n  size: IconProps['size'],\n) => void;\n\ntype IconsContextParams = {\n  addIcon: IconsContextAddIcon | undefined;\n  removeIcon: IconsContextRemoveIcon | undefined;\n};\n\nconst defaultContextValue: IconsContextParams = {\n  addIcon: undefined,\n  removeIcon: undefined,\n};\n\nexport const cnIcons = cn('Icons');\n\nexport const IconsContext =\n  createContext<IconsContextParams>(defaultContextValue);\n\nexport const IconsProvider: React.FC<{\n  children: React.ReactNode;\n  container?: Element;\n}> = ({ children, container = window.document.body }) => {\n  const [icons, setIcons] = useState<Icons>({});\n\n  const value = useMemo(() => {\n    const addIcon: IconsContextAddIcon = (name, size = 'm', svg) => {\n      const key = `${name}_${size}`;\n      setIcons((prev) => ({\n        ...prev,\n        [key]: {\n          count: typeof prev[key] === 'object' ? prev[key].count + 1 : 1,\n          svg,\n        },\n      }));\n    };\n\n    const removeIcon: IconsContextRemoveIcon = (name, size = 'm') => {\n      const key = `${name}_${size}`;\n      setIcons((prev) => {\n        const copyIcons = { ...prev };\n        if (copyIcons[key].count === 1) {\n          delete copyIcons[key];\n        } else {\n          copyIcons[key].count -= 1;\n        }\n        return copyIcons;\n      });\n    };\n\n    return { addIcon, removeIcon };\n  }, []);\n\n  return (\n    <>\n      <IconsContext.Provider value={value}>{children}</IconsContext.Provider>\n      <IconsProviderList icons={icons} container={container} />\n    </>\n  );\n};\n", "import { withNaming } from '@bem-react/classname';\n\nconst reactBemNaming = { e: '-', m: '_', v: '_' };\n\nexport const withPrefix = (prefix: string) =>\n  withNaming({ n: `${prefix}--`, ...reactBemNaming });\n\nexport const cn = withPrefix('icons');\n", "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { cnIcons, Icons } from '../IconsProvider';\nimport { IconsProviderIcon } from '../IconsProviderIcon';\n\ntype Props = {\n  icons: Icons;\n  container: Element;\n};\n\nexport const IconsProviderList: React.FC<Props> = ({ icons, container }) => {\n  return ReactDOM.createPortal(\n    <div className={cnIcons()}>\n      {Object.keys(icons).map((key) => (\n        <IconsProviderIcon element={icons[key].svg} name={key} key={key} />\n      ))}\n    </div>,\n    container,\n  );\n};\n", "import React, { memo } from 'react';\n\nimport { cnIcons } from '../IconsProvider';\n\ntype Props = {\n  element: React.ReactElement | null;\n  name: string;\n};\n\nexport const IconsProviderIcon = memo(\n  ({ element, name }: Props) => {\n    if (!element) {\n      return null;\n    }\n\n    return (\n      <svg key={cnIcons(name)}>\n        <symbol id={`${cnIcons(name)}`}>{element.props.children}</symbol>\n      </svg>\n    );\n  },\n  ({ name: namePrev }, { name: nameNext }) => namePrev === nameNext,\n);\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "reactBemNaming", "e", "m", "v", "withPrefix", "prefix", "withNaming", "n", "cn", "import_react", "IconsProviderIcon", "memo", "element", "name", "React", "cnIcons", "props", "children", "namePrev", "nameNext", "defaultContextValue", "addIcon", "removeIcon", "cnIcons", "cn", "IconsContext", "createContext", "iconPropSize", "iconPropSizeDefault", "iconPropView", "iconPropViewDefault", "cnIcon", "cn", "renderTypeDefault", "l", "m", "s", "xs", "createIcon", "createProps", "name", "renderType", "color", "IconComponent", "forwardRef", "props", "ref", "size", "className", "view", "Svg", "addIcon", "removeIcon", "useContext", "IconsContext", "SvgElement", "useMemo", "children", "otherProps", "useEffect", "React", "cnIcons"]
}
