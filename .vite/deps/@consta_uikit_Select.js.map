{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/Select/Select.tsx"],
  "sourcesContent": ["import '../SelectComponents/Select.css';\n\nimport { IconSelect } from '@consta/icons/IconSelect';\nimport React, { forwardRef, useRef } from 'react';\n\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { useSelect } from '../../hooks/useSelect/useSelect';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\nimport { cnSelect, COMPONENT_NAME } from '../SelectComponents/cnSelect';\nimport { defaultLabelForEmptyItems } from '../SelectComponents/helpers';\nimport { SelectContainer } from '../SelectComponents/SelectContainer/SelectContainer';\nimport { SelectDropdown } from '../SelectComponents/SelectDropdown/SelectDropdown';\nimport { SelectItem } from '../SelectComponents/SelectItem/SelectItem';\nimport {\n  defaultPropForm,\n  defaultPropSize,\n  defaultPropView,\n} from '../SelectComponents/types';\nimport {\n  DefaultGroup,\n  DefaultItem,\n  PropRenderItem,\n  PropRenderValue,\n  SelectComponent,\n  SelectProps,\n  withDefaultGetters,\n} from './helpers';\n\nconst SelectRender = <ITEM = DefaultItem, GROUP = DefaultGroup>(\n  props: SelectProps<ITEM, GROUP>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const defaultDropdownRef = useRef<HTMLDivElement | null>(null);\n  const controlRef = useRef<HTMLDivElement | null>(null);\n\n  const {\n    placeholder,\n    onBlur,\n    onFocus,\n    items,\n    onChange,\n    value,\n    required,\n    disabled,\n    ariaLabel,\n    id,\n    dropdownRef = defaultDropdownRef,\n    form = defaultPropForm,\n    view = defaultPropView,\n    size = defaultPropSize,\n    dropdownClassName,\n    name,\n    groups = [],\n    getItemLabel,\n    labelForEmptyItems = defaultLabelForEmptyItems,\n    getItemKey,\n    getItemGroupKey,\n    getItemDisabled,\n    getGroupKey,\n    getGroupLabel,\n    renderItem,\n    isLoading,\n    renderValue: renderValueProp,\n    inputRef: inputRefProp,\n    style,\n    dropdownForm = 'default',\n    ...restProps\n  } = usePropsHandler(COMPONENT_NAME, withDefaultGetters(props), controlRef);\n\n  const {\n    getKeyProps,\n    getOptionProps,\n    isOpen,\n    visibleItems,\n    isFocused,\n    handleInputFocus,\n    handleInputBlur,\n    handleToggleDropdown,\n    inputRef,\n    handleInputClick,\n    notFound,\n    hasItems,\n  } = useSelect<ITEM, GROUP, false>({\n    items,\n    groups,\n    value,\n    onChange,\n    dropdownRef,\n    controlRef,\n    disabled,\n    getItemLabel,\n    getItemKey,\n    getGroupKey,\n    getItemGroupKey,\n    getItemDisabled,\n    multiple: false,\n    onBlur,\n    onFocus,\n  });\n\n  const inputId = id ? `${id}-input` : id;\n\n  const renderItemDefault: PropRenderItem<ITEM> = (props) => {\n    const { item, active, hovered, onClick, onMouseEnter } = props;\n\n    return (\n      <SelectItem\n        label={getItemLabel(item)}\n        active={active}\n        hovered={hovered}\n        multiple={false}\n        size={size}\n        indent={dropdownForm === 'round' ? 'increased' : 'normal'}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        disabled={getItemDisabled(item)}\n      />\n    );\n  };\n\n  const renderValueDefault: PropRenderValue<ITEM> = (props) => {\n    const label = getItemLabel(props.item);\n\n    return (\n      <span className={cnSelect('ControlValue')} title={label}>\n        {label}\n      </span>\n    );\n  };\n\n  const renderValue = renderValueProp || renderValueDefault;\n\n  return (\n    <>\n      <SelectContainer\n        focused={isFocused}\n        disabled={disabled}\n        size={size}\n        view={view}\n        form={form}\n        required={required}\n        ref={ref}\n        style={style}\n        id={inputId}\n        {...restProps}\n      >\n        <div\n          className={cnSelect('Control')}\n          ref={controlRef}\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          id={id}\n        >\n          <div className={cnSelect('ControlInner')}>\n            <div className={cnSelect('ControlValueContainer')}>\n              <input\n                {...getKeyProps()}\n                type=\"button\"\n                name={name}\n                id={inputId}\n                onFocus={handleInputFocus}\n                onBlur={handleInputBlur}\n                aria-label={ariaLabel}\n                onClick={handleInputClick}\n                ref={useForkRef([inputRef, inputRefProp])}\n                className={cnSelect('FakeField')}\n                readOnly\n              />\n              {value && renderValue({ item: value })}\n              {(typeof value === 'undefined' || value === null) && placeholder && (\n                <span className={cnSelect('Placeholder')} title=\"placeholder\">\n                  {placeholder}\n                </span>\n              )}\n            </div>\n          </div>\n          <span className={cnSelect('Indicators')}>\n            <button\n              type=\"button\"\n              className={cnSelect('IndicatorsDropdown')}\n              tabIndex={-1}\n              onClick={handleToggleDropdown}\n            >\n              <IconSelect\n                size=\"xs\"\n                className={cnSelect('DropdownIndicatorIcon')}\n              />\n            </button>\n          </span>\n        </div>\n      </SelectContainer>\n      <SelectDropdown\n        isOpen={isOpen}\n        size={size}\n        controlRef={controlRef}\n        getOptionProps={getOptionProps}\n        dropdownRef={dropdownRef}\n        form={dropdownForm}\n        className={dropdownClassName}\n        renderItem={renderItem || renderItemDefault}\n        getGroupLabel={getGroupLabel}\n        visibleItems={visibleItems}\n        notFound={notFound}\n        isLoading={isLoading}\n        labelForEmptyItems={labelForEmptyItems}\n        hasItems={hasItems}\n        style={\n          typeof style?.zIndex === 'number'\n            ? { zIndex: style.zIndex + 1 }\n            : undefined\n        }\n      />\n    </>\n  );\n};\n\nexport const Select = forwardRef(SelectRender) as SelectComponent;\n\nexport * from './helpers';\n"],
  "mappings": "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",
  "names": ["SelectRender", "props", "ref", "defaultDropdownRef", "useRef", "controlRef", "usePropsHandler", "COMPONENT_NAME", "withDefaultGetters", "placeholder", "onBlur", "onFocus", "items", "onChange", "value", "required", "disabled", "ariaLabel", "id", "dropdownRef", "form", "defaultPropForm", "view", "defaultPropView", "size", "defaultPropSize", "dropdownClassName", "name", "groups", "getItemLabel", "labelForEmptyItems", "defaultLabelForEmptyItems", "getItemKey", "getItemGroupKey", "getItemDisabled", "getGroupKey", "getGroupLabel", "renderItem", "isLoading", "renderValueProp", "renderValue", "inputRefProp", "inputRef", "style", "dropdownForm", "restProps", "useSelect", "multiple", "getKeyProps", "getOptionProps", "isOpen", "visibleItems", "isFocused", "handleInputFocus", "handleInputBlur", "handleToggleDropdown", "handleInputClick", "notFound", "hasItems", "inputId", "React", "cnSelect", "useForkRef", "renderValueDefault", "label", "item", "renderItemDefault", "active", "hovered", "onClick", "onMouseEnter", "zIndex", "Select", "forwardRef"]
}
