{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/Select/helpers.ts", "../../node_modules/@consta/src/hooks/useForkRef/useForkRef.tsx", "../../node_modules/@consta/src/utils/setRef.ts", "../../node_modules/@consta/src/hooks/useFlag/useFlag.ts", "../../node_modules/@consta/src/components/EventInterceptor/usePropsHandler.tsx", "../../node_modules/@consta/src/components/EventInterceptor/EventInterceptor.tsx", "../../node_modules/@consta/src/components/EventInterceptor/propsHandlers/useSelectEventsHandler.tsx", "../../node_modules/@consta/src/components/EventInterceptor/propsHandlers/useSnackBarEventsHandler.tsx", "../../node_modules/@consta/src/components/EventInterceptor/propsHandlers/useTextFieldEventsHandler.tsx"],
  "sourcesContent": ["import { IconComponent } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';\nimport {\n  PropForm,\n  PropSize,\n  PropStatus,\n  PropView,\n  RenderItemProps,\n} from '../SelectComponents/types';\n\nexport type DefaultItem = {\n  label: string;\n  id: string | number;\n  groupId?: string | number;\n  disabled?: boolean;\n};\n\nexport type DefaultGroup = {\n  label: string;\n  id: string | number;\n};\n\ntype PropValue<ITEM> = ITEM | null | undefined;\n\ntype RenderValueProps<ITEM> = {\n  item: ITEM;\n};\n\nexport type PropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type PropGetItemKey<ITEM> = (item: ITEM) => string | number;\nexport type PropGetItemGroupKey<ITEM> = (\n  item: ITEM,\n) => string | number | undefined;\nexport type PropGetItemDisabled<ITEM> = (item: ITEM) => boolean | undefined;\nexport type PropGetGroupKey<GROUP> = (group: GROUP) => string | number;\nexport type PropGetGroupLabel<GROUP> = (group: GROUP) => string;\nexport type PropRenderItem<ITEM> = (\n  props: RenderItemProps<ITEM>,\n) => React.ReactElement | null;\nexport type PropRenderValue<ITEM> = (\n  props: RenderValueProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type SelectProps<\n  ITEM = DefaultItem,\n  GROUP = DefaultGroup,\n> = PropsWithHTMLAttributesAndRef<\n  {\n    items: ITEM[];\n    onChange: (props: { value: ITEM | null; e: React.SyntheticEvent }) => void;\n    disabled?: boolean;\n    form?: PropForm;\n    dropdownForm?: 'default' | 'brick' | 'round';\n    size?: PropSize;\n    view?: PropView;\n    status?: PropStatus;\n    focused?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n    ariaLabel?: string;\n    dropdownClassName?: string;\n    dropdownRef?: React.RefObject<HTMLDivElement>;\n    required?: boolean;\n    name?: string;\n    isLoading?: boolean;\n    labelForEmptyItems?: string;\n    value?: PropValue<ITEM>;\n    renderItem?: PropRenderItem<ITEM>;\n    renderValue?: PropRenderValue<ITEM>;\n    onFocus?: React.FocusEventHandler<HTMLInputElement>;\n    onBlur?: React.FocusEventHandler<HTMLInputElement>;\n    inputRef?: React.RefObject<HTMLInputElement>;\n    groups?: GROUP[];\n    getItemLabel?: PropGetItemLabel<ITEM>;\n    getItemKey?: PropGetItemKey<ITEM>;\n    getItemGroupKey?: PropGetItemGroupKey<ITEM>;\n    getItemDisabled?: PropGetItemDisabled<ITEM>;\n    getGroupLabel?: PropGetGroupLabel<GROUP>;\n    getGroupKey?: PropGetGroupKey<GROUP>;\n    label?: string;\n    labelIcon?: IconComponent;\n    labelPosition?: 'top' | 'left';\n    caption?: string;\n  },\n  HTMLDivElement\n> &\n  (ITEM extends { label: DefaultItem['label'] }\n    ? {}\n    : { getItemLabel: PropGetItemLabel<ITEM> }) &\n  (ITEM extends { id: DefaultItem['id'] }\n    ? {}\n    : { getItemKey: PropGetItemKey<ITEM> }) &\n  (GROUP extends { label: DefaultGroup['label'] }\n    ? {}\n    : { getGroupLabel: PropGetGroupLabel<GROUP> }) &\n  (GROUP extends { id: DefaultGroup['id'] }\n    ? {}\n    : { getGroupKey: PropGetGroupKey<GROUP> });\n\nexport type SelectComponent = <ITEM = DefaultItem, GROUP = DefaultGroup>(\n  props: SelectProps<ITEM, GROUP>,\n) => React.ReactElement | null;\n\nexport const defaultGetItemKey: PropGetItemKey<DefaultItem> = (item) => item.id;\nexport const defaultGetItemLabel: PropGetItemLabel<DefaultItem> = (item) =>\n  item.label;\nexport const defaultGetItemGroupKey: PropGetItemGroupKey<DefaultItem> = (\n  item,\n) => item.groupId;\nexport const defaultGetItemDisabled: PropGetItemDisabled<DefaultItem> = (\n  item,\n) => item.disabled;\n\nexport const defaultGetGroupKey: PropGetGroupKey<DefaultGroup> = (group) =>\n  group.id;\nexport const defaultGetGroupLabel: PropGetGroupLabel<DefaultGroup> = (group) =>\n  group.label;\n\nexport function withDefaultGetters<ITEM, GROUP>(\n  props: SelectProps<ITEM, GROUP>,\n) {\n  return {\n    ...props,\n    getItemLabel: props.getItemLabel || defaultGetItemLabel,\n    getItemKey: props.getItemKey || defaultGetItemKey,\n    getItemGroupKey: props.getItemGroupKey || defaultGetItemGroupKey,\n    getItemDisabled: props.getItemDisabled || defaultGetItemDisabled,\n    getGroupLabel: props.getGroupLabel || defaultGetGroupLabel,\n    getGroupKey: props.getGroupKey || defaultGetGroupKey,\n  };\n}\n", "import { useMemo } from 'react';\n\nimport { setRef } from '##/utils/setRef';\n\nexport function useForkRef<T>(\n  refs: (React.Ref<T> | undefined)[],\n): React.RefCallback<T> | null {\n  return useMemo(() => {\n    if (refs.length < 1) {\n      return null;\n    }\n    return (refValue) => {\n      for (const ref of refs) {\n        setRef(ref as React.MutableRefObject<T>, refValue);\n      }\n    };\n  }, [refs]);\n}\n", "import * as React from 'react';\n\ntype Ref<T> = React.RefCallback<T> | React.MutableRefObject<T> | undefined;\n\nexport function setRef<T>(ref: Ref<T>, value: T): void {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref.current = value;\n  }\n}\n", "import { useCallback, useState } from 'react';\n\nconst not = (state: boolean) => !state;\n\ntype Flag = [\n  boolean,\n  {\n    on: () => void;\n    off: () => void;\n    toggle: () => void;\n    /**\n     * @deprecated since version 4.6.3 toggle()\n     */\n    toogle: () => void;\n  },\n];\n\nexport const useFlag = (initial = false): Flag => {\n  const [state, setState] = useState(initial);\n\n  const on = useCallback(() => setState(true), []);\n  const off = useCallback(() => setState(false), []);\n  const toggle = useCallback(() => setState(not), []);\n  const toogle = useCallback(() => setState(not), []);\n\n  return [\n    state,\n    {\n      on,\n      off,\n      toggle,\n      toogle,\n    },\n  ];\n};\n", "import React from 'react';\n\nimport { EventInterceptorContext } from './EventInterceptor';\nimport { EventInterceptorComponentName } from './types';\n\nexport const usePropsHandler = <PROPS extends {}>(\n  componentName: EventInterceptorComponentName,\n  props: PROPS,\n  ref?: React.Ref<HTMLElement>,\n): PROPS => {\n  const context = React.useContext(EventInterceptorContext);\n\n  if (!context) {\n    return props;\n  }\n\n  const { eventHandler, map } = context;\n  const propsHandler = map[componentName];\n\n  if (!propsHandler) {\n    return props;\n  }\n\n  return propsHandler(props, eventHandler, ref) as PROPS;\n};\n", "import React from 'react';\n\nimport { eventInterceptorMap } from './eventInterceptorMap';\nimport { EventInterceptorComponentName } from './types';\n\nexport type EventInterceptorMap = typeof eventInterceptorMap;\n\nexport type EventInterceptorProps = {\n  component: EventInterceptorComponentName;\n  event?: string;\n  options: {\n    [key: string]: any;\n  };\n};\n\nexport type EventInterceptorHandler =\n  | ((props: EventInterceptorProps) => void)\n  | undefined;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst EventInterceptorContext = React.createContext<\n  | { eventHandler: EventInterceptorHandler; map: EventInterceptorMap }\n  | undefined\n>(undefined);\n\nconst EventInterceptorProvider = ({\n  children,\n  eventHandler,\n  map,\n}: {\n  children: React.ReactNode;\n  eventHandler: EventInterceptorHandler;\n  map: EventInterceptorMap;\n}) => {\n  return (\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    <EventInterceptorContext.Provider value={{ eventHandler, map }}>\n      {children}\n    </EventInterceptorContext.Provider>\n  );\n};\n\nexport { EventInterceptorContext, EventInterceptorProvider };\nexport * from './eventInterceptorMap';\n", "import React, { useEffect } from 'react';\n\nimport { useFlag } from '##/hooks/useFlag';\n\nimport { defaultGetItemLabel, SelectProps } from '../../Select/helpers';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport const useSelectEventsHandler = <PROPS extends SelectProps>(\n  props: PROPS,\n  handler: EventInterceptorHandler,\n  ref: React.RefObject<HTMLDivElement | null>,\n) => {\n  const newProps: PROPS = { ...props };\n  const [valueChanged, setValueChanged] = useFlag();\n\n  useEffect(() => {\n    setValueChanged.on();\n  }, [newProps.value]);\n\n  newProps.onFocus = (...onfocusArgs) => {\n    setValueChanged.off();\n    return props.onFocus?.(...onfocusArgs);\n  };\n\n  newProps.onBlur = (...onBlurArgs) => {\n    const value = {\n      component: 'Select' as const,\n      event: 'change',\n      options: {\n        placeholder: newProps.placeholder,\n        label: newProps.value\n          ? (newProps.getItemLabel ?? defaultGetItemLabel)(newProps.value)\n          : undefined,\n        value: newProps.value,\n        pageURL: window.location.href,\n        DOMRef: ref.current,\n        props: newProps,\n      },\n    };\n    valueChanged && handler!(value);\n    return props.onBlur?.(...onBlurArgs);\n  };\n\n  return newProps;\n};\n", "import React from 'react';\n\nimport { SnackBarItemDefault, SnackBarProps } from '../../SnackBar/types';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport const useSnackBarEventsHandler = <\n  P extends SnackBarProps<SnackBarItemDefault>,\n>(\n  props: P,\n  handler: EventInterceptorHandler,\n): P => {\n  const newProps: P = { ...props };\n\n  React.useEffect(() => {\n    if (newProps.items.length) {\n      const value = {\n        component: 'SnackBar' as const,\n        event: 'change',\n        options: {\n          pageURL: window.location.href,\n          DOMRef: document.getElementsByClassName('SnackBar')[0],\n          items: newProps.items,\n          props: newProps,\n        },\n      };\n\n      handler!(value);\n    }\n  }, [newProps.items.length]);\n\n  return newProps;\n};\n", "import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { AutoCompete } from '../../../utils/types/AutoComplete';\nimport {\n  TextField,\n  TextFieldPropForm,\n  TextFieldPropId,\n  TextFieldPropName,\n  TextFieldPropOnChange,\n  TextFieldPropSize,\n  TextFieldPropStatus,\n  TextFieldPropValue,\n  TextFieldPropView,\n  TextFieldPropWidth,\n} from '../../TextField/TextField';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport type Props = {\n  className?: string;\n  value?: TextFieldPropValue;\n  onChange?: TextFieldPropOnChange;\n  id?: TextFieldPropId;\n  name?: TextFieldPropName;\n  type?: string;\n  disabled?: boolean;\n  cols?: number;\n  maxLength?: number;\n  size?: TextFieldPropSize;\n  view?: TextFieldPropView;\n  form?: TextFieldPropForm;\n  state?: TextFieldPropStatus;\n  width?: TextFieldPropWidth;\n  onFocus?: React.FocusEventHandler<HTMLElement>;\n  onBlur?: React.FocusEventHandler<HTMLElement>;\n  autoFocus?: boolean;\n  placeholder?: string;\n  leftSide?: string | IconComponent;\n  rightSide?: string | IconComponent;\n  autoComplete?: AutoCompete;\n  max?: number | string;\n  min?: number | string;\n  readOnly?: boolean;\n  required?: boolean;\n  step?: number | string;\n  tabIndex?: number;\n  inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;\n  ariaLabel?: string;\n  iconSize?: IconPropSize;\n  children?: never;\n};\n\ntype TextFieldProps = Parameters<typeof TextField>[0];\n\nexport const useTextFieldEventsHandler = <P extends TextFieldProps>(\n  props: P,\n  handler: EventInterceptorHandler,\n  ref: React.RefObject<HTMLDivElement>,\n): P => {\n  const [inputChanged, setInputChanged] = React.useState<boolean>(false);\n  const newProps: P = { ...props };\n\n  React.useEffect(() => {\n    setInputChanged(true);\n  }, [newProps.value]);\n\n  newProps.onFocus = (...onfocusArgs) => {\n    setInputChanged(false);\n\n    return props.onFocus?.(...onfocusArgs);\n  };\n\n  newProps.onBlur = (...onBlurArgs) => {\n    const value = {\n      component: 'TextField' as const,\n      event: 'change',\n      options: {\n        placeholder: newProps.placeholder,\n        pageURL: window.location.href,\n        DOMRef: ref.current,\n        value: newProps.value,\n        props: newProps,\n      },\n    };\n    if (inputChanged) {\n      handler!(value);\n    }\n\n    return props.onBlur?.(...onBlurArgs);\n  };\n\n  return newProps;\n};\n"],
  "mappings": "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",
  "names": ["defaultGetItemKey", "item", "id", "defaultGetItemLabel", "label", "defaultGetItemGroupKey", "groupId", "defaultGetItemDisabled", "disabled", "defaultGetGroupKey", "group", "defaultGetGroupLabel", "withDefaultGetters", "props", "getItemLabel", "getItemKey", "getItemGroupKey", "getItemDisabled", "getGroupLabel", "getGroupKey", "setRef", "ref", "value", "current", "useForkRef", "refs", "useMemo", "length", "refValue", "ref", "setRef", "a", "import_react", "not", "state", "useFlag", "initial", "useState", "setState", "on", "useCallback", "off", "toggle", "toogle", "import_react", "import_react", "import_react", "import_react", "import_react", "EventInterceptorContext", "React", "createContext", "usePropsHandler", "componentName", "props", "ref", "context", "React", "useContext", "EventInterceptorContext", "eventHandler", "map", "propsHandler"]
}
