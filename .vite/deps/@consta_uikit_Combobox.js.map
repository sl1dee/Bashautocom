{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/Combobox/Combobox.tsx", "../../node_modules/@consta/src/components/SelectComponents/SelectValueTag/SelectValueTag.tsx", "../../node_modules/@consta/src/components/Tag/Tag.tsx", "../../node_modules/@consta/src/components/TagBase/TagBase.tsx", "../../node_modules/@consta/src/components/Combobox/helpers.ts"],
  "sourcesContent": ["import '../SelectComponents/Select.css';\n\nimport { IconClose } from '@consta/icons/IconClose';\nimport { IconSelect } from '@consta/icons/IconSelect';\nimport React, { forwardRef, useRef } from 'react';\n\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { useSelect } from '../../hooks/useSelect/useSelect';\nimport { cnMixFocus } from '../../mixs/MixFocus/MixFocus';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\nimport { cnSelect } from '../SelectComponents/cnSelect';\nimport {\n  defaultlabelForCreate,\n  defaultLabelForEmptyItems,\n  defaultlabelForNotFound,\n  getInputWidth,\n} from '../SelectComponents/helpers';\nimport { SelectContainer } from '../SelectComponents/SelectContainer/SelectContainer';\nimport { SelectDropdown } from '../SelectComponents/SelectDropdown/SelectDropdown';\nimport { SelectItem } from '../SelectComponents/SelectItem/SelectItem';\nimport { SelectValueTag } from '../SelectComponents/SelectValueTag/SelectValueTag';\nimport {\n  defaultPropForm,\n  defaultPropSize,\n  defaultPropView,\n} from '../SelectComponents/types';\nimport {\n  ComboboxComponent,\n  ComboboxProps,\n  DefaultGroup,\n  DefaultItem,\n  isMultipleParams,\n  isNotMultipleParams,\n  PropRenderItem,\n  PropRenderValue,\n  withDefaultGetters,\n} from './helpers';\n\nexport const COMPONENT_NAME = 'Combobox' as const;\n\nconst ComboboxRender = <\n  ITEM = DefaultItem,\n  GROUP = DefaultGroup,\n  MULTIPLE extends boolean = false,\n>(\n  props: ComboboxProps<ITEM, GROUP, MULTIPLE>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const defaultDropdownRef = useRef<HTMLDivElement | null>(null);\n  const controlInnerRef = useRef<HTMLDivElement>(null);\n  const helperInputFakeElement = useRef<HTMLDivElement>(null);\n  const controlRef = useRef<HTMLDivElement | null>(null);\n\n  const {\n    placeholder,\n    onBlur,\n    onFocus,\n    items,\n    onChange,\n    value,\n    disabled,\n    ariaLabel,\n    id,\n    required,\n    dropdownRef,\n    form = defaultPropForm,\n    view = defaultPropView,\n    size = defaultPropSize,\n    dropdownClassName,\n    name,\n    groups = [],\n    getItemLabel,\n    getItemKey,\n    getItemGroupKey,\n    getItemDisabled,\n    getGroupKey,\n    getGroupLabel,\n    renderItem,\n    searchValue: searchValueProp,\n    renderValue: renderValueProp,\n    onCreate,\n    inputRef: inputRefProp,\n    labelForNotFound = defaultlabelForNotFound,\n    labelForCreate = defaultlabelForCreate,\n    labelForEmptyItems = defaultLabelForEmptyItems,\n    onInputChange,\n    searchFunction,\n    selectAll,\n    isLoading,\n    multiple = false,\n    style,\n    dropdownForm = 'default',\n    ...otherProps\n  } = usePropsHandler(COMPONENT_NAME, withDefaultGetters(props), controlRef);\n\n  const {\n    getKeyProps,\n    getOptionProps,\n    isOpen,\n    visibleItems,\n    isFocused,\n    handleInputFocus,\n    handleInputBlur,\n    handleToggleDropdown,\n    inputRef,\n    handleInputClick,\n    handleInputChange,\n    searchValue,\n    clearValue,\n    getHandleRemoveValue,\n    notFound,\n    hasItems,\n  } = useSelect({\n    items,\n    groups,\n    value,\n    onChange,\n    selectAll,\n    dropdownRef: defaultDropdownRef,\n    controlRef,\n    disabled,\n    getItemLabel,\n    getItemKey,\n    getGroupKey,\n    searchValue: searchValueProp,\n    getItemGroupKey,\n    getItemDisabled,\n    multiple,\n    onBlur,\n    onFocus,\n    onCreate,\n    searchFunction,\n  });\n\n  const inputId = id ? `${id}-input` : id;\n\n  const renderItemDefault: PropRenderItem<ITEM> = (props) => {\n    const { item, active, hovered, onClick, onMouseEnter } = props;\n\n    return (\n      <SelectItem\n        label={getItemLabel(item)}\n        active={active}\n        hovered={hovered}\n        multiple={multiple}\n        size={size}\n        indent={dropdownForm === 'round' ? 'increased' : 'normal'}\n        onClick={onClick}\n        onMouseEnter={onMouseEnter}\n        disabled={getItemDisabled(item)}\n      />\n    );\n  };\n\n  const renderValueDefaultMultiple: PropRenderValue<ITEM> = ({\n    item,\n    handleRemove,\n  }) => {\n    return (\n      <SelectValueTag\n        label={getItemLabel(item)}\n        key={getItemKey(item)}\n        size={size}\n        disabled={disabled || getItemDisabled(item)}\n        handleRemove={handleRemove}\n      />\n    );\n  };\n\n  const renderValueDefaultNotMultiple: PropRenderValue<ITEM> = (props) => {\n    const valueLable = getItemLabel(props.item);\n\n    return (\n      <span className={cnSelect('ControlValue')} title={valueLable}>\n        {valueLable}\n      </span>\n    );\n  };\n\n  const renderValue =\n    renderValueProp ||\n    (multiple ? renderValueDefaultMultiple : renderValueDefaultNotMultiple);\n\n  const inputRefForRender = useForkRef([inputRef, inputRefProp]);\n\n  const handleChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleInputChange(e);\n    const { value } = e.target;\n    !disabled && onInputChange?.({ e, id, name, value: value || null });\n  };\n\n  const renderControlValue = () => {\n    const width = multiple\n      ? getInputWidth(controlInnerRef, helperInputFakeElement)\n      : undefined;\n    return (\n      <>\n        {isMultipleParams(props) &&\n          Array.isArray(props.value) &&\n          props.value.map((item) =>\n            renderValue({ item, handleRemove: getHandleRemoveValue(item) }),\n          )}\n        {isNotMultipleParams(props) &&\n          props.value &&\n          renderValue({ item: props.value })}\n        {(!value || (Array.isArray(value) && value.length === 0)) &&\n          !searchValue &&\n          placeholder && (\n            <span className={cnSelect('Placeholder')} title=\"placeholder\">\n              {placeholder}\n            </span>\n          )}\n        <input\n          {...getKeyProps()}\n          type=\"text\"\n          name={name}\n          id={inputId}\n          onFocus={handleInputFocus}\n          onBlur={handleInputBlur}\n          aria-label={ariaLabel}\n          onChange={handleChangeValue}\n          ref={inputRefForRender}\n          className={cnSelect('Input', {\n            size,\n            hide: !multiple && !!value,\n            multiple,\n          })}\n          value={searchValue}\n          style={{ width }}\n        />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <SelectContainer\n        focused={isFocused}\n        disabled={disabled}\n        size={size}\n        view={view}\n        required={required}\n        form={form}\n        multiple={multiple}\n        ref={ref}\n        type=\"combobox\"\n        style={style}\n        id={inputId}\n        {...otherProps}\n      >\n        <div\n          className={cnSelect('Control', { hasInput: true })}\n          ref={controlRef}\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          id={id}\n        >\n          <div\n            className={cnSelect('ControlInner')}\n            onClick={handleInputClick}\n            role=\"button\"\n            ref={controlInnerRef}\n            aria-hidden=\"true\"\n          >\n            <div className={cnSelect('ControlValueContainer')}>\n              {multiple ? (\n                <div className={cnSelect('ControlValue')}>\n                  {renderControlValue()}\n                </div>\n              ) : (\n                renderControlValue()\n              )}\n            </div>\n          </div>\n          <span className={cnSelect('Indicators')}>\n            {value && (\n              <button\n                type=\"button\"\n                onClick={clearValue}\n                className={cnSelect('ClearIndicator', [cnMixFocus()])}\n              >\n                <IconClose\n                  size=\"xs\"\n                  className={cnSelect('ClearIndicatorIcon')}\n                />\n              </button>\n            )}\n            <span className={cnSelect('Delimiter')} />\n            <button\n              type=\"button\"\n              className={cnSelect('IndicatorsDropdown')}\n              tabIndex={-1}\n              onClick={handleToggleDropdown}\n            >\n              <IconSelect\n                size=\"xs\"\n                className={cnSelect('DropdownIndicatorIcon')}\n              />\n            </button>\n          </span>\n        </div>\n        <div\n          className={cnSelect('HelperInputFakeElement')}\n          ref={helperInputFakeElement}\n        >\n          {searchValue}\n        </div>\n      </SelectContainer>\n      <SelectDropdown\n        isOpen={isOpen}\n        size={size}\n        controlRef={controlRef}\n        getOptionProps={getOptionProps}\n        dropdownRef={useForkRef([dropdownRef, defaultDropdownRef])}\n        form={dropdownForm}\n        className={dropdownClassName}\n        renderItem={renderItem || renderItemDefault}\n        getGroupLabel={getGroupLabel}\n        visibleItems={visibleItems}\n        labelForNotFound={labelForNotFound}\n        labelForCreate={labelForCreate}\n        isLoading={isLoading}\n        labelForEmptyItems={labelForEmptyItems}\n        notFound={notFound}\n        hasItems={hasItems}\n        style={\n          typeof style?.zIndex === 'number'\n            ? { zIndex: style.zIndex + 1 }\n            : undefined\n        }\n      />\n    </>\n  );\n};\n\nexport const Combobox = forwardRef(ComboboxRender) as ComboboxComponent;\n\nexport * from './helpers';\n", "import './SelectValueTag.css';\n\nimport React from 'react';\n\nimport { cn } from '../../../utils/bem';\nimport { Tag } from '../../Tag/Tag';\n\ntype SelectValueTagProps = {\n  label: string;\n  size: 's' | 'm' | 'l' | 'xs';\n  children?: never;\n  disabled?: boolean;\n  handleRemove?: (e: React.SyntheticEvent) => void;\n};\n\nexport const cnSelectValueTag = cn('SelectValueTag');\n\nexport const SelectValueTag: React.FC<SelectValueTagProps> = (props) => {\n  const { handleRemove = () => {}, size, label, disabled } = props;\n\n  return (\n    <Tag\n      className={cnSelectValueTag({ size, disabled })}\n      label={label}\n      mode=\"cancel\"\n      onCancel={handleRemove}\n      size={size}\n    />\n  );\n};\n", "import { IconComponent, IconProps } from '@consta/icons/Icon';\nimport React, { forwardRef, useRef } from 'react';\n\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\nimport { TagBase } from '../TagBase/TagBase';\n\ntype TagBaseProps = React.ComponentProps<typeof TagBase>;\n\nexport const tagPropMode = [\n  'button',\n  'check',\n  'cancel',\n  'link',\n  'info',\n] as const;\nexport const tagPropModeDefault = tagPropMode[0];\ntype TagPropMode = typeof tagPropMode[number];\n\ntype CommonProps = {\n  size?: TagBaseProps['size'];\n  label: TagBaseProps['label'];\n  group?: TagBaseProps['group'];\n  icon?: IconComponent;\n  iconSize?: IconProps['size'];\n  children?: never;\n};\n\ntype PropsWithModeButton = CommonProps & {\n  mode?: 'button';\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  checked?: never;\n  onChange?: never;\n  onCancel?: never;\n};\n\ntype PropsWithModeLink = CommonProps & {\n  mode: 'link';\n  checked?: never;\n  onChange?: never;\n  onCancel?: never;\n};\n\ntype PropsWithModeCheck = CommonProps & {\n  mode: 'check';\n  onChange: ({\n    e,\n    checked,\n  }: {\n    e?: React.MouseEvent;\n    checked: boolean;\n  }) => void;\n  checked: boolean;\n  onClick?: never;\n  onCancel?: never;\n};\n\ntype PropsWithModeCancel = CommonProps & {\n  mode: 'cancel';\n  onCancel: React.MouseEventHandler<HTMLButtonElement>;\n  onClick?: never;\n  onChange?: never;\n  checked?: never;\n};\n\ntype PropsWithModeInfo = CommonProps & {\n  mode: 'info';\n  onCancel?: never;\n  onClick?: never;\n  onChange?: never;\n  checked?: never;\n};\n\ntype Props<ROLE extends TagPropMode = 'button'> = ROLE extends 'button'\n  ? PropsWithModeButton &\n      Omit<JSX.IntrinsicElements['button'], keyof PropsWithModeButton>\n  : {} & ROLE extends 'check'\n  ? PropsWithModeCheck &\n      Omit<JSX.IntrinsicElements['button'], keyof PropsWithModeCheck>\n  : {} & ROLE extends 'cancel'\n  ? PropsWithModeCancel &\n      Omit<JSX.IntrinsicElements['span'], keyof PropsWithModeCancel>\n  : {} & ROLE extends 'link'\n  ? PropsWithModeLink &\n      Omit<JSX.IntrinsicElements['a'], keyof PropsWithModeLink>\n  : {} & ROLE extends 'info'\n  ? PropsWithModeInfo &\n      Omit<JSX.IntrinsicElements['span'], keyof PropsWithModeInfo>\n  : {};\n\ntype TagRender = <ROLE extends TagPropMode>(\n  props: Props<ROLE>,\n  ref: React.Ref<HTMLElement>,\n) => React.ReactElement | null;\n\ntype TagComponent = <ROLE extends TagPropMode>(\n  props: Props<ROLE> & React.RefAttributes<HTMLElement>,\n) => React.ReactElement | null;\n\nexport function getParams(\n  mode: TagPropMode,\n  checked?: PropsWithModeCheck['checked'],\n  onClick?: React.MouseEventHandler,\n  onChange?: PropsWithModeCheck['onChange'],\n  onCancel?: PropsWithModeCancel['onCancel'],\n): {\n  view?: TagBaseProps['view'];\n  onClick?: TagBaseProps['onClick'];\n  onCancel?: TagBaseProps['onCancel'];\n  withAction?: TagBaseProps['withAction'];\n  as: keyof JSX.IntrinsicElements;\n} {\n  switch (mode) {\n    case 'button':\n      return {\n        view: 'filled',\n        onClick,\n        as: 'button',\n        withAction: true,\n      };\n    case 'link':\n      return {\n        view: 'filled',\n        onClick,\n        as: 'a',\n        withAction: true,\n      };\n    case 'check':\n      return {\n        view: checked ? 'filled' : 'stroked',\n        onClick:\n          typeof onChange === 'function'\n            ? (e: React.MouseEvent) => onChange({ e, checked: !checked })\n            : undefined,\n        as: 'button',\n        withAction: true,\n      };\n    case 'cancel':\n      return {\n        view: 'filled',\n        onCancel,\n        as: 'span',\n      };\n    case 'info':\n      return {\n        view: 'filled',\n        as: 'span',\n      };\n  }\n}\n\nexport const COMPONENT_NAME = 'Tag' as const;\n\nconst TagRenter: TagRender = (props, ref) => {\n  const tagRef = useRef<HTMLDivElement>(null);\n  const {\n    mode = tagPropModeDefault,\n    onChange,\n    checked,\n    onCancel,\n    onClick,\n    ...otherProps\n  } = usePropsHandler(COMPONENT_NAME, props, tagRef);\n  const params = getParams(mode, checked, onClick, onChange, onCancel);\n\n  return (\n    <TagBase {...otherProps} {...params} ref={useForkRef([ref, tagRef])} />\n  );\n};\n\nexport const Tag = forwardRef(TagRenter) as TagComponent;\n", "import './TagBase.css';\n\nimport { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport { IconClose } from '@consta/icons/IconClose';\nimport React from 'react';\n\nimport { cn } from '../../utils/bem';\nimport { getByMap } from '../../utils/getByMap';\nimport { forwardRefWithAs } from '../../utils/types/PropsWithAsAttributes';\n\nexport const tagBasePropSize = ['m', 'xs', 's', 'l'] as const;\nexport const tagBasePropSizeDefault = tagBasePropSize[0];\nexport type TagBasePropSize = typeof tagBasePropSize[number];\n\nexport const tagBasePropGroupNumberValue = [1, 2, 3, 4, 5, 6, 7, 8, 9] as const;\nexport const tagBasePropGroupStringValue = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n] as const;\nexport const tagBasePropGroup = [\n  ...tagBasePropGroupNumberValue,\n  ...tagBasePropGroupStringValue,\n];\n\nexport type TagBasePropGroup = typeof tagBasePropGroup[number];\n\nexport const tagBasePropView = ['stroked', 'filled'] as const;\nexport const tagBasePropViewDefault = tagBasePropView[0];\nexport type TagBasePropView = typeof tagBasePropView[number];\n\nexport type Props = {\n  size?: TagBasePropSize;\n  label: string;\n  children?: never;\n  view?: TagBasePropView;\n  group?: TagBasePropGroup;\n  onCancel?: React.MouseEventHandler<HTMLButtonElement>;\n  icon?: IconComponent;\n  iconSize?: IconPropSize;\n  withAction?: boolean;\n};\n\nexport const cnTagBase = cn('TagBase');\n\nconst sizeMap: Record<TagBasePropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 'xs',\n  m: 's',\n  l: 's',\n};\n\nexport const TagBase = forwardRefWithAs<Props>((props, ref) => {\n  const {\n    size = tagBasePropSizeDefault,\n    as = 'div',\n    label,\n    className,\n    group,\n    view = tagBasePropViewDefault,\n    onCancel,\n    icon: Icon,\n    iconSize,\n    withAction,\n    ...otherProps\n  } = props;\n\n  const Tag = as as string;\n  const withCancel = typeof onCancel === 'function';\n  const withIcon = !!Icon;\n  const IconCloseSize = getByMap(sizeMap, size);\n  const IconSize = getByMap(sizeMap, size, iconSize);\n\n  return (\n    <Tag\n      {...otherProps}\n      className={cnTagBase(\n        {\n          size,\n          view,\n          withCancel,\n          withIcon,\n          group,\n          withAction,\n        },\n        [className],\n      )}\n      ref={ref}\n    >\n      {withCancel || Icon ? (\n        <>\n          {Icon && (\n            <span className={cnTagBase('IconWrapper')}>\n              <Icon size={IconSize} className={cnTagBase('Icon')} />\n            </span>\n          )}\n          <span className={cnTagBase('Label')}>{label}</span>\n          {withCancel && (\n            <button\n              className={cnTagBase('CancelButton')}\n              type=\"button\"\n              onClick={onCancel}\n            >\n              <IconClose\n                className={cnTagBase('CancelIcon')}\n                size={IconCloseSize}\n              />\n            </button>\n          )}\n        </>\n      ) : (\n        label\n      )}\n    </Tag>\n  );\n});\n", "import { IconComponent } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';\nimport {\n  PropForm,\n  PropSize,\n  PropStatus,\n  PropView,\n  RenderItemProps,\n} from '../SelectComponents/types';\nimport { TextFieldPropOnChange } from '../TextField/TextField';\n\nexport type DefaultItem = {\n  label: string;\n  id: string | number;\n  groupId?: string | number;\n  disabled?: boolean;\n};\n\nexport type DefaultGroup = {\n  label: string;\n  id: string | number;\n};\n\ntype RenderValueProps<ITEM> = {\n  item: ITEM;\n  handleRemove?: (e: React.SyntheticEvent) => void;\n};\n\nexport type PropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type PropGetItemKey<ITEM> = (item: ITEM) => string | number;\nexport type PropGetItemGroupKey<ITEM> = (\n  item: ITEM,\n) => string | number | undefined;\nexport type PropGetItemDisabled<ITEM> = (item: ITEM) => boolean | undefined;\nexport type PropGetGroupKey<GROUP> = (group: GROUP) => string | number;\nexport type PropGetGroupLabel<GROUP> = (group: GROUP) => string;\ntype PropSearchFunction<ITEM> = (item: ITEM, searchValue: string) => boolean;\ntype PropOnChange<ITEM, MULTIPLE extends boolean> = (props: {\n  value: (MULTIPLE extends true ? ITEM[] : ITEM) | null;\n  e: React.SyntheticEvent;\n}) => void;\ntype PropValue<ITEM, MULTIPLE extends boolean> =\n  | (MULTIPLE extends true ? ITEM[] : ITEM)\n  | null\n  | undefined;\n\nexport type PropRenderItem<ITEM> = (\n  props: RenderItemProps<ITEM>,\n) => React.ReactElement | null;\nexport type PropRenderValue<ITEM> = (\n  props: RenderValueProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type ComboboxProps<\n  ITEM = DefaultItem,\n  GROUP = DefaultGroup,\n  MULTIPLE extends boolean = false,\n> = PropsWithHTMLAttributesAndRef<\n  {\n    items: ITEM[];\n    onChange: PropOnChange<ITEM, MULTIPLE>;\n    disabled?: boolean;\n    form?: PropForm;\n    dropdownForm?: 'default' | 'brick' | 'round';\n    size?: PropSize;\n    view?: PropView;\n    placeholder?: string;\n    ariaLabel?: string;\n    status?: PropStatus;\n    isLoading?: boolean;\n    dropdownClassName?: string;\n    dropdownRef?: React.Ref<HTMLDivElement>;\n    name?: string;\n    renderItem?: PropRenderItem<ITEM>;\n    renderValue?: PropRenderValue<ITEM>;\n    onFocus?: React.FocusEventHandler<HTMLInputElement>;\n    onBlur?: React.FocusEventHandler<HTMLInputElement>;\n    onCreate?: (props: { e: React.SyntheticEvent; label: string }) => void;\n    inputRef?: React.Ref<HTMLInputElement>;\n    labelForNotFound?: string;\n    required?: boolean;\n    labelForCreate?: string;\n    labelForEmptyItems?: string;\n    searchFunction?: PropSearchFunction<ITEM>;\n    searchValue?: string;\n    multiple?: MULTIPLE;\n    value?: PropValue<ITEM, MULTIPLE>;\n    groups?: GROUP[];\n    onInputChange?: TextFieldPropOnChange;\n    getItemLabel?: PropGetItemLabel<ITEM>;\n    getItemKey?: PropGetItemKey<ITEM>;\n    getItemGroupKey?: PropGetItemGroupKey<ITEM>;\n    getItemDisabled?: PropGetItemDisabled<ITEM>;\n    getGroupLabel?: PropGetGroupLabel<GROUP>;\n    getGroupKey?: PropGetGroupKey<GROUP>;\n    label?: string;\n    labelIcon?: IconComponent;\n    caption?: string;\n    labelPosition?: 'top' | 'left';\n  },\n  HTMLDivElement\n> &\n  (MULTIPLE extends true\n    ? {\n        selectAll?: boolean;\n      }\n    : {\n        selectAll?: never;\n      }) &\n  (ITEM extends { label: DefaultItem['label'] }\n    ? {}\n    : { getItemLabel: PropGetItemLabel<ITEM> }) &\n  (ITEM extends { id: DefaultItem['id'] }\n    ? {}\n    : { getItemKey: PropGetItemKey<ITEM> }) &\n  (GROUP extends { label: DefaultGroup['label'] }\n    ? {}\n    : { getGroupLabel: PropGetGroupLabel<GROUP> }) &\n  (GROUP extends { id: DefaultGroup['id'] }\n    ? {}\n    : { getGroupKey: PropGetGroupKey<GROUP> });\n\nexport type ComboboxComponent = <\n  ITEM = DefaultItem,\n  GROUP = DefaultGroup,\n  MULTIPLE extends boolean = false,\n>(\n  props: ComboboxProps<ITEM, GROUP, MULTIPLE>,\n) => React.ReactElement | null;\n\nexport const defaultGetItemKey: PropGetItemKey<DefaultItem> = (item) => item.id;\nexport const defaultGetItemLabel: PropGetItemLabel<DefaultItem> = (item) =>\n  item.label;\nexport const defaultGetItemGroupKey: PropGetItemGroupKey<DefaultItem> = (\n  item,\n) => item.groupId;\nexport const defaultGetItemDisabled: PropGetItemDisabled<DefaultItem> = (\n  item,\n) => item.disabled;\n\nexport const defaultGetGroupKey: PropGetGroupKey<DefaultGroup> = (group) =>\n  group.id;\nexport const defaultGetGroupLabel: PropGetGroupLabel<DefaultGroup> = (group) =>\n  group.label;\n\nexport const isMultipleParams = <ITEM, GROUP>(\n  params: ComboboxProps<ITEM, GROUP, boolean>,\n): params is ComboboxProps<ITEM, GROUP, true> => {\n  return !!params.multiple;\n};\n\nexport const isNotMultipleParams = <ITEM, GROUP>(\n  params: ComboboxProps<ITEM, GROUP, boolean>,\n): params is ComboboxProps<ITEM, GROUP, false> => {\n  return !params.multiple;\n};\n\nexport function withDefaultGetters<\n  ITEM = DefaultItem,\n  GROUP = DefaultGroup,\n  MULTIPLE extends boolean = false,\n>(props: ComboboxProps<ITEM, GROUP, MULTIPLE>) {\n  return {\n    ...props,\n    getItemLabel: props.getItemLabel || defaultGetItemLabel,\n    getItemKey: props.getItemKey || defaultGetItemKey,\n    getItemGroupKey: props.getItemGroupKey || defaultGetItemGroupKey,\n    getItemDisabled: props.getItemDisabled || defaultGetItemDisabled,\n    getGroupLabel: props.getGroupLabel || defaultGetGroupLabel,\n    getGroupKey: props.getGroupKey || defaultGetGroupKey,\n  };\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "tagBasePropSize", "tagBasePropSizeDefault", "tagBasePropGroupNumberValue", "tagBasePropGroupStringValue", "tagBasePropGroup", "tagBasePropView", "tagBasePropViewDefault", "cnTagBase", "cn", "sizeMap", "xs", "s", "m", "l", "TagBase", "forwardRefWithAs", "props", "ref", "size", "as", "label", "className", "group", "view", "onCancel", "Icon", "icon", "iconSize", "withAction", "otherProps", "withCancel", "IconCloseSize", "getByMap", "IconSize", "React", "withIcon", "tagPropMode", "tagPropModeDefault", "getParams", "mode", "checked", "onClick", "onChange", "onCancel", "view", "as", "withAction", "e", "COMPONENT_NAME", "TagRenter", "props", "ref", "tagRef", "useRef", "usePropsHandler", "otherProps", "_excluded", "params", "React", "useForkRef", "Tag", "forwardRef", "cnSelectValueTag", "cn", "SelectValueTag", "props", "handleRemove", "size", "label", "disabled", "React", "defaultGetItemKey", "item", "id", "defaultGetItemLabel", "label", "defaultGetItemGroupKey", "groupId", "defaultGetItemDisabled", "disabled", "defaultGetGroupKey", "group", "defaultGetGroupLabel", "isMultipleParams", "params", "multiple", "isNotMultipleParams", "withDefaultGetters", "props", "getItemLabel", "getItemKey", "getItemGroupKey", "getItemDisabled", "getGroupLabel", "getGroupKey", "COMPONENT_NAME", "ComboboxRender", "props", "ref", "defaultDropdownRef", "useRef", "controlInnerRef", "helperInputFakeElement", "controlRef", "usePropsHandler", "withDefaultGetters", "placeholder", "onBlur", "onFocus", "items", "onChange", "value", "disabled", "ariaLabel", "id", "required", "dropdownRef", "form", "defaultPropForm", "view", "defaultPropView", "size", "defaultPropSize", "dropdownClassName", "name", "groups", "getItemLabel", "getItemKey", "getItemGroupKey", "getItemDisabled", "getGroupKey", "getGroupLabel", "renderItem", "searchValueProp", "searchValue", "renderValueProp", "renderValue", "onCreate", "inputRefProp", "inputRef", "labelForNotFound", "defaultlabelForNotFound", "labelForCreate", "defaultlabelForCreate", "labelForEmptyItems", "defaultLabelForEmptyItems", "onInputChange", "searchFunction", "selectAll", "isLoading", "multiple", "style", "dropdownForm", "otherProps", "_excluded", "useSelect", "getKeyProps", "getOptionProps", "isOpen", "visibleItems", "isFocused", "handleInputFocus", "handleInputBlur", "handleToggleDropdown", "handleInputClick", "handleInputChange", "clearValue", "getHandleRemoveValue", "notFound", "hasItems", "inputId", "renderValueDefaultMultiple", "a", "item", "handleRemove", "React", "renderValueDefaultNotMultiple", "valueLable", "cnSelect", "inputRefForRender", "useForkRef", "handleChangeValue", "e", "target", "renderControlValue", "width", "getInputWidth", "isMultipleParams", "Array", "isArray", "map", "isNotMultipleParams", "length", "hide", "hasInput", "cnMixFocus", "renderItemDefault", "active", "hovered", "onClick", "onMouseEnter", "zIndex", "Combobox", "forwardRef"]
}
