{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/Slider/Slider.tsx", "../../node_modules/@consta/src/hooks/useSortSteps/useSortSteps.ts", "../../node_modules/@consta/src/components/Slider/helper.ts", "../../node_modules/@consta/src/components/Slider/SliderInput/SliderInput.tsx", "../../node_modules/@consta/src/components/TextField/TextField.tsx", "../../node_modules/@consta/src/icons/IconEye/IconEye_size_m.tsx", "../../node_modules/@consta/src/icons/IconEye/IconEye_size_s.tsx", "../../node_modules/@consta/src/icons/IconEye/IconEye_size_xs.tsx", "../../node_modules/@consta/src/icons/IconEye/IconEye.tsx", "../../node_modules/@consta/src/icons/IconEyeClose/IconEyeClose_size_m.tsx", "../../node_modules/@consta/src/icons/IconEyeClose/IconEyeClose_size_s.tsx", "../../node_modules/@consta/src/icons/IconEyeClose/IconEyeClose_size_xs.tsx", "../../node_modules/@consta/src/icons/IconEyeClose/IconEyeClose.tsx", "../../node_modules/@consta/src/icons/IconSelectOpen/IconSelectOpen_size_m.tsx", "../../node_modules/@consta/src/icons/IconSelectOpen/IconSelectOpen_size_s.tsx", "../../node_modules/@consta/src/icons/IconSelectOpen/IconSelectOpen_size_xs.tsx", "../../node_modules/@consta/src/icons/IconSelectOpen/IconSelectOpen.tsx", "../../node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js", "../../node_modules/use-latest/dist/use-latest.esm.js", "../../node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js", "../../node_modules/use-composed-ref/dist/use-composed-ref.esm.js", "../../node_modules/@consta/src/components/TextField/helpers.ts", "../../node_modules/@consta/src/components/TextField/types.ts", "../../node_modules/@consta/src/components/Slider/useSliderStationing.ts", "../../node_modules/@consta/src/components/Slider/useSlider/useSlider.ts", "../../node_modules/@consta/src/components/Slider/useSlider/helper.ts", "../../node_modules/@consta/src/components/Slider/SliderLine/SliderLine.tsx", "../../node_modules/@consta/src/components/Slider/SliderPoint/SliderPoint.tsx", "../../node_modules/@consta/src/components/Tooltip/Tooltip.tsx", "../../node_modules/@consta/src/mixs/MixPopoverArrow/MixPopoverArrow.tsx"],
  "sourcesContent": ["import './Slider.css';\n\nimport { IconPropSize } from '@consta/icons/Icon';\nimport React, { forwardRef, useRef, useState } from 'react';\n\nimport { usePropsHandler } from '##/components/EventInterceptor/usePropsHandler';\nimport { FieldCaption } from '##/components/FieldCaption';\nimport { FieldLabel } from '##/components/FieldLabel';\nimport { useFlag } from '##/hooks/useFlag';\nimport { useForkRef } from '##/hooks/useForkRef';\nimport { useSortSteps } from '##/hooks/useSortSteps';\nimport { cn } from '##/utils/bem';\n\nimport {\n  defaultPropSize,\n  defaultTooltipFormatter,\n  getIcon,\n  getMaxForStartField,\n  getMinForEndField,\n  getOnChandgeForInput,\n  getValidStep,\n  getValueForInput,\n  isRangeParams,\n  PropSize,\n  SliderComponent,\n  SliderProps,\n} from './helper';\nimport { SliderInput } from './SliderInput/SliderInput';\nimport { SliderLine } from './SliderLine/SliderLine';\nimport { SliderPoint } from './SliderPoint/SliderPoint';\nimport { ActiveButton } from './useSlider/helper';\nimport { useSlider } from './useSlider/useSlider';\nimport { useSliderStationing } from './useSliderStationing';\n\nconst cnSlider = cn('Slider');\n\nconst sizeMap: Record<PropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 's',\n  m: 'm',\n  l: 'm',\n};\n\nexport const COMPONENT_NAME = 'Slider' as const;\n\nconst SliderRender = <RANGE extends boolean = false>(\n  props: SliderProps<RANGE>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    onAfterChange,\n    value,\n    step: stepProp,\n    disabled = false,\n    size = defaultPropSize,\n    view = 'default',\n    leftSide,\n    rightSide,\n    withTooltip,\n    range = false,\n    label,\n    labelIcon,\n    status,\n    caption,\n    tooltipFormatter = defaultTooltipFormatter,\n    className,\n    style,\n    ...otherProps\n  } = usePropsHandler(COMPONENT_NAME, props, sliderRef);\n\n  const [focusIndex, setFocusIndex] = useState<number | undefined>();\n  const [isHovered, { on, off }] = useFlag(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const leftButtonRef = useRef<HTMLButtonElement>(null);\n  const rightButtonRef = useRef<HTMLButtonElement>(null);\n  const sortedSteps = useSortSteps({\n    step: getValidStep(min, max, stepProp),\n    min,\n    max,\n  });\n  const step = stepProp ? sortedSteps : Math.abs((max - min) / 100);\n  const IconRight = getIcon(rightSide);\n  const IconLeft = getIcon(leftSide);\n  const iconSize = sizeMap[size];\n\n  const {\n    onKeyPress,\n    onFocus,\n    handlePress,\n    onSliderClick,\n    popoverPosition,\n    activeButton,\n    currentValue,\n  } = useSlider({\n    disabled,\n    range,\n    value,\n    min,\n    max,\n    step,\n    onChange,\n    onAfterChange,\n    sliderRef,\n    containerRef,\n    buttonRefs: [leftButtonRef, rightButtonRef],\n  });\n\n  const { lineSizes, buttonPositions } = useSliderStationing(\n    currentValue.length === 1 ? currentValue[0] : currentValue,\n    min,\n    max,\n    view,\n    range,\n    step,\n    [leftButtonRef, rightButtonRef],\n    sliderRef,\n  );\n\n  const containerProps = {\n    role: 'button',\n    tabIndex: 0,\n    className: cnSlider('Control'),\n    ref: sliderRef,\n    onClick: onSliderClick,\n  };\n\n  const changeHovered = (status: boolean) => {\n    if (status) on();\n    else off();\n  };\n\n  return (\n    <div\n      ref={useForkRef([ref, containerRef])}\n      className={cnSlider({ size }, [className])}\n      style={style}\n      {...otherProps}\n    >\n      {label && (\n        <FieldLabel icon={labelIcon} className={cnSlider('Label')} size={size}>\n          {label}\n        </FieldLabel>\n      )}\n      <div className={cnSlider('Container')}>\n        {(leftSide === 'input' || IconLeft) && (\n          <div className={cnSlider('Side', { position: 'left' })}>\n            {leftSide === 'input' && (\n              <SliderInput\n                value={getValueForInput(props, 0)}\n                onFocus={() => setFocusIndex(0)}\n                onBlur={() => setFocusIndex(undefined)}\n                onChange={getOnChandgeForInput(props, 0)}\n                size={size}\n                min={min}\n                inputMode=\"numeric\"\n                max={getMaxForStartField(props)}\n                status={status}\n                step={step}\n                disabled={disabled}\n              />\n            )}\n            {IconLeft && (\n              <IconLeft size={iconSize ?? undefined} view=\"secondary\" />\n            )}\n          </div>\n        )}\n        <div {...containerProps}>\n          <SliderLine\n            hovered={isHovered || typeof activeButton === 'number'}\n            onHover={changeHovered}\n            lines={lineSizes}\n            disabled={disabled}\n            view={view}\n          />\n          {currentValue.map((val, index) => {\n            // let isActive = true;\n            // if (\n            //   currentValue.length > 1 &&\n            //   currentValue[0] === currentValue[1]\n            // ) {\n            //   if (index === 0 && val === min) {\n            //     isActive = false;\n            //   }\n            //   if (index === 1 && val === max) {\n            //     isActive = false;\n            //   }\n            // }\n            const topLayer =\n              currentValue.length > 1 &&\n              currentValue[0] === currentValue[1] &&\n              val === max &&\n              index === 0;\n            return (\n              <SliderPoint\n                hovered={isHovered || typeof activeButton === 'number'}\n                buttonRef={leftButtonRef}\n                popoverPosition={popoverPosition[index]}\n                onKeyPress={onKeyPress}\n                onFocus={onFocus}\n                handlePress={handlePress}\n                disabled={disabled}\n                active={topLayer}\n                position={buttonPositions[index]}\n                focused={activeButton === index || focusIndex === index}\n                buttonLabel={index as ActiveButton}\n                withTooltip={withTooltip}\n                onHover={changeHovered}\n                tooltipFormatter={tooltipFormatter}\n                value={val}\n                role=\"slider\"\n                aria-valuemin={min}\n                aria-valuemax={max}\n                aria-valuenow={val}\n                tooltipZIndex={\n                  typeof style?.zIndex === 'number'\n                    ? style.zIndex + 1\n                    : undefined\n                }\n                key={cnSlider('Point', { index })}\n              />\n            );\n          })}\n        </div>\n        {(rightSide === 'input' || IconRight) && (\n          <div className={cnSlider('Side', { position: 'right' })}>\n            {rightSide === 'input' && (\n              <SliderInput\n                value={getValueForInput(props, 1)}\n                onChange={getOnChandgeForInput(props, 1)}\n                onBlur={() => setFocusIndex(undefined)}\n                size={size}\n                min={getMinForEndField(props)}\n                max={max}\n                onFocus={() => setFocusIndex(isRangeParams(props) ? 1 : 0)}\n                inputMode=\"numeric\"\n                status={status}\n                step={step}\n                disabled={disabled}\n              />\n            )}\n            {IconRight && <IconRight size={iconSize} view=\"secondary\" />}\n          </div>\n        )}\n      </div>\n      {caption && (\n        <FieldCaption className={cnSlider('Caption')} status={status}>\n          {caption}\n        </FieldCaption>\n      )}\n    </div>\n  );\n};\n\nexport const Slider = forwardRef(SliderRender) as SliderComponent;\n", "import { useMemo } from 'react';\n\ntype Props = {\n  step?: string | number | number[];\n  min?: number;\n  max?: number;\n};\n\nconst getIsValidValue = (value: number, min?: number, max?: number) => {\n  return !(\n    (typeof min === 'number' && value < min) ||\n    (typeof max === 'number' && value > max)\n  );\n};\n\nexport const useSortSteps = (props: Props): number | number[] => {\n  const { step, min, max } = props;\n\n  const sortedSteps = useMemo(() => {\n    if (Array.isArray(step)) {\n      const stepsArr = [...step];\n      if (typeof min === 'number') {\n        stepsArr.push(min);\n      }\n      if (typeof max === 'number') {\n        stepsArr.push(max);\n      }\n      const sortedArray = stepsArr\n        .sort((a, b) => a - b)\n        .filter((val) => getIsValidValue(val, min, max));\n      return Array.from(new Set(sortedArray));\n    }\n    return Number(step);\n  }, [step, min, max]);\n\n  return sortedSteps;\n};\n", "import { IconComponent } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\nimport { ActiveButton } from './useSlider/helper';\n\nexport const propStatus = ['alert', 'warning', 'success'] as const;\nexport type PropStatus = typeof propStatus[number];\nexport const defaultPropStatus = propStatus[0];\n\nexport type PropView = 'default' | 'division';\n\nexport const propSize = ['s', 'xs', 'm', 'l'] as const;\nexport type PropSize = typeof propSize[number];\nexport const defaultPropSize: PropSize = propSize[0];\n\nexport type SliderValue<RANGE> = RANGE extends true ? [number, number] : number;\n\nexport type PropOnChange<RANGE> = (prop: {\n  e?:\n    | Event\n    | React.TouchEvent\n    | React.MouseEvent\n    | React.KeyboardEvent\n    | React.ChangeEvent;\n  value: SliderValue<RANGE>;\n}) => void;\n\ntype PropToolipFormatter = (value: number | undefined) => string;\n\ntype Side = IconComponent | 'input';\n\ntype Props<RANGE extends boolean = false> = {\n  className?: string;\n  step?: number | number[];\n  view?: PropView;\n  disabled?: boolean;\n  range?: RANGE;\n  withTooltip?: boolean;\n  value: SliderValue<RANGE>;\n  label?: string;\n  labelIcon?: IconComponent;\n  caption?: string;\n  status?: PropStatus;\n  min?: number;\n  size?: PropSize;\n  max?: number;\n  onChange?: PropOnChange<RANGE>;\n  onAfterChange?: PropOnChange<RANGE>;\n  leftSide?: Side;\n  tooltipFormatter?: PropToolipFormatter;\n  rightSide?: Side;\n};\n\nexport type Line = {\n  width: number;\n  active: boolean;\n  size?: number[];\n};\n\nexport type SliderLineProps = {\n  view?: PropView;\n  lines: Line[];\n  disabled?: boolean;\n  hovered?: boolean;\n  onHover?: (hovered: boolean) => void;\n};\n\nexport type SliderPointProps = PropsWithHTMLAttributes<\n  {\n    value?: number;\n    disabled?: boolean;\n    focused?: boolean;\n    hovered?: boolean;\n    withTooltip?: boolean;\n    handlePress?: (typeButton: ActiveButton) => void;\n    buttonLabel?: ActiveButton;\n    buttonRef?: React.RefObject<HTMLButtonElement>;\n    popoverPosition?: TrackPosition;\n    tooltipFormatter?: PropToolipFormatter;\n    onFocus?: (\n      e: React.FocusEvent<HTMLButtonElement> | React.MouseEvent,\n      button: ActiveButton,\n    ) => void;\n    onKeyPress?: (e: React.KeyboardEvent, typeButton?: ActiveButton) => void;\n    onHover?: (hovered: boolean) => void;\n    position: number;\n    active?: boolean;\n    tooltipZIndex?: number;\n  },\n  HTMLButtonElement\n>;\n\nexport type SliderProps<RANGE extends boolean> = PropsWithHTMLAttributes<\n  Props<RANGE>,\n  HTMLDivElement\n>;\n\nexport type SliderComponent = <RANGE extends boolean = false>(\n  props: SliderProps<RANGE>,\n) => React.ReactElement | null;\n\nexport const isRangeParams = (\n  params: Props<boolean>,\n): params is Props<true> => {\n  return !!params.range;\n};\n\nexport const isNotRangeParams = (\n  params: Props<boolean>,\n): params is Props<false> => {\n  return !params.range;\n};\n\nexport const defaultTooltipFormatter: PropToolipFormatter = (value) =>\n  value?.toString() || '';\n\nexport type TrackPosition = {\n  x: number;\n  y: number;\n} | null;\n\nexport const getValueForInput = (\n  props: SliderProps<boolean>,\n  field: 0 | 1,\n): number => {\n  if (isRangeParams(props)) {\n    return props.value[field];\n  }\n  return props.value as number;\n};\n\ntype GetOnChandgeForInputReturned = (props: {\n  e?: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n  value: number;\n}) => void;\n\nexport const getOnChandgeForInput =\n  (props: SliderProps<boolean>, field: 0 | 1): GetOnChandgeForInputReturned =>\n  ({ e, value }) => {\n    if (!props.onChange) {\n      return;\n    }\n    if (isNotRangeParams(props)) {\n      props.onChange({ e, value });\n    }\n    if (isRangeParams(props)) {\n      props.onChange({\n        e,\n        value: field ? [props.value[0], value] : [value, props.value[1]],\n      });\n    }\n  };\n\nexport const getIcon = (side?: Side) => {\n  if (side !== 'input') {\n    return side;\n  }\n};\n\nexport const getMaxForStartField = (props: SliderProps<boolean>) => {\n  if (isNotRangeParams(props)) {\n    return props.max;\n  }\n  if (isRangeParams(props)) {\n    return props.value[1];\n  }\n};\n\nexport const getMinForEndField = (props: SliderProps<boolean>) => {\n  if (isNotRangeParams(props)) {\n    return props.min;\n  }\n  if (isRangeParams(props)) {\n    return props.value[0];\n  }\n};\n\nexport const getValidStep = (\n  min: number,\n  max: number,\n  step?: number | number[],\n) => {\n  if (step) {\n    if (Array.isArray(step)) {\n      return step;\n    }\n    if (step <= 0) {\n      return 1;\n    }\n    return step;\n  }\n  return Math.abs((max - min) / 100);\n};\n", "import './SliderInput.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport { cn } from '##/utils/bem';\n\nimport {\n  TextField,\n  TextFieldOnChangeArguments,\n  TextFieldProps,\n} from '../../TextField/TextField';\nimport { getValidValue, isValidValue } from '../useSlider/helper';\n\ntype Props = Omit<\n  TextFieldProps<'number'>,\n  'value' | 'onChange' | 'min' | 'max' | 'step'\n> & {\n  value?: number;\n  step?: number | number[];\n  min?: number;\n  max?: number;\n  onChange?: (props: {\n    e?: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n    value: number;\n  }) => void;\n};\n\nconst cnSliderInput = cn('SliderInput');\n\nexport const SliderInput = (props: Props) => {\n  const {\n    value,\n    onChange,\n    min = 0,\n    max = 100,\n    step = 1,\n    size = 'm',\n    className,\n    ...otherProps\n  } = props;\n\n  const [currentValue, setCurrentValue] = useState<string | null>(\n    value?.toString() || null,\n  );\n\n  const handleChange = ({ e, value }: TextFieldOnChangeArguments) => {\n    setCurrentValue(value);\n    if (isValidValue(Number(value), min, max, step)) {\n      onChange?.({ value: Number(value), e });\n    }\n  };\n\n  const commitChange = () => {\n    const validatedValue = getValidValue(Number(currentValue), min, max, step);\n    onChange?.({ value: validatedValue });\n    setCurrentValue(validatedValue.toString());\n  };\n\n  useEffect(() => setCurrentValue(value?.toString() || null), [value]);\n\n  return (\n    <TextField\n      onBlur={commitChange}\n      type=\"number\"\n      min={min}\n      max={max}\n      step={step}\n      size={size}\n      className={cnSliderInput({ size }, [className])}\n      onChange={handleChange}\n      value={currentValue}\n      {...otherProps}\n    />\n  );\n};\n", "import './TextField.css';\n\nimport { IconClose } from '@consta/icons/IconClose';\nimport { IconEye } from '@consta/icons/IconEye';\nimport { IconEyeClose } from '@consta/icons/IconEyeClose';\nimport { IconSelect } from '@consta/icons/IconSelect';\nimport { IconSelectOpen } from '@consta/icons/IconSelectOpen';\nimport React, { forwardRef, useCallback, useEffect } from 'react';\nimport TextAreaAutoSize from 'react-textarea-autosize';\n\nimport { useFlag } from '../../hooks/useFlag/useFlag';\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { useMutableRef } from '../../hooks/useMutableRef/useMutableRef';\nimport { useSortSteps } from '../../hooks/useSortSteps/useSortSteps';\nimport { cn } from '../../utils/bem';\nimport { getByMap } from '../../utils/getByMap';\nimport { isString } from '../../utils/type-guards';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\nimport { FieldCaption } from '../FieldCaption/FieldCaption';\nimport { FieldLabel } from '../FieldLabel/FieldLabel';\nimport {\n  getIncrementFlag,\n  getTypeForRender,\n  getValueByStep,\n  sizeMap,\n} from './helpers';\nimport {\n  TextFieldComponent,\n  textFieldPropFormDefault,\n  TextFieldProps,\n  textFieldPropSizeDefault,\n  textFieldPropViewDefault,\n  textFieldPropWidthDefault,\n} from './types';\n\nexport const COMPONENT_NAME = 'TextField' as const;\nexport const cnTextField = cn(COMPONENT_NAME);\n\nexport const TextFieldRender = <TYPE extends string>(\n  props: TextFieldProps<TYPE>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const textFieldRef = React.useRef<HTMLDivElement>(null);\n  const inputRef = React.useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n\n  const {\n    className,\n    type = 'text',\n    value,\n    onChange,\n    id,\n    name,\n    rows,\n    cols,\n    minRows,\n    maxRows,\n    inputRef: inputRefProp,\n    maxLength,\n    disabled,\n    size = textFieldPropSizeDefault,\n    view = textFieldPropViewDefault,\n    form = textFieldPropFormDefault,\n    state,\n    status,\n    width = textFieldPropWidthDefault,\n    onBlur,\n    onFocus,\n    autoFocus = false,\n    placeholder,\n    leftSide,\n    rightSide,\n    autoComplete,\n    withClearButton,\n    incrementButtons = true,\n    max,\n    min,\n    readOnly,\n    required,\n    step = 1,\n    tabIndex,\n    ariaLabel,\n    label,\n    labelIcon,\n    inputContainerRef,\n    labelPosition = 'top',\n    caption,\n    iconSize: iconSizeProp,\n    focused,\n    onClick,\n    // onkey props\n    onKeyDown: onKeyDownProp,\n    onKeyDownCapture,\n    onKeyPress,\n    onKeyPressCapture,\n    onKeyUp,\n    onKeyUpCapture,\n    ...otherProps\n  } = usePropsHandler(COMPONENT_NAME, props, textFieldRef);\n  const [focus, setFocus] = useFlag(autoFocus);\n  const [passwordVisible, setPasswordVisuble] = useFlag(false);\n\n  const valueRef = useMutableRef(value);\n  const onClickRef = useMutableRef(onClick);\n  const onChangeRef = useMutableRef(onChange);\n\n  const handleEyeClick = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      e.stopPropagation();\n      setPasswordVisuble.toggle();\n      inputRef.current?.focus();\n    },\n    [],\n  );\n\n  const textarea = type === 'textarea';\n  const LeftIcon = leftSide;\n  const RightIcon = rightSide;\n  const leftSideIsString = isString(leftSide);\n  const rightSideIsString = isString(rightSide);\n  const iconSize = getByMap(sizeMap, size, iconSizeProp);\n\n  const sortedSteps = useSortSteps({\n    step,\n    min: Number(min),\n    max: Number(max),\n  });\n\n  const handleChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = useCallback(\n    (e) => {\n      !disabled &&\n        onChangeRef.current?.({ e, id, name, value: e.target.value || null });\n    },\n    [id, name, disabled],\n  );\n\n  const handleBlur: React.FocusEventHandler<HTMLElement> = (e) => {\n    setFocus.off();\n    onBlur?.(e);\n  };\n\n  const handleFocus: React.FocusEventHandler<HTMLElement> = (e) => {\n    setFocus.on();\n    onFocus?.(e);\n  };\n\n  const commonProps = {\n    'className': cnTextField('Input'),\n    'value': value || '',\n    'onChange': handleChange,\n    maxLength,\n    disabled,\n    'onBlur': handleBlur,\n    'onFocus': handleFocus,\n    autoFocus,\n    placeholder,\n    autoComplete,\n    readOnly,\n    tabIndex,\n    name,\n    onKeyDownCapture,\n    onKeyPress,\n    onKeyPressCapture,\n    onKeyUp,\n    onKeyUpCapture,\n    'id': id ? id.toString() : '',\n    'aria-label': ariaLabel,\n  };\n\n  const Eye = passwordVisible ? IconEyeClose : IconEye;\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    const flag = getIncrementFlag(e);\n    onKeyDownProp?.(e);\n    if (type === 'number' && typeof flag === 'boolean' && !disabled) {\n      e.preventDefault();\n      onChangeRef.current?.({\n        e,\n        id,\n        name,\n        value: getValueByStep(sortedSteps, value, flag, min, max),\n      });\n    }\n  };\n\n  const textareaProps = {\n    rows,\n    cols,\n    minRows: minRows || rows,\n    maxRows: maxRows || rows,\n    ref: useForkRef([inputRef, inputRefProp]) as (\n      node: HTMLTextAreaElement,\n    ) => void,\n  };\n\n  const inputProps = {\n    type: getTypeForRender(type, passwordVisible),\n    max,\n    min,\n    step: !Array.isArray(sortedSteps) ? sortedSteps : 0,\n    onKeyDown,\n    ref: useForkRef([\n      inputRef,\n      inputRefProp,\n    ]) as React.RefCallback<HTMLInputElement>,\n  };\n\n  const handleClear = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n    onChangeRef.current?.({\n      e,\n      id,\n      name,\n      value: null,\n    });\n  }, []);\n\n  const changeNumberValue = (\n    e: React.MouseEvent<HTMLButtonElement>,\n    isIncrement = true,\n  ) => {\n    onChangeRef.current?.({\n      e,\n      id,\n      name,\n      value: getValueByStep(sortedSteps, value, isIncrement, min, max),\n    });\n  };\n\n  const rootProps = {\n    onClick: useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      inputRef.current?.focus();\n      onClickRef.current?.(e);\n    }, []),\n  };\n\n  // при смене passwordVible, перемещаем курсор в конец строки\n  useEffect(() => {\n    if (type === 'password' && inputRef.current) {\n      inputRef.current.selectionStart = valueRef.current?.length || 0;\n    }\n  }, [passwordVisible]);\n\n  return (\n    <div\n      className={cnTextField({ labelPosition, size, view, width }, [className])}\n      ref={useForkRef([ref, textFieldRef])}\n      {...rootProps}\n      {...otherProps}\n    >\n      {label && (\n        <FieldLabel\n          as=\"label\"\n          htmlFor={id?.toString()}\n          icon={labelIcon}\n          required={required}\n          className={cnTextField('Label', { labelPosition })}\n          size={size}\n        >\n          {label}\n        </FieldLabel>\n      )}\n      <div className={cnTextField('Body')}>\n        <div\n          ref={inputContainerRef}\n          className={cnTextField('InputContainer', {\n            view,\n            form,\n            status: status || state,\n            disabled,\n            type,\n            focus: focus || focused,\n            withValue: !!value,\n          })}\n        >\n          {LeftIcon && (\n            <div\n              className={cnTextField('Side', {\n                position: 'left',\n                type: leftSideIsString ? 'string' : 'icon',\n              })}\n              title={typeof leftSide === 'string' ? leftSide : undefined}\n            >\n              {leftSideIsString ? (\n                leftSide\n              ) : (\n                <LeftIcon className={cnTextField('Icon')} size={iconSize} />\n              )}\n            </div>\n          )}\n          {textarea ? (\n            <TextAreaAutoSize {...commonProps} {...textareaProps} />\n          ) : (\n            <input {...commonProps} {...inputProps} />\n          )}\n\n          {type === 'number' && incrementButtons && (\n            <div className={cnTextField('Counter')}>\n              <button\n                onFocus={handleFocus}\n                onClick={(e) => changeNumberValue(e, true)}\n                type=\"button\"\n                className={cnTextField('CounterButton')}\n              >\n                <IconSelectOpen size=\"xs\" />\n              </button>\n              <button\n                onFocus={handleFocus}\n                onClick={(e) => changeNumberValue(e, false)}\n                type=\"button\"\n                className={cnTextField('CounterButton')}\n              >\n                <IconSelect size=\"xs\" />\n              </button>\n            </div>\n          )}\n\n          {value && withClearButton && type !== 'number' && (\n            <button\n              type=\"button\"\n              disabled={disabled}\n              onClick={handleClear}\n              className={cnTextField('ClearButton')}\n            >\n              <IconClose size=\"xs\" className={cnTextField('ClearButtonIcon')} />\n            </button>\n          )}\n\n          {type === 'password' && value && (\n            <button\n              className={cnTextField('ClearButton')}\n              type=\"button\"\n              onClick={handleEyeClick}\n            >\n              <Eye className={cnTextField('Icon')} size={iconSize} />\n            </button>\n          )}\n\n          {RightIcon && type !== 'number' && type !== 'password' && (\n            <div\n              className={cnTextField('Side', {\n                position: 'right',\n                type: rightSideIsString ? 'string' : 'icon',\n              })}\n              title={typeof rightSide === 'string' ? rightSide : undefined}\n            >\n              {rightSideIsString ? (\n                rightSide\n              ) : (\n                <RightIcon className={cnTextField('Icon')} size={iconSize} />\n              )}\n            </div>\n          )}\n        </div>\n        {caption && (\n          <FieldCaption\n            className={cnTextField('Caption')}\n            status={status || state}\n          >\n            {caption}\n          </FieldCaption>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const TextField = forwardRef(TextFieldRender) as TextFieldComponent;\nexport * from './types';\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconEyeSizeM = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\" />\n  </svg>\n);\nexport default IconEyeSizeM;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconEyeSizeS = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M8 3C4.364 3 1.258 5.28 0 8.5 1.258 11.72 4.364 14 8 14s6.742-2.28 8-5.5C14.742 5.28 11.636 3 8 3zm0 9.167c-2.007 0-3.636-1.643-3.636-3.667S5.993 4.833 8 4.833s3.636 1.643 3.636 3.667S10.007 12.167 8 12.167zM8 6.3a2.188 2.188 0 0 0-2.182 2.2c0 1.217.975 2.2 2.182 2.2a2.188 2.188 0 0 0 2.182-2.2c0-1.217-.975-2.2-2.182-2.2z\" />\n  </svg>\n);\nexport default IconEyeSizeS;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconEyeSizeXs = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M6 2C3.273 2 .944 3.659 0 6c.944 2.341 3.273 4 6 4s5.056-1.659 6-4c-.944-2.341-3.273-4-6-4zm0 6.667C4.495 8.667 3.273 7.472 3.273 6c0-1.472 1.222-2.667 2.727-2.667S8.727 4.528 8.727 6c0 1.472-1.222 2.667-2.727 2.667zM6 4.4c-.905 0-1.636.715-1.636 1.6 0 .885.73 1.6 1.636 1.6.905 0 1.636-.715 1.636-1.6 0-.885-.73-1.6-1.636-1.6z\" />\n  </svg>\n);\nexport default IconEyeSizeXs;\n", "import { createIcon } from '../Icon';\nimport IconEyeSizeM from './IconEye_size_m';\nimport IconEyeSizeS from './IconEye_size_s';\nimport IconEyeSizeXs from './IconEye_size_xs';\n\nexport const IconEye = createIcon({\n  l: IconEyeSizeM,\n  m: IconEyeSizeM,\n  s: IconEyeSizeS,\n  xs: IconEyeSizeXs,\n  name: 'IconEye',\n  renderType: { l: 'use', m: 'use', s: 'use', xs: 'use' },\n  color: 'mono',\n});\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconEyeCloseSizeM = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      clipRule=\"evenodd\"\n      d=\"M1 12c1.73-4.39 6-7.5 11-7.5 2.389 0 4.611.71 6.47 1.93l-2.514 2.513A4.993 4.993 0 0 0 12 7c-2.76 0-5 2.24-5 5a4.99 4.99 0 0 0 1.943 3.956L6.67 18.23A11.886 11.886 0 0 1 1 12zm7.697 7.031c1.048.305 2.156.469 3.303.469 5 0 9.27-3.11 11-7.5a11.877 11.877 0 0 0-2.947-4.325l-3.184 3.184a5.002 5.002 0 0 1-6.01 6.01l-2.162 2.162zM9 12c0-1.66 1.34-3 3-3 .716 0 1.373.25 1.888.666l-4.214 4.232A2.99 2.99 0 0 1 9 12z\"\n    />\n    <path d=\"m4.901 19.998-1.414-1.414L19.043 3.028l1.414 1.414z\" />\n  </svg>\n);\nexport default IconEyeCloseSizeM;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconEyeCloseSizeS = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      clipRule=\"evenodd\"\n      d=\"M1.086 13.196 2.5 14.61l1.57-1.57.002.002 1.67-1.669-.003-.002 5.127-5.127.002.002L12.7 4.413V4.41l1.82-1.82-1.414-1.415-2.299 2.299A8.503 8.503 0 0 0 8 3C4.364 3 1.258 5.28 0 8.5a8.712 8.712 0 0 0 2.388 3.394l-1.302 1.302zm3.482-3.482 4.664-4.665A3.6 3.6 0 0 0 8 4.833c-2.007 0-3.636 1.643-3.636 3.667 0 .425.072.834.204 1.214zM8 14a8.5 8.5 0 0 1-2.948-.524l1.579-1.579c.423.174.885.27 1.369.27 2.007 0 3.636-1.643 3.636-3.667 0-.478-.09-.934-.255-1.352l2.129-2.13A8.712 8.712 0 0 1 16 8.5c-1.258 3.22-4.364 5.5-8 5.5z\"\n    />\n  </svg>\n);\nexport default IconEyeCloseSizeS;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconEyeCloseSizeXs = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      clipRule=\"evenodd\"\n      d=\"m1 9.485.707.707 8.485-8.485L9.485 1 8.132 2.353A6.557 6.557 0 0 0 6 2C3.273 2 .944 3.659 0 6a6.348 6.348 0 0 0 1.915 2.57L1 9.485zM3.475 7.01l3.5-3.5A2.773 2.773 0 0 0 6 3.332C4.495 3.333 3.273 4.528 3.273 6c0 .357.072.698.202 1.01zm4.987-2.158 1.51-1.51A6.353 6.353 0 0 1 12 6c-.944 2.341-3.273 4-6 4a6.55 6.55 0 0 1-2.28-.406l1.161-1.162c.342.15.72.235 1.119.235 1.505 0 2.727-1.195 2.727-2.667 0-.411-.095-.8-.265-1.148z\"\n    />\n  </svg>\n);\nexport default IconEyeCloseSizeXs;\n", "import { createIcon } from '../Icon';\nimport IconEyeCloseSizeM from './IconEyeClose_size_m';\nimport IconEyeCloseSizeS from './IconEyeClose_size_s';\nimport IconEyeCloseSizeXs from './IconEyeClose_size_xs';\n\nexport const IconEyeClose = createIcon({\n  l: IconEyeCloseSizeM,\n  m: IconEyeCloseSizeM,\n  s: IconEyeCloseSizeS,\n  xs: IconEyeCloseSizeXs,\n  name: 'IconEyeClose',\n  renderType: { l: 'use', m: 'use', s: 'use', xs: 'use' },\n  color: 'mono',\n});\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconSelectOpenSizeM = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M6.5 15 12 9l5.5 6h-11z\" />\n  </svg>\n);\nexport default IconSelectOpenSizeM;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconSelectOpenSizeS = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"m8 5-4.5 5h9L8 5z\" />\n  </svg>\n);\nexport default IconSelectOpenSizeS;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconSelectOpenSizeXs = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M6 3.5 10 8H2l4-4.5z\" />\n  </svg>\n);\nexport default IconSelectOpenSizeXs;\n", "import { createIcon } from '../Icon';\nimport IconSelectOpenSizeM from './IconSelectOpen_size_m';\nimport IconSelectOpenSizeS from './IconSelectOpen_size_s';\nimport IconSelectOpenSizeXs from './IconSelectOpen_size_xs';\n\nexport const IconSelectOpen = createIcon({\n  l: IconSelectOpenSizeM,\n  m: IconSelectOpenSizeM,\n  s: IconSelectOpenSizeS,\n  xs: IconSelectOpenSizeXs,\n  name: 'IconSelectOpen',\n  renderType: { l: 'use', m: 'use', s: 'use', xs: 'use' },\n  color: 'mono',\n});\n", "import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport * as React from 'react';\nimport useLatest from 'use-latest';\nimport useComposedRef from 'use-composed-ref';\n\nvar HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\nvar forceHiddenStyles = function forceHiddenStyles(node) {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\nvar forceHiddenStyles$1 = forceHiddenStyles;\n\n// TODO: use labelled tuples once they are avaiable:\n//   export type CalculatedNodeHeights = [height: number, rowHeight: number];\n// https://github.com/microsoft/TypeScript/issues/28259\n\nvar hiddenTextarea = null;\nvar getHeight = function getHeight(node, sizingData) {\n  var height = node.scrollHeight;\n  if (sizingData.sizingStyle.boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    return height + sizingData.borderSize;\n  }\n\n  // remove padding, since height = content\n  return height - sizingData.paddingSize;\n};\nfunction calculateNodeHeight(sizingData, value, minRows, maxRows) {\n  if (minRows === void 0) {\n    minRows = 1;\n  }\n  if (maxRows === void 0) {\n    maxRows = Infinity;\n  }\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tabindex', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    forceHiddenStyles$1(hiddenTextarea);\n  }\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  }\n  var paddingSize = sizingData.paddingSize,\n    borderSize = sizingData.borderSize,\n    sizingStyle = sizingData.sizingStyle;\n  var boxSizing = sizingStyle.boxSizing;\n  Object.keys(sizingStyle).forEach(function (_key) {\n    var key = _key;\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles$1(hiddenTextarea);\n  hiddenTextarea.value = value;\n  var height = getHeight(hiddenTextarea, sizingData);\n  // Double set and calc due to Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1795904\n  hiddenTextarea.value = value;\n  height = getHeight(hiddenTextarea, sizingData);\n\n  // measure height of a textarea with a single row\n  hiddenTextarea.value = 'x';\n  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  var minHeight = rowHeight * minRows;\n  if (boxSizing === 'border-box') {\n    minHeight = minHeight + paddingSize + borderSize;\n  }\n  height = Math.max(minHeight, height);\n  var maxHeight = rowHeight * maxRows;\n  if (boxSizing === 'border-box') {\n    maxHeight = maxHeight + paddingSize + borderSize;\n  }\n  height = Math.min(maxHeight, height);\n  return [height, rowHeight];\n}\n\nvar noop = function noop() {};\nvar pick = function pick(props, obj) {\n  return props.reduce(function (acc, prop) {\n    acc[prop] = obj[prop];\n    return acc;\n  }, {});\n};\n\nvar SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop',\n// non-standard\n'tabSize', 'textIndent',\n// non-standard\n'textRendering', 'textTransform', 'width', 'wordBreak'];\nvar isIE = !!document.documentElement.currentStyle ;\nvar getSizingData = function getSizingData(node) {\n  var style = window.getComputedStyle(node);\n  if (style === null) {\n    return null;\n  }\n  var sizingStyle = pick(SIZING_STYLE, style);\n  var boxSizing = sizingStyle.boxSizing;\n\n  // probably node is detached from DOM, can't read computed dimensions\n  if (boxSizing === '') {\n    return null;\n  }\n\n  // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';\n  }\n  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);\n  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);\n  return {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize\n  };\n};\nvar getSizingData$1 = getSizingData;\n\nfunction useListener(target, type, listener) {\n  var latestListener = useLatest(listener);\n  React.useLayoutEffect(function () {\n    var handler = function handler(ev) {\n      return latestListener.current(ev);\n    };\n\n    // might happen if document.fonts is not defined, for instance\n    if (!target) {\n      return;\n    }\n    target.addEventListener(type, handler);\n    return function () {\n      return target.removeEventListener(type, handler);\n    };\n  }, []);\n}\nvar useWindowResizeListener = function useWindowResizeListener(listener) {\n  useListener(window, 'resize', listener);\n};\nvar useFontsLoadedListener = function useFontsLoadedListener(listener) {\n  useListener(document.fonts, 'loadingdone', listener);\n};\n\nvar _excluded = [\"cacheMeasurements\", \"maxRows\", \"minRows\", \"onChange\", \"onHeightChange\"];\nvar TextareaAutosize = function TextareaAutosize(_ref, userRef) {\n  var cacheMeasurements = _ref.cacheMeasurements,\n    maxRows = _ref.maxRows,\n    minRows = _ref.minRows,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? noop : _ref$onChange,\n    _ref$onHeightChange = _ref.onHeightChange,\n    onHeightChange = _ref$onHeightChange === void 0 ? noop : _ref$onHeightChange,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (props.style) {\n    if ('maxHeight' in props.style) {\n      throw new Error('Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.');\n    }\n    if ('minHeight' in props.style) {\n      throw new Error('Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.');\n    }\n  }\n  var isControlled = props.value !== undefined;\n  var libRef = React.useRef(null);\n  var ref = useComposedRef(libRef, userRef);\n  var heightRef = React.useRef(0);\n  var measurementsCacheRef = React.useRef();\n  var resizeTextarea = function resizeTextarea() {\n    var node = libRef.current;\n    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node);\n    if (!nodeSizingData) {\n      return;\n    }\n    measurementsCacheRef.current = nodeSizingData;\n    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),\n      height = _calculateNodeHeight[0],\n      rowHeight = _calculateNodeHeight[1];\n    if (heightRef.current !== height) {\n      heightRef.current = height;\n      node.style.setProperty('height', height + \"px\", 'important');\n      onHeightChange(height, {\n        rowHeight: rowHeight\n      });\n    }\n  };\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      resizeTextarea();\n    }\n    onChange(event);\n  };\n  {\n    React.useLayoutEffect(resizeTextarea);\n    useWindowResizeListener(resizeTextarea);\n    useFontsLoadedListener(resizeTextarea);\n    return /*#__PURE__*/React.createElement(\"textarea\", _extends({}, props, {\n      onChange: handleChange,\n      ref: ref\n    }));\n  }\n};\nvar index = /* #__PURE__ */React.forwardRef(TextareaAutosize);\n\nexport { index as default };\n", "import * as React from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\n\nvar useLatest = function useLatest(value) {\n  var ref = React.useRef(value);\n  useIsomorphicLayoutEffect(function () {\n    ref.current = value;\n  });\n  return ref;\n};\n\nexport { useLatest as default };\n", "import { useLayoutEffect } from 'react';\n\nvar index =  useLayoutEffect ;\n\nexport default index;\n", "import { useRef, useCallback } from 'react';\n\nvar updateRef = function updateRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n    return;\n  }\n  ref.current = value;\n};\n\nvar useComposedRef = function useComposedRef(libRef, userRef) {\n  var prevUserRef = useRef();\n  return useCallback(function (instance) {\n    libRef.current = instance;\n\n    if (prevUserRef.current) {\n      updateRef(prevUserRef.current, null);\n    }\n\n    prevUserRef.current = userRef;\n\n    if (!userRef) {\n      return;\n    }\n\n    updateRef(userRef, instance);\n  }, [userRef]);\n};\n\nexport default useComposedRef;\n", "import { IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { TextFieldPropSize } from './types';\n\nexport const sizeMap: Record<TextFieldPropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 's',\n  m: 's',\n  l: 'm',\n};\n\nexport const getValueByStepArray = (\n  steps: number[],\n  value: string | null | undefined,\n  min: number | string | undefined,\n  max: number | string | undefined,\n  isIncrement: boolean,\n): number => {\n  const currentValue = Number(value ?? min);\n  const minValue = Number(min);\n  if (typeof value !== 'string') {\n    return typeof min !== 'undefined' ? minValue : 0;\n  }\n  if (currentValue < steps[0]) {\n    return steps[0];\n  }\n  if (currentValue > steps[steps.length - 1]) {\n    return steps[steps.length - 1];\n  }\n  if (\n    (!isIncrement && currentValue === steps[0]) ||\n    (isIncrement && currentValue === steps[steps.length - 1])\n  ) {\n    return currentValue;\n  }\n  for (let i = 0; i < steps.length; i++) {\n    if (\n      currentValue === steps[i] ||\n      (steps[i] < currentValue && steps[i + 1] > currentValue)\n    ) {\n      return steps[i + (isIncrement ? 1 : -1)];\n    }\n  }\n  return 0;\n};\n\nexport const getValueByStepNumber = (\n  step: number | string,\n  value: string | null | undefined,\n  min: number | string | undefined,\n  max: number | string | undefined,\n  isIncrement: boolean,\n): number => {\n  const minValue = Number(min);\n  const maxValue = Number(max);\n  const currentValue: number =\n    (typeof value === 'string' ? Number(value) : 0) +\n    Number(step) * (isIncrement ? 1 : -1);\n  if (!Number.isNaN(minValue) && currentValue <= minValue) {\n    return minValue;\n  }\n  if (!Number.isNaN(maxValue) && currentValue >= maxValue) {\n    return maxValue;\n  }\n  return Number(\n    currentValue.toFixed(\n      Number(\n        /* Необходимо для того, чтобы избежать ситуации, когда по нажатию\nна кнопку прибавляется число с погрешностью.\nЗдесь мы берем разрядность дробной части шага и ограничиваем\nрезультирующее число этой разрядностью */\n        Number(step).toString().split('.')[1]?.length,\n      ) || 0,\n    ),\n  );\n};\n\nexport const getIncrementFlag = (\n  event: React.KeyboardEvent,\n): boolean | null => {\n  if (event?.key !== 'ArrowUp' && event?.key !== 'ArrowDown') {\n    return null;\n  }\n  return event?.key === 'ArrowUp';\n};\n\nexport const getTypeForRender = (type: string, passwordVible: boolean) => {\n  if (type !== 'password') {\n    return type;\n  }\n  if (passwordVible) {\n    return 'text';\n  }\n  return 'password';\n};\n\nexport const getValueByStep = (\n  steps: number | number[],\n  value: string | null | undefined,\n  isIncrement: boolean,\n  min?: number | string,\n  max?: number | string,\n) => {\n  return (\n    Array.isArray(steps)\n      ? getValueByStepArray(steps, value, min, max, isIncrement)\n      : getValueByStepNumber(steps, value, min, max, isIncrement)\n  ).toString();\n};\n", "import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { AutoCompete } from '../../utils/types/AutoComplete';\nimport { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\n\nexport type TextFieldPropValue = string | null;\nexport type TextFieldPropName = string;\nexport type TextFieldPropId = string | number;\n\nexport const textFieldPropSize = ['m', 'xs', 's', 'l'] as const;\nexport type TextFieldPropSize = typeof textFieldPropSize[number];\nexport const textFieldPropSizeDefault: TextFieldPropSize = textFieldPropSize[0];\n\nexport type TextFieldPropOnChange = (args: TextFieldOnChangeArguments) => void;\nexport type TextFieldOnChangeArguments = {\n  e: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n  id?: TextFieldPropId;\n  name?: TextFieldPropName;\n  value: TextFieldPropValue;\n};\n\nexport const textFieldPropView = ['default', 'clear'] as const;\nexport type TextFieldPropView = typeof textFieldPropView[number];\nexport const textFieldPropViewDefault: TextFieldPropView = textFieldPropView[0];\n\nexport const textFieldPropForm = [\n  'default',\n  'defaultClear',\n  'defaultBrick',\n  'brick',\n  'brickDefault',\n  'brickClear',\n  'brickRound',\n  'round',\n  'roundClear',\n  'roundBrick',\n  'clearRound',\n  'clearDefault',\n  'clearBrick',\n  'clearClear',\n] as const;\nexport type TextFieldPropForm = typeof textFieldPropForm[number];\nexport const textFieldPropFormDefault: TextFieldPropForm = textFieldPropForm[0];\n\nexport const textFieldPropStatus = ['alert', 'success', 'warning'] as const;\nexport type TextFieldPropStatus = typeof textFieldPropStatus[number];\n\nexport const textFieldPropWidth = ['default', 'full'] as const;\nexport type TextFieldPropWidth = typeof textFieldPropWidth[number];\nexport const textFieldPropWidthDefault: TextFieldPropWidth =\n  textFieldPropWidth[0];\n\nexport type TextFieldPropsTextareaType<TYPE> = TYPE extends 'textarea'\n  ?\n      | {\n          minRows?: never;\n          maxRows?: never;\n          rows?: number;\n        }\n      | {\n          rows?: never;\n          minRows?: number;\n          maxRows?: number;\n        }\n  : {\n      rows?: never;\n      minRows?: never;\n      maxRows?: never;\n    };\n\nexport type TextFieldPropRightSide<TYPE extends string> = TYPE extends\n  | 'number'\n  | 'password'\n  ? {\n      rightSide?: never;\n    }\n  : {\n      rightSide?: string | IconComponent;\n    };\n\nexport type TextFieldProps<TYPE extends string> = PropsWithHTMLAttributes<\n  {\n    className?: string;\n    value?: TextFieldPropValue;\n    cols?: number;\n    onChange?: TextFieldPropOnChange;\n    id?: TextFieldPropId;\n    name?: TextFieldPropName;\n    type?: TYPE;\n    disabled?: boolean;\n    maxLength?: number;\n    size?: TextFieldPropSize;\n    view?: TextFieldPropView;\n    form?: TextFieldPropForm;\n    state?: TextFieldPropStatus;\n    status?: TextFieldPropStatus;\n    width?: TextFieldPropWidth;\n    onFocus?: React.FocusEventHandler<HTMLElement>;\n    onBlur?: React.FocusEventHandler<HTMLElement>;\n    incrementButtons?: boolean;\n    autoFocus?: boolean;\n    placeholder?: string;\n    leftSide?: string | IconComponent;\n    rightSide?: string | IconComponent;\n    withClearButton?: boolean;\n    autoComplete?: AutoCompete;\n    max?: number | string;\n    min?: number | string;\n    readOnly?: boolean;\n    required?: boolean;\n    step?: number | string | number[];\n    tabIndex?: number;\n    inputContainerRef?: React.Ref<HTMLDivElement>;\n    inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;\n    ariaLabel?: string;\n    iconSize?: IconPropSize;\n    children?: never;\n    label?: string;\n    labelIcon?: IconComponent;\n    caption?: string;\n    labelPosition?: 'top' | 'left';\n    focused?: boolean;\n    onKeyDownCapture?: React.KeyboardEventHandler;\n    onKeyPress?: React.KeyboardEventHandler;\n    onKeyPressCapture?: React.KeyboardEventHandler;\n    onKeyUp?: React.KeyboardEventHandler;\n    onKeyUpCapture?: React.KeyboardEventHandler;\n    onKeyDown?: React.KeyboardEventHandler;\n  },\n  HTMLDivElement\n> &\n  TextFieldPropsTextareaType<TYPE> &\n  TextFieldPropRightSide<TYPE>;\n\nexport type TextFieldComponent = <TYPE extends string>(\n  props: TextFieldProps<TYPE> & React.RefAttributes<HTMLElement>,\n) => React.ReactElement | null;\n", "import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { useComponentSize } from '##/hooks/useComponentSize';\n\nimport { Line, PropView } from './helper';\nimport { COUNT_STEPS } from './useSlider/useSlider';\n\ntype UseSliderStationing = (\n  value: number | [number, number] | undefined,\n  min: number,\n  max: number,\n  view: PropView,\n  range: boolean | undefined,\n  step: number | number[] | undefined,\n  buttonRefs: [\n    React.RefObject<HTMLButtonElement>,\n    React.RefObject<HTMLButtonElement>,\n  ],\n  sliderLineRef: React.RefObject<HTMLButtonElement | HTMLDivElement>,\n) => {\n  lineSizes: Line[];\n  buttonPositions: number[];\n};\n\nexport const getSteps = (step: number | number[], min: number, max: number) => {\n  const stepsArray: { min: number; max: number }[] = [];\n  let size = min;\n  if (Array.isArray(step)) {\n    for (let i = 0; i < step.length - 1; i++) {\n      stepsArray.push({\n        min: step[i],\n        max: step[i + 1],\n      });\n    }\n  } else {\n    for (let i = min; i < max; i += step) {\n      stepsArray.push({\n        min: size,\n        max: size + (max - i < step ? max - i : step),\n      });\n      size += step;\n    }\n  }\n  return stepsArray;\n};\n\nexport const useSliderStationing: UseSliderStationing = (\n  value,\n  min,\n  max,\n  view,\n  range,\n  step = 1,\n  buttonRefs,\n  sliderLineRef,\n) => {\n  const [lineSizes, setLineSizes] = useState<Line[]>([]);\n  const [buttonPositions, setButtonPositions] = useState<number[]>([]);\n\n  const { width, height } = useComponentSize(sliderLineRef);\n\n  const calcualtedStep = useMemo(() => {\n    if (!Array.isArray(step)) {\n      const val = Math.abs((max - min) / COUNT_STEPS);\n      if (val > step) {\n        return val - (val % step);\n      }\n      return Math.max(val, step);\n    }\n    return step;\n  }, [max, min, step]);\n\n  const calculateLines = () => {\n    const sizesArray: Line[] = [];\n    const absoluteSize = Math.abs(max - min);\n    if (typeof value !== 'undefined') {\n      if (view === 'default') {\n        if (!Array.isArray(value) && typeof value === 'number') {\n          sizesArray.push({\n            width: (1 - (max - value) / absoluteSize) * 100,\n            active: true,\n          });\n          sizesArray.push({\n            width: ((max - value) / absoluteSize) * 100,\n            active: false,\n          });\n        } else if (Array.isArray(value) && value) {\n          const [minValue, maxValue] = [Math.min(...value), Math.max(...value)];\n          const endPointArray = [minValue, maxValue];\n          endPointArray.unshift(min);\n          endPointArray.push(max);\n          for (let i = 0; i < endPointArray.length - 1; i++) {\n            sizesArray.push({\n              width:\n                ((endPointArray[i + 1] - endPointArray[i]) / absoluteSize) *\n                100,\n              active:\n                endPointArray[i] >= minValue &&\n                endPointArray[i + 1] <= maxValue,\n            });\n          }\n        } else {\n          sizesArray.push({\n            width: 100,\n            active: false,\n          });\n        }\n      } else if (typeof calcualtedStep !== 'undefined') {\n        getSteps(calcualtedStep, min, max).forEach((stepSize) => {\n          sizesArray.push({\n            width: (Math.abs(stepSize.max - stepSize.min) * 100) / absoluteSize,\n            active:\n              (typeof value === 'number' || Array.isArray(value)) &&\n              (range && Array.isArray(value)\n                ? stepSize.max > Math.min(...value) &&\n                  stepSize.min < Math.max(...value)\n                : stepSize.max <= value),\n          });\n        });\n      }\n    } else {\n      sizesArray.push({\n        width: 100,\n        active: false,\n      });\n    }\n    return sizesArray;\n  };\n\n  const getValidValue = (value: number) => {\n    if (value < min) return min;\n    if (value > max) return max;\n    return value;\n  };\n\n  const calculateButtonPositions = useCallback(() => {\n    const absoluteSize = Math.abs(max - min);\n    let defaultPaddingValue = 0;\n    const positions: number[] = [];\n    buttonRefs.forEach((buttonRef, index) => {\n      if (\n        buttonRef.current &&\n        buttonRef.current.offsetWidth &&\n        sliderLineRef.current &&\n        sliderLineRef.current.offsetWidth\n      ) {\n        defaultPaddingValue =\n          (absoluteSize * buttonRef.current.offsetWidth) /\n            (2 * sliderLineRef.current.offsetWidth) || 0;\n      }\n      if (typeof value === 'number' || Array.isArray(value)) {\n        positions.push(\n          typeof value === 'number'\n            ? (1 -\n                (max - getValidValue(value) + defaultPaddingValue) /\n                  absoluteSize) *\n                100\n            : (1 -\n                (max - getValidValue(value[index]) + defaultPaddingValue) /\n                  absoluteSize) *\n                100,\n        );\n      }\n    });\n    return positions;\n  }, [buttonRefs, sliderLineRef]);\n\n  useEffect(() => {\n    setLineSizes(calculateLines());\n    setButtonPositions(calculateButtonPositions());\n  }, [value, min, max, range, calcualtedStep, view, width, height]);\n\n  return {\n    lineSizes,\n    buttonPositions,\n  };\n};\n", "import React, {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { useClickOutside } from '##/hooks/useClickOutside';\n\nimport { useComponentSize } from '../../../hooks/useComponentSize/useComponentSize';\nimport { useMutableRef } from '../../../hooks/useMutableRef/useMutableRef';\nimport { SliderValue, TrackPosition } from '../helper';\nimport {\n  ActiveButton,\n  getActiveValue,\n  getNewValue,\n  getValidValue,\n  getValueByPosition,\n  isNotRangeParams,\n  isRangeParams,\n  trackPosition,\n  UseSliderProps,\n  UseSliderValues,\n} from './helper';\n\nexport const COUNT_STEPS = 250;\n\nexport function useSlider<RANGE extends boolean>(\n  props: UseSliderProps<RANGE>,\n): UseSliderValues {\n  const {\n    disabled,\n    range,\n    value,\n    min,\n    max,\n    step = 1,\n    onChange,\n    onAfterChange,\n    sliderRef,\n    containerRef,\n    buttonRefs,\n  } = props;\n\n  const minValue = max > min ? min : 0;\n  const maxValue = max > min ? max : 100;\n\n  const dragStepValue = useMemo(() => {\n    if (!Array.isArray(step)) {\n      if (step >= 1) {\n        const val = Math.abs((maxValue - minValue) / COUNT_STEPS);\n        if (val > step) {\n          return val - (val % step);\n        }\n        return Math.max(val, step);\n      }\n    }\n    return step;\n  }, [max, min, step]);\n\n  const [currentValue, setCurrentValue] = useState<number | [number, number]>(\n    value,\n  );\n  const [leftPopover, setLeftPopover] = useState<TrackPosition>(null);\n  const [rightPopover, setRightPopover] = useState<TrackPosition>(null);\n  const [currentButton, setCurrentButton] = useState<ActiveButton | null>(null);\n\n  const activeButton: MutableRefObject<ActiveButton | null> = useRef(null);\n\n  const sizeSlider = useComponentSize(sliderRef);\n\n  const lastValue = useMutableRef(currentValue);\n\n  useClickOutside({\n    isActive: true,\n    ignoreClicksInsideRefs: [containerRef],\n    handler: () => {\n      setCurrentButton(null);\n      activeButton.current = null;\n    },\n  });\n\n  useEffect(() => {\n    if (disabled) {\n      controlListeners('remove');\n    }\n  }, [disabled]);\n\n  const controlListeners = (type: 'add' | 'remove') => {\n    const method = type === 'add' ? 'addEventListener' : 'removeEventListener';\n    document[method]('mouseup', handleRelease);\n    document[method]('touchend', handleRelease);\n    document[method]('mousemove', handleTouchMove);\n    document[method]('touchmove', handleTouchMove);\n  };\n\n  useEffect(() => {\n    if (Array.isArray(currentValue)) {\n      setTooltipPosition(currentValue[0], 0);\n      setTooltipPosition(currentValue[1], 1);\n    } else {\n      setTooltipPosition(currentValue, 0);\n    }\n  }, [currentValue]);\n\n  useEffect(() => {\n    if (JSON.stringify(value) !== JSON.stringify(currentValue)) {\n      if (Array.isArray(value) && Array.isArray(currentValue)) {\n        if (\n          !(\n            currentValue.indexOf(value[0]) !== -1 &&\n            currentValue.indexOf(value[1]) !== -1\n          )\n        ) {\n          setCurrentValue(value);\n          setTooltipPosition(getActiveValue(value, activeButton.current), 0);\n        }\n      } else {\n        setCurrentValue(value);\n        setTooltipPosition(getActiveValue(value, activeButton.current), 0);\n      }\n      setCurrentButton(null);\n      activeButton.current = null;\n    }\n  }, [value]);\n\n  useEffect(() => {\n    onChange?.({\n      value: Array.isArray(currentValue)\n        ? ([\n            getNewValue(currentValue[0], currentValue[0], step, min, max, 0),\n            getNewValue(currentValue[1], currentValue[1], step, min, max, 1),\n          ] as SliderValue<RANGE>)\n        : (getNewValue(\n            currentValue,\n            currentValue,\n            step,\n            min,\n            max,\n            0,\n          ) as SliderValue<RANGE>),\n    });\n  }, [step]);\n\n  useEffect(() => {\n    if (typeof value !== 'undefined') {\n      const targetValue = isRangeParams(props)\n        ? ([\n            getValidValue(props.value[0], min, max, step),\n            getValidValue(props.value[1], min, max, step),\n          ] as [number, number])\n        : getValidValue(props.value as number, min, max, step);\n      setCurrentValue(targetValue);\n    }\n  }, [range, typeof value]);\n\n  useEffect(() => {\n    if (isRangeParams(props)) {\n      if (props.value[0] > props.value[1]) {\n        const newValue: SliderValue<true> = [props.value[1], props.value[1]];\n        props.onChange?.({ value: newValue });\n      }\n    }\n  }, []);\n\n  const onSliderClick = (e: React.MouseEvent) => {\n    if (isNotRangeParams(props)) {\n      const positionValue = getValueByPosition(\n        { x: e.pageX, y: e.pageY },\n        sliderRef,\n        minValue,\n        maxValue,\n        step,\n      );\n      const newValue = getNewValue(\n        positionValue,\n        currentValue,\n        dragStepValue,\n        min,\n        max,\n        activeButton.current,\n      );\n      if (newValue !== value) {\n        setCurrentValue(newValue);\n        setTooltipPosition(getActiveValue(newValue, 0), 0);\n        onChange?.({\n          e,\n          value: newValue as SliderValue<RANGE>,\n        });\n      }\n    }\n  };\n\n  const onKeyPress = useCallback(\n    (event: React.KeyboardEvent, typeButton: ActiveButton) => {\n      if (\n        !disabled &&\n        typeof typeButton === 'number' &&\n        typeof currentValue !== 'undefined'\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        let stepIncrement = !Array.isArray(step) ? step || 1 : 1;\n        let validKeyCode = false;\n        const changedValue = getActiveValue(currentValue, typeButton);\n        switch (event.key) {\n          case 'ArrowUp':\n          case 'ArrowRight':\n          case '+':\n            validKeyCode = true;\n            break;\n          case 'ArrowLeft':\n          case 'ArrowDown':\n          case '-':\n            validKeyCode = true;\n            stepIncrement *= -1;\n            break;\n          default:\n            break;\n        }\n        if (validKeyCode) {\n          if (Array.isArray(step)) {\n            step.forEach((stepPoint, index) => {\n              if (\n                typeof typeButton === 'number' &&\n                changedValue === stepPoint\n              ) {\n                if (stepIncrement >= 0) {\n                  if (index === 0) {\n                    stepIncrement = step[1] - minValue;\n                  } else {\n                    stepIncrement =\n                      (typeof step[index + 1] !== 'undefined'\n                        ? step[index + 1]\n                        : maxValue) - stepPoint;\n                  }\n                } else if (index === 0) {\n                  stepIncrement = minValue - step[1];\n                } else {\n                  stepIncrement =\n                    (typeof step[index - 1] !== 'undefined'\n                      ? step[index - 1]\n                      : minValue) - stepPoint;\n                }\n              }\n            });\n          }\n          const newValue = getNewValue(\n            changedValue + stepIncrement,\n            currentValue,\n            step,\n            min,\n            max,\n            typeButton,\n          );\n          setCurrentValue(newValue);\n          setTooltipPosition(getActiveValue(newValue, typeButton), typeButton);\n          onChange?.({\n            e: event,\n            value: newValue as SliderValue<RANGE>,\n          });\n        }\n      }\n    },\n    [currentValue, step, min, max],\n  );\n\n  const setTooltipPosition = (value: number, position: ActiveButton) => {\n    if (sliderRef.current && typeof position === 'number') {\n      const button = buttonRefs[position].current || sliderRef.current;\n      const { x, width } = sliderRef.current.getBoundingClientRect();\n      const newPosition = {\n        y: button.offsetTop + button.offsetHeight + 50,\n        x: x + Math.abs((value - minValue) / (maxValue - minValue)) * width,\n      };\n      if (position === 0) {\n        setLeftPopover(newPosition);\n      } else {\n        setRightPopover(newPosition);\n      }\n    }\n  };\n\n  const changePosition = (event: Event) => {\n    const nativeEvent = event as MouseEvent | TouchEvent;\n    if (typeof activeButton.current !== 'number') {\n      return value;\n    }\n    const position = trackPosition(nativeEvent);\n    const positionValue = getValueByPosition(\n      position,\n      sliderRef,\n      minValue,\n      maxValue,\n      step,\n    );\n    return getNewValue(\n      positionValue,\n      currentValue,\n      dragStepValue,\n      min,\n      max,\n      activeButton.current,\n    );\n  };\n\n  const onFocus = (\n    e: React.FocusEvent | React.MouseEvent,\n    button: ActiveButton,\n  ) => {\n    setCurrentButton(button);\n    activeButton.current = button;\n  };\n\n  const handleTouchMove = (\n    event: MouseEvent | TouchEvent | Event,\n    typeButton?: ActiveButton,\n  ) => {\n    const button = typeButton || activeButton.current;\n    if (typeof button === 'number') {\n      const position = changePosition(event);\n      const oldValue: number = getActiveValue(currentValue, button);\n      const newValue: number = getActiveValue(position, button);\n      setCurrentValue(position);\n      if (oldValue !== newValue) {\n        onAfterChange?.({ e: event, value: position as SliderValue<RANGE> });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (isRangeParams(props)) {\n      props.value?.forEach((val, index) => {\n        setTooltipPosition(\n          getActiveValue(val, activeButton.current),\n          index === 0 ? 0 : 1,\n        );\n      });\n    }\n    if (isNotRangeParams(props)) {\n      setTooltipPosition(getActiveValue(value, activeButton.current), 0);\n    }\n    activeButton.current = null;\n  }, [sizeSlider, typeof value]);\n\n  const handleRelease = useCallback(\n    (e: MouseEvent | TouchEvent | Event) => {\n      controlListeners('remove');\n      if (isRangeParams(props) && Array.isArray(lastValue.current)) {\n        const copyValues = [...lastValue.current].sort(\n          (a, b) => Number(a) - Number(b),\n        ) as SliderValue<true>;\n        props.onChange?.({ e, value: copyValues });\n      }\n      if (isNotRangeParams(props) && typeof lastValue.current === 'number') {\n        props.onChange?.({ e, value: lastValue.current });\n      }\n      setCurrentButton(null);\n      activeButton.current = null;\n    },\n    [lastValue, value, onChange, handleTouchMove],\n  );\n\n  const handlePress = useCallback(\n    (typeButton: ActiveButton) => {\n      if (!disabled) {\n        setCurrentButton(typeButton);\n        activeButton.current = typeButton;\n        controlListeners('add');\n      }\n    },\n    [currentValue, value, onChange, handleTouchMove, disabled],\n  );\n\n  return {\n    onKeyPress,\n    onFocus,\n    handlePress,\n    onSliderClick,\n    activeButton: currentButton,\n    popoverPosition: [leftPopover, rightPopover],\n    currentValue: Array.isArray(currentValue) ? currentValue : [currentValue],\n  };\n}\n", "import React from 'react';\n\nimport { PropOnChange, SliderValue, TrackPosition } from '../helper';\nimport { getSteps } from '../useSliderStationing';\n\nexport type ActiveButton = 0 | 1 | null | undefined;\n\nexport type Stationing = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type UseSliderProps<RANGE extends boolean = false> = {\n  disabled: boolean;\n  range?: RANGE;\n  value: SliderValue<RANGE>;\n  min: number;\n  max: number;\n  step?: number | number[];\n  onChange?: PropOnChange<RANGE>;\n  onAfterChange?: PropOnChange<RANGE>;\n  containerRef: React.RefObject<HTMLDivElement>;\n  sliderRef: React.RefObject<HTMLDivElement | HTMLButtonElement>;\n  buttonRefs: React.RefObject<HTMLButtonElement>[];\n};\n\nexport type UseSliderValues = {\n  onKeyPress: (e: React.KeyboardEvent, typeButton: ActiveButton) => void;\n  onFocus: (\n    e: React.FocusEvent<HTMLButtonElement> | React.MouseEvent,\n    button: ActiveButton,\n  ) => void;\n  handlePress: (typeButton: ActiveButton) => void;\n  onSliderClick: React.MouseEventHandler;\n  activeButton: ActiveButton;\n  currentValue: [number] | [number, number];\n  popoverPosition: TrackPosition[];\n};\n\nexport const isRangeParams = (\n  params: UseSliderProps<boolean>,\n): params is UseSliderProps<true> => {\n  return !!params.range;\n};\n\nexport const isNotRangeParams = (\n  params: UseSliderProps<boolean>,\n): params is UseSliderProps<false> => {\n  return !params.range;\n};\n\nexport const trackPosition = (\n  event: TouchEvent | MouseEvent,\n): TrackPosition => {\n  if ('clientX' in event) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n  return {\n    x: event.changedTouches[0].clientX,\n    y: event.changedTouches[0].clientY,\n  };\n};\n\nexport const getActiveValue = (\n  value: number | [number, number],\n  active: ActiveButton,\n) => {\n  if (Array.isArray(value)) {\n    return value[typeof active === 'number' ? active : 0];\n  }\n  return value;\n};\n\nexport const detectActiveButton: (\n  posittion: TrackPosition,\n  buttons: React.RefObject<HTMLButtonElement>[],\n) => ActiveButton = (position, buttons) => {\n  let activeButton: ActiveButton = null;\n  buttons.forEach((buttonRef, index) => {\n    const button = buttonRef.current;\n    if (button && position) {\n      const { x, y, width, height } = button.getBoundingClientRect();\n      if (\n        x <= position.x &&\n        x + width >= position.x &&\n        y <= position.y &&\n        y + height >= position.y\n      ) {\n        activeButton = index as ActiveButton;\n        button.focus();\n      }\n    }\n  });\n  return activeButton;\n};\n\nexport const getValidValue = (\n  value: number,\n  min: number,\n  max: number,\n  step?: number | number[],\n) => {\n  if (typeof value === 'number') {\n    if (value >= max) return max;\n    if (value <= min) return min;\n    if (!Array.isArray(step)) {\n      const division = step?.toString().split('.')[1];\n      const stepValue = step || 1;\n      if (Math.abs(value) < 1) {\n        return Number(value.toFixed(division ? division.length : 0));\n      }\n      if (value < min) return min;\n      for (let i = min; i <= max; i += stepValue) {\n        if (value >= i && value < i + stepValue) {\n          return Number(\n            (value < i + stepValue / 2 ? i : i + stepValue).toFixed(\n              division ? division.length : 0,\n            ),\n          );\n        }\n      }\n      return max;\n    }\n    let resultValue = value;\n    step.forEach((stepPoint, index) => {\n      let minValue = min;\n      let maxValue = max;\n      if (index === 0) {\n        maxValue = step[index + 1];\n      } else if (index === step.length - 1) {\n        minValue = stepPoint;\n        maxValue = max;\n      } else {\n        maxValue = step[index + 1];\n        minValue = stepPoint;\n      }\n      if (value <= maxValue && value >= minValue) {\n        if ((maxValue + minValue) / 2 > value) {\n          resultValue = minValue;\n        } else {\n          resultValue = maxValue;\n        }\n      }\n    });\n    return resultValue;\n  }\n  return value;\n};\n\nexport const isValidValue = (\n  value: number,\n  min: number,\n  max: number,\n  step?: number | number[],\n) => getValidValue(value, min, max, step) === value;\n\nexport const getValueByPosition = (\n  position: TrackPosition,\n  sliderRef: React.RefObject<HTMLDivElement | HTMLButtonElement>,\n  min: number,\n  max: number,\n  step?: number | number[],\n) => {\n  if (sliderRef.current && position) {\n    const { x, width } = sliderRef.current.getBoundingClientRect();\n    const absoluteSize = Math.abs(max - min);\n    const value = min + ((position.x - x) * absoluteSize) / width;\n    return getValidValue(value, min, max, step);\n  }\n  return 0;\n};\n\nexport const getNewValue = (\n  changedValue: number,\n  currentValue: number | [number, number],\n  step: number | number[],\n  min: number,\n  max: number,\n  activeButton: ActiveButton,\n): number | [number, number] => {\n  const analyzedValue = getValidValue(\n    analyzeDivisionValue(changedValue, step, min, max),\n    min,\n    max,\n    step,\n  );\n  if (Array.isArray(currentValue)) {\n    return activeButton === 1\n      ? [currentValue[0], analyzedValue]\n      : [analyzedValue, currentValue[1]];\n  }\n  return analyzedValue;\n};\n\nexport const analyzeDivisionValue = (\n  value: number,\n  step: number | number[],\n  min: number,\n  max: number,\n) => {\n  let newValue: number = value;\n  if (Array.isArray(step)) {\n    const steps = getSteps(step, min, max);\n    steps.forEach((stepSize) => {\n      if (value && stepSize.min < value && stepSize.max >= value) {\n        if ((stepSize.max + stepSize.min) / 2 > value) {\n          newValue = stepSize.min;\n        } else {\n          newValue = stepSize.max;\n        }\n      }\n    });\n  } else {\n    if (value >= max) return max;\n    if (value <= min) return min;\n    const nearStep = (value - min) % step;\n    if (nearStep > step / 2) {\n      newValue = step - nearStep + value;\n    } else {\n      newValue = value - nearStep;\n    }\n  }\n  return newValue;\n};\n", "import './SliderLine.css';\n\nimport React from 'react';\n\nimport { cn } from '../../../utils/bem';\nimport { SliderLineProps } from '../helper';\n\nconst cnSliderLine = cn('SliderLine');\n\nexport const SliderLine = (props: SliderLineProps) => {\n  const {\n    hovered,\n    onHover,\n    lines,\n    disabled,\n    view = 'default',\n    ...otherProps\n  } = props;\n\n  const handleHover = (active: boolean, hover: boolean) => {\n    if (!disabled && active) {\n      onHover?.(hover);\n    }\n  };\n\n  return (\n    <div className={cnSliderLine({ view })} {...otherProps}>\n      {lines.map((line, index) => (\n        <div\n          onMouseEnter={() => handleHover(line.active, true)}\n          onMouseLeave={() => handleHover(line.active, false)}\n          className={cnSliderLine('Line', {\n            active: line.active,\n            hovered: line.active && hovered,\n            disabled,\n          })}\n          key={cnSliderLine({ index })}\n          style={{\n            ['--slider-line-size' as string]: `${line.width}%`,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n", "import './SliderPoint.css';\n\nimport React, { useEffect, useRef } from 'react';\n\nimport { useFlag } from '../../../hooks/useFlag/useFlag';\nimport { useForkRef } from '../../../hooks/useForkRef/useForkRef';\nimport { cnMixFocus } from '../../../mixs/MixFocus/MixFocus';\nimport { cn } from '../../../utils/bem';\nimport {\n  generateThemeClassNames,\n  ThemeContext,\n  useTheme,\n} from '../../Theme/Theme';\nimport { Tooltip } from '../../Tooltip/Tooltip';\nimport { SliderPointProps, TrackPosition } from '../helper';\n\nconst cnSliderPoint = cn('SliderPoint');\n\nconst getTooltipPosition = (\n  popoverPosition?: TrackPosition,\n  buttonRef?: React.RefObject<HTMLButtonElement>,\n) => {\n  if (popoverPosition && buttonRef && buttonRef.current) {\n    const { y, height } = buttonRef.current.getBoundingClientRect();\n    return {\n      x: Math.round(popoverPosition.x),\n      y: Math.round(y + height / 2),\n    };\n  }\n\n  return { x: 0, y: 0 };\n};\nexport const SliderPoint = (props: SliderPointProps) => {\n  const {\n    hovered,\n    onHover,\n    value,\n    position,\n    disabled,\n    withTooltip,\n    focused,\n    popoverPosition,\n    buttonRef,\n    active,\n    handlePress,\n    onKeyPress,\n    tooltipFormatter,\n    buttonLabel,\n    onFocus,\n    tooltipZIndex,\n    ...otherProps\n  } = props;\n\n  const [tooltipVisible, setTooltipVisible] = useFlag(false);\n\n  const { theme } = useTheme();\n\n  const tooltipTheme = {\n    ...theme,\n    color: {\n      primary: theme.color.invert,\n      accent: theme.color.accent,\n      invert: theme.color.primary,\n    },\n  };\n\n  const tooltipThemeClassNames = generateThemeClassNames(tooltipTheme);\n\n  const handleFocus = (\n    e: React.FocusEvent<HTMLButtonElement> | React.MouseEvent,\n  ) => {\n    if (!disabled) {\n      onFocus?.(e, buttonLabel);\n      setTooltipVisible.on();\n    }\n  };\n\n  const handleMouseAction = (enter: boolean) => {\n    if (!disabled) {\n      onHover?.(enter);\n      enter && setTooltipVisible.on();\n      if (enter) setTooltipVisible.on();\n      if (!enter && !focused) setTooltipVisible.off();\n    }\n  };\n\n  const handleBlur = (\n    e:\n      | React.FocusEvent<HTMLButtonElement>\n      | React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    if (!disabled) {\n      onFocus?.(e, null);\n      setTooltipVisible.off();\n    }\n  };\n\n  const pointRef = useRef<HTMLButtonElement>(null);\n\n  const tooltipPosition = getTooltipPosition(\n    popoverPosition,\n    buttonRef || pointRef,\n  );\n\n  useEffect(() => {\n    focused ? setTooltipVisible.on() : setTooltipVisible.off();\n  }, [focused]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        aria-label={`${buttonLabel}-button`}\n        className={cnSliderPoint({ hovered, disabled, active }, [\n          !disabled ? cnMixFocus() : '',\n        ])}\n        onMouseOver={() => handleMouseAction(true)}\n        onMouseOut={() => handleMouseAction(false)}\n        onMouseDown={() => handlePress?.(buttonLabel)}\n        onTouchStart={() => handlePress?.(buttonLabel)}\n        onKeyDown={(e) => onKeyPress?.(e, buttonLabel)}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onClick={handleFocus}\n        ref={useForkRef([buttonRef, pointRef])}\n        tabIndex={0}\n        style={{\n          ['--slider-button-left' as string]: `${position}%`,\n        }}\n        {...otherProps}\n      />\n      {tooltipVisible && withTooltip && popoverPosition && (\n        <ThemeContext.Provider\n          // eslint-disable-next-line react/jsx-no-constructed-context-values\n          value={{\n            theme: tooltipTheme,\n            themeClassNames: tooltipThemeClassNames,\n          }}\n        >\n          <Tooltip\n            position={tooltipPosition}\n            className={cnSliderPoint('Tooltip')}\n            direction=\"downCenter\"\n            possibleDirections={[\n              'leftCenter',\n              'rightCenter',\n              'downCenter',\n              'leftDown',\n              'rightDown',\n              'upCenter',\n            ]}\n            style={{ zIndex: tooltipZIndex }}\n            offset={10}\n          >\n            {tooltipFormatter ? tooltipFormatter(value) : value}\n          </Tooltip>\n        </ThemeContext.Provider>\n      )}\n    </>\n  );\n};\n", "import './Tooltip.css';\n\nimport React, { useMemo, useState } from 'react';\n\nimport { ClickOutsideHandler } from '../../hooks/useClickOutside/useClickOutside';\nimport { cnMixPopoverArrow } from '../../mixs/MixPopoverArrow/MixPopoverArrow';\nimport { cn } from '../../utils/bem';\nimport { PropsWithJsxAttributes } from '../../utils/types/PropsWithJsxAttributes';\nimport { Direction, Popover, PositioningProps } from '../Popover/Popover';\nimport { Text } from '../Text/Text';\nimport {\n  generateDeps,\n  generateThemeClassNames,\n  ThemeContext,\n  useTheme,\n} from '../Theme/Theme';\n\nconst ARROW_SIZE = 6;\nconst ARROW_OFFSET = 8;\n\nconst cnTooltip = cn('Tooltip');\n\nexport const tooltipPropSizes = ['m', 's', 'l'] as const;\nexport const tooltipPropSizesDefault = tooltipPropSizes[0];\nexport type TooltipPropSize = typeof tooltipPropSizes[number];\n\nexport const tooltipPropStatus = [\n  'normal',\n  'alert',\n  'success',\n  'warning',\n] as const;\nexport type TooltipPropStatus = typeof tooltipPropStatus[number];\n\nexport type TooltipProps = PropsWithJsxAttributes<\n  {\n    size?: TooltipPropSize;\n    status?: TooltipPropStatus;\n    direction?: Direction;\n    spareDirection?: Direction;\n    possibleDirections?: readonly Direction[];\n    isInteractive?: boolean;\n    children: React.ReactNode;\n    onClickOutside?: ClickOutsideHandler;\n    className?: string;\n    offset?: number;\n    onSetDirection?: (direction: Direction) => void;\n  } & PositioningProps\n>;\n\nfunction renderChildren(children: React.ReactNode): React.ReactNode {\n  return typeof children === 'string' || typeof children === 'number' ? (\n    <Text size=\"xs\">{children}</Text>\n  ) : (\n    children\n  );\n}\n\nexport const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(\n  (props, ref) => {\n    const {\n      children,\n      size = tooltipPropSizesDefault,\n      className,\n      status,\n      onSetDirection: onSetDirectionProp,\n      style,\n      offset = 0,\n      ...rest\n    } = props;\n    const { theme } = useTheme();\n    const [direction, setDirection] = useState<Direction | undefined>();\n\n    const onSetDirection = (direction: Direction) => {\n      onSetDirectionProp && onSetDirectionProp(direction);\n      setDirection(direction);\n    };\n\n    const value = useMemo(() => {\n      const tooltipTheme = status\n        ? {\n            ...theme,\n            color: {\n              primary: theme.color.accent,\n              accent: theme.color.accent,\n              invert: theme.color.primary,\n            },\n          }\n        : {\n            ...theme,\n            color: {\n              primary: theme.color.invert,\n              accent: theme.color.accent,\n              invert: theme.color.primary,\n            },\n          };\n\n      return {\n        theme: tooltipTheme,\n        themeClassNames: generateThemeClassNames(tooltipTheme),\n      };\n    }, [generateDeps(theme), status]);\n\n    return (\n      <ThemeContext.Provider value={value}>\n        <Popover\n          {...rest}\n          arrowOffset={ARROW_OFFSET + ARROW_SIZE}\n          offset={ARROW_SIZE + 4 + offset}\n          onSetDirection={onSetDirection}\n          ref={ref}\n          className={cnTooltip({ status }, [className])}\n          style={{\n            ['--popover-arrow-size' as string]: `${ARROW_SIZE}px`,\n            ['--popover-arrow-offset' as string]: `${ARROW_OFFSET}px`,\n            ...style,\n          }}\n        >\n          <div className={cnTooltip('Background')} />\n          <div\n            className={cnTooltip('Arrow', [cnMixPopoverArrow({ direction })])}\n          />\n          <div className={cnTooltip('Content', { size })}>\n            {renderChildren(children)}\n          </div>\n        </Popover>\n      </ThemeContext.Provider>\n    );\n  },\n);\n", "import './MixPopoverArrow.css';\n\nimport { Direction } from '../../components/Popover/Popover';\nimport { cn } from '../../utils/bem';\n\ntype Props = {\n  direction?: Direction;\n};\n\ntype CnMixPopoverArrow = (\n  elemNameOrBlockMods?: Props | string | null,\n  elemModsOrBlockMix?: Props | Array<string | undefined> | null,\n  elemMix?: Array<string | undefined>,\n) => string;\n\nexport const cnMixPopoverArrow: CnMixPopoverArrow = cn('MixPopoverArrow');\n"],
  "mappings": "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",
  "names": ["import_react", "getIsValidValue", "value", "min", "max", "useSortSteps", "props", "step", "sortedSteps", "useMemo", "Array", "isArray", "stepsArr", "push", "sortedArray", "sort", "a", "b", "filter", "val", "from", "Set", "propStatus", "defaultPropStatus", "propSize", "defaultPropSize", "isRangeParams", "params", "range", "isNotRangeParams", "defaultTooltipFormatter", "value", "toString", "getValueForInput", "props", "field", "getOnChandgeForInput", "e", "onChange", "getIcon", "side", "getMaxForStartField", "max", "getMinForEndField", "min", "getValidStep", "step", "Array", "isArray", "Math", "abs", "import_react", "IconEyeSizeM", "props", "React", "IconEyeSizeS", "props", "React", "IconEyeSizeXs", "props", "IconEye", "createIcon", "l", "IconEyeSizeM", "m", "s", "IconEyeSizeS", "xs", "IconEyeSizeXs", "name", "renderType", "color", "React", "IconEyeCloseSizeM", "props", "React", "IconEyeCloseSizeS", "props", "React", "IconEyeCloseSizeXs", "props", "IconEyeClose", "createIcon", "l", "IconEyeCloseSizeM", "m", "s", "IconEyeCloseSizeS", "xs", "IconEyeCloseSizeXs", "name", "renderType", "color", "React", "IconSelectOpenSizeM", "props", "React", "IconSelectOpenSizeS", "props", "React", "IconSelectOpenSizeXs", "props", "IconSelectOpen", "createIcon", "l", "IconSelectOpenSizeM", "m", "s", "IconSelectOpenSizeS", "xs", "IconSelectOpenSizeXs", "name", "renderType", "color", "import_react", "React", "React", "import_react", "useLatest", "import_react", "updateRef", "useComposedRef", "forceHiddenStyles", "getHeight", "noop", "pick", "getSizingData", "handler", "useWindowResizeListener", "useFontsLoadedListener", "TextareaAutosize", "resizeTextarea", "handleChange", "index", "sizeMap", "xs", "s", "m", "l", "getValueByStepArray", "steps", "value", "min", "max", "isIncrement", "currentValue", "length", "i", "getValueByStepNumber", "step", "minValue", "maxValue", "Number", "isNaN", "toFixed", "toString", "split", "getIncrementFlag", "event", "key", "getTypeForRender", "type", "passwordVible", "getValueByStep", "Array", "isArray", "textFieldPropSize", "textFieldPropSizeDefault", "textFieldPropView", "textFieldPropViewDefault", "textFieldPropForm", "textFieldPropFormDefault", "textFieldPropWidth", "textFieldPropWidthDefault", "COMPONENT_NAME", "cnTextField", "cn", "TextFieldRender", "props", "ref", "textFieldRef", "React", "useRef", "inputRef", "usePropsHandler", "className", "type", "value", "onChange", "id", "name", "rows", "cols", "minRows", "maxRows", "inputRefProp", "maxLength", "disabled", "size", "textFieldPropSizeDefault", "view", "textFieldPropViewDefault", "form", "textFieldPropFormDefault", "state", "status", "width", "textFieldPropWidthDefault", "onBlur", "onFocus", "autoFocus", "placeholder", "leftSide", "rightSide", "autoComplete", "withClearButton", "incrementButtons", "max", "min", "readOnly", "required", "step", "tabIndex", "ariaLabel", "label", "labelIcon", "inputContainerRef", "labelPosition", "caption", "iconSizeProp", "iconSize", "focused", "onClick", "onKeyDownProp", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyPressCapture", "onKeyUp", "onKeyUpCapture", "otherProps", "_excluded", "useFlag", "focus", "setFocus", "passwordVisible", "setPasswordVisuble", "valueRef", "useMutableRef", "onClickRef", "onChangeRef", "handleEyeClick", "useCallback", "e", "b", "stopPropagation", "toggle", "current", "LeftIcon", "RightIcon", "leftSideIsString", "isString", "rightSideIsString", "getByMap", "sizeMap", "sortedSteps", "useSortSteps", "handleChange", "target", "handleFocus", "on", "commonProps", "handleBlur", "off", "toString", "Eye", "IconEyeClose", "IconEye", "textareaProps", "useForkRef", "inputProps", "getTypeForRender", "Array", "isArray", "flag", "getIncrementFlag", "c", "preventDefault", "getValueByStep", "handleClear", "changeNumberValue", "isIncrement", "rootProps", "useEffect", "a", "selectionStart", "length", "withValue", "position", "index", "TextField", "forwardRef", "import_react", "import_react", "COUNT_STEPS", "useSlider", "props", "disabled", "range", "value", "min", "max", "step", "onChange", "onAfterChange", "sliderRef", "containerRef", "buttonRefs", "minValue", "maxValue", "dragStepValue", "useMemo", "Array", "isArray", "val", "Math", "abs", "useState", "currentValue", "setCurrentValue", "leftPopover", "setLeftPopover", "rightPopover", "setRightPopover", "currentButton", "setCurrentButton", "activeButton", "useRef", "sizeSlider", "useComponentSize", "lastValue", "useMutableRef", "useClickOutside", "isActive", "ignoreClicksInsideRefs", "handler", "current", "useEffect", "controlListeners", "type", "method", "document", "handleRelease", "handleTouchMove", "setTooltipPosition", "JSON", "stringify", "indexOf", "getActiveValue", "getNewValue", "targetValue", "isRangeParams", "getValidValue", "b", "newValue", "onKeyPress", "useCallback", "event", "typeButton", "preventDefault", "stopPropagation", "stepIncrement", "validKeyCode", "changedValue", "key", "forEach", "stepPoint", "index", "e", "position", "button", "d", "getBoundingClientRect", "x", "width", "newPosition", "y", "offsetTop", "offsetHeight", "changePosition", "trackPosition", "positionValue", "getValueByPosition", "oldValue", "isNotRangeParams", "c", "copyValues", "sort", "a", "handlePress", "onFocus", "onSliderClick", "pageX", "pageY", "popoverPosition", "getSteps", "step", "min", "max", "stepsArray", "size", "Array", "isArray", "i", "length", "push", "useSliderStationing", "value", "view", "range", "buttonRefs", "sliderLineRef", "useState", "lineSizes", "setLineSizes", "buttonPositions", "setButtonPositions", "useComponentSize", "width", "height", "calcualtedStep", "useMemo", "val", "Math", "abs", "COUNT_STEPS", "calculateLines", "sizesArray", "absoluteSize", "active", "forEach", "stepSize", "h", "minValue", "maxValue", "endPointArray", "unshift", "getValidValue", "calculateButtonPositions", "useCallback", "defaultPaddingValue", "positions", "buttonRef", "index", "current", "offsetWidth", "useEffect", "isRangeParams", "params", "range", "isNotRangeParams", "trackPosition", "event", "x", "clientX", "y", "clientY", "changedTouches", "getActiveValue", "value", "active", "Array", "isArray", "getValidValue", "value", "min", "max", "step", "Array", "isArray", "division", "toString", "split", "stepValue", "Math", "abs", "toFixed", "length", "i", "resultValue", "forEach", "stepPoint", "index", "minValue", "maxValue", "isValidValue", "getValueByPosition", "position", "sliderRef", "current", "getBoundingClientRect", "x", "width", "absoluteSize", "getNewValue", "changedValue", "currentValue", "activeButton", "analyzedValue", "analyzeDivisionValue", "newValue", "steps", "getSteps", "stepSize", "nearStep", "cnSliderInput", "cn", "SliderInput", "props", "value", "onChange", "min", "max", "step", "size", "className", "otherProps", "_excluded", "useState", "toString", "currentValue", "setCurrentValue", "useEffect", "React", "commitChange", "validatedValue", "getValidValue", "handleChange", "a", "e", "isValidValue", "import_react", "cnSliderLine", "cn", "SliderLine", "props", "hovered", "onHover", "lines", "disabled", "view", "otherProps", "_excluded", "handleHover", "active", "hover", "React", "map", "line", "index", "width", "import_react", "import_react", "cnMixPopoverArrow", "cn", "ARROW_SIZE", "ARROW_OFFSET", "cnTooltip", "cn", "tooltipPropSizes", "tooltipPropSizesDefault", "renderChildren", "children", "React", "Tooltip", "forwardRef", "props", "ref", "size", "tooltipPropSizesDefault", "className", "status", "onSetDirectionProp", "onSetDirection", "style", "offset", "rest", "_excluded", "useTheme", "theme", "useState", "direction", "setDirection", "value", "useMemo", "tooltipTheme", "color", "primary", "accent", "invert", "themeClassNames", "generateThemeClassNames", "generateDeps", "ARROW_OFFSET", "ARROW_SIZE", "cnTooltip", "cnMixPopoverArrow", "cnSliderPoint", "cn", "getTooltipPosition", "popoverPosition", "buttonRef", "current", "getBoundingClientRect", "y", "height", "x", "Math", "round", "SliderPoint", "props", "hovered", "onHover", "value", "position", "disabled", "withTooltip", "focused", "active", "handlePress", "onKeyPress", "tooltipFormatter", "buttonLabel", "onFocus", "tooltipZIndex", "otherProps", "_excluded", "useFlag", "tooltipVisible", "setTooltipVisible", "useTheme", "theme", "tooltipTheme", "_objectSpread", "color", "primary", "invert", "accent", "tooltipThemeClassNames", "generateThemeClassNames", "handleFocus", "e", "on", "handleMouseAction", "enter", "off", "pointRef", "useRef", "tooltipPosition", "useEffect", "React", "cnMixFocus", "handleBlur", "useForkRef", "themeClassNames", "zIndex", "cnSlider", "cn", "sizeMap", "xs", "s", "m", "l", "COMPONENT_NAME", "SliderRender", "props", "ref", "sliderRef", "useRef", "usePropsHandler", "min", "max", "onChange", "onAfterChange", "value", "stepProp", "step", "disabled", "size", "defaultPropSize", "view", "leftSide", "rightSide", "withTooltip", "range", "label", "labelIcon", "status", "caption", "tooltipFormatter", "defaultTooltipFormatter", "className", "style", "otherProps", "_excluded", "useState", "focusIndex", "setFocusIndex", "useFlag", "isHovered", "on", "off", "containerRef", "leftButtonRef", "rightButtonRef", "sortedSteps", "useSortSteps", "getValidStep", "Math", "abs", "IconRight", "getIcon", "IconLeft", "iconSize", "useSlider", "buttonRefs", "onKeyPress", "onFocus", "handlePress", "onSliderClick", "popoverPosition", "activeButton", "currentValue", "useSliderStationing", "length", "lineSizes", "buttonPositions", "containerProps", "role", "tabIndex", "onClick", "changeHovered", "React", "useForkRef", "position", "getValueForInput", "getOnChandgeForInput", "getMaxForStartField", "map", "val", "index", "topLayer", "zIndex", "getMinForEndField", "isRangeParams", "Slider", "forwardRef"]
}
