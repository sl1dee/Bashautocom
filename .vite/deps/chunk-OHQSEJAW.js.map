{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/hooks/useComponentSize/useComponentSize.tsx", "../../node_modules/@consta/src/hooks/useResizeObserved/useResizeObserved.ts", "../../node_modules/@consta/src/hooks/useComponentSize/getElementSize.ts"],
  "sourcesContent": ["import { useMemo } from 'react';\n\nimport { useResizeObserved } from '##/hooks/useResizeObserved';\n\nimport { getElementSize } from './getElementSize';\nimport { ComponentSize } from './types';\n\nexport function useComponentSize(\n  ref: React.RefObject<HTMLElement | SVGGraphicsElement>,\n): ComponentSize {\n  const refs = useMemo(\n    () => [ref],\n    // Если реф начал указывать на другой элемент, нужно обновить подписки\n    [ref.current],\n  );\n  return useResizeObserved(refs, getElementSize)[0];\n}\n", "import React, { RefObject, useLayoutEffect } from 'react';\n\nexport const useResizeObserved = <\n  ELEMENT extends HTMLElement | SVGGraphicsElement,\n  RETURN_TYPE,\n>(\n  refs: Array<RefObject<ELEMENT>>,\n  mapper: (el: ELEMENT | null) => RETURN_TYPE,\n): RETURN_TYPE[] => {\n  const [dimensions, setDimensions] = React.useState<RETURN_TYPE[]>(() =>\n    refs.map((ref) => mapper(ref.current)),\n  );\n\n  // Храним маппер в рефке, чтобы если его передадут инлайн-функцией, это не вызвало бесконечные перерендеры\n  const mapperRef = React.useRef(mapper);\n  useLayoutEffect(() => {\n    mapperRef.current = mapper;\n  }, [mapper]);\n\n  useLayoutEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      setDimensions(refs.map((ref) => mapperRef.current(ref.current)));\n    });\n\n    for (const ref of refs) {\n      ref.current && resizeObserver.observe(ref.current);\n    }\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [refs]);\n\n  return dimensions;\n};\n", "import { ComponentSize } from './types';\n\nconst defaultSize: ComponentSize = { width: 0, height: 0 };\n\nexport const getElementSize = (\n  el: HTMLElement | SVGGraphicsElement | null,\n): ComponentSize => {\n  if (!el) {\n    return defaultSize;\n  }\n\n  const { width, height } = el.getBoundingClientRect();\n\n  return {\n    width,\n    height,\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAAAA,gBAAwB;;;ACAxB,mBAAkD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3C,IAAMC,oBAAoB,SAI/BC,GACAC,GACkB;AAAA,MAAA,IACkBC,aAAAA,QAAMC,SAAwB,WAAA;AAAA,WAChEH,EAAKI,IAAI,SAACC,IAAD;AAAA,aAASJ,EAAOI,GAAIC,OAAL;IAAf,CAAT;EADgE,CAA9B,GADlB,IAAA,eAAA,GAAA,CAAA,GACXC,IADW,EAAA,CAAA,GACCC,IADD,EAAA,CAAA,GAMZC,IAAYP,aAAAA,QAAMQ,OAAOT,CAAb;AAmBlB,aAlBAU,8BAAgB,WAAM;AACpBF,MAAUH,UAAUL;EACrB,GAAE,CAACA,CAAD,CAFY,OAIfU,8BAAgB,WAAM;AAAA,QAAAC,IACdC,KAAiB,IAAIC,eAAe,WAAM;AAC9CN,QAAcR,EAAKI,IAAI,SAACC,IAAD;AAAA,eAASI,EAAUH,QAAQD,GAAIC,OAAtB;MAAT,CAAT,CAAD;IACd,CAFsB,GADHS,KAAA,2BAKFf,CALE;AAAA,QAAA;AAKpB,WAAAe,GAAA,EAAA,GAAA,EAAAH,KAAAG,GAAA,EAAA,GAAA,QAAwB;AAAA,YAAbV,KAAaO,GAAA;AACtBP,QAAAA,GAAIC,WAAWO,GAAeG,QAAQX,GAAIC,OAA3B;MAChB;IAPmB,SAAAW,IAAA;AAAA,MAAAF,GAAA,EAAAE,EAAA;IAAA,UAAA;AAAA,MAAAF,GAAA,EAAA;IAAA;AASpB,WAAO,WAAM;AACXF,MAAAA,GAAeK,WAAf;IACD;EACF,GAAE,CAAClB,CAAD,CAZY,GAcRO;AACR;;;AChCD,IAAMY,cAA6B,EAAEC,OAAO,GAAGC,QAAQ,EAApB;AAE5B,IAAMC,iBAAiB,SAC5BC,GACkB;AAClB,MAAI,CAACA;AACH,WAAOJ;AAGT,MAAA,IAA0BI,EAAGC,sBAAH,GAAlBJ,IAAR,EAAQA,OAAOC,IAAf,EAAeA;AAEf,SAAO,EACLD,OAAAA,GACAC,QAAAA,EAFK;AAIR;;;AFVM,SAASI,iBACdC,GACe;AACf,MAAMC,QAAOC,uBACX,WAAA;AAAA,WAAM,CAACF,CAAD;EAAN,GAEA,CAACA,EAAIG,OAAL,CAHkB;AAKpB,SAAOC,kBAAkBH,GAAMI,cAAP,EAAuB,CAAxC;AACR;",
  "names": ["import_react", "useResizeObserved", "refs", "mapper", "React", "useState", "map", "ref", "current", "dimensions", "setDimensions", "mapperRef", "useRef", "useLayoutEffect", "b", "resizeObserver", "ResizeObserver", "d", "observe", "a", "disconnect", "defaultSize", "width", "height", "getElementSize", "el", "getBoundingClientRect", "useComponentSize", "ref", "refs", "useMemo", "current", "useResizeObserved", "getElementSize"]
}
