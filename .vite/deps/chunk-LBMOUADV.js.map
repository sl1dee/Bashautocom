{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/Checkbox/Checkbox.tsx"],
  "sourcesContent": ["import './Checkbox.css';\n\nimport React, { ChangeEventHandler } from 'react';\n\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { cnMixFocus } from '../../mixs/MixFocus/MixFocus';\nimport { cn } from '../../utils/bem';\nimport { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\n\nexport const checkboxPropSize = ['m', 'xs', 's', 'l'] as const;\nexport type CheckboxPropSize = typeof checkboxPropSize[number];\nexport const checkboxPropSizeDefault: CheckboxPropSize = checkboxPropSize[0];\n\nexport const checkboxPropView = ['primary', 'ghost'] as const;\nexport type CheckboxPropView = typeof checkboxPropView[number];\nexport const checkboxPropViewDefault: CheckboxPropView = checkboxPropView[0];\n\nexport const checkboxPropAlign = ['center', 'top'] as const;\nexport type CheckboxPropAlign = typeof checkboxPropAlign[number];\nexport const checkboxPropAlignDefault: CheckboxPropAlign = checkboxPropAlign[0];\n\nexport type CheckboxPropOnChange = (object: {\n  e: React.ChangeEvent<HTMLInputElement>;\n  checked: boolean;\n}) => void;\n\ntype Props = {\n  checked: boolean | undefined;\n  size?: CheckboxPropSize;\n  view?: CheckboxPropView;\n  align?: CheckboxPropAlign;\n  disabled?: boolean;\n  intermediate?: boolean;\n  label?: string;\n  onChange?: CheckboxPropOnChange;\n  name?: string;\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n  autoFocus?: boolean;\n  readOnly?: boolean;\n  required?: boolean;\n  step?: number | string;\n  tabIndex?: number;\n  inputRef?: React.Ref<HTMLInputElement>;\n  children?: never;\n  for?: string;\n  inputId?: string;\n};\n\nexport type CheckboxProps = PropsWithHTMLAttributes<Props, HTMLLabelElement>;\n\nexport const COMPONENT_NAME = 'Checkbox' as const;\nexport const cnCheckbox = cn(COMPONENT_NAME);\n\nexport const Checkbox = React.forwardRef<HTMLLabelElement, CheckboxProps>(\n  (props, ref) => {\n    const checkboxRef = React.useRef<HTMLLabelElement>(null);\n\n    const {\n      checked = false,\n      name,\n      size = checkboxPropSizeDefault,\n      view = checkboxPropViewDefault,\n      align = checkboxPropAlignDefault,\n      disabled,\n      intermediate = false,\n      className,\n      label,\n      onChange,\n      onFocus,\n      onBlur,\n      readOnly,\n      required,\n      step,\n      tabIndex,\n      inputId,\n      inputRef,\n      ...otherProps\n    } = usePropsHandler(COMPONENT_NAME, props, checkboxRef);\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n      if (onChange) {\n        onChange({ e, checked: !checked });\n      }\n    };\n\n    return (\n      <label\n        {...otherProps}\n        className={cnCheckbox({ size, view, disabled, intermediate, align }, [\n          className,\n        ])}\n        ref={useForkRef([ref, checkboxRef])}\n      >\n        <input\n          type=\"checkbox\"\n          name={name}\n          className={cnCheckbox('Input', [cnMixFocus()])}\n          checked={checked}\n          id={inputId}\n          disabled={disabled}\n          onChange={handleChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          readOnly={readOnly}\n          required={required}\n          step={step}\n          tabIndex={tabIndex}\n          ref={inputRef}\n        />\n        {label && <span className={cnCheckbox('Label')}>{label}</span>}\n      </label>\n    );\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAEA,mBAA0C;AAF1C,OAAA;;AAUO,IAAMA,mBAAmB,CAAC,KAAK,MAAM,KAAK,GAAjB;AAEzB,IAAMC,0BAA4CD,iBAAiB,CAAD;AAElE,IAAME,mBAAmB,CAAC,WAAW,OAAZ;AAEzB,IAAMC,0BAA4CD,iBAAiB,CAAD;AAElE,IAAME,oBAAoB,CAAC,UAAU,KAAX;AAE1B,IAAMC,2BAA8CD,kBAAkB,CAAD;AAgCrE,IAAME,iBAAiB;AACvB,IAAMC,aAAaC,GAAE,UAAA;AAErB,IAAMC,WAAWC,aAAAA,QAAMC,WAC5B,SAACC,GAAOC,GAAQ;AAAA,MACRC,IAAcJ,aAAAA,QAAMK,OAAyB,IAA/B,GADN,IAuBVC,gBAAgBV,gBAAgBM,GAAOE,CAAxB,GAvBL,IAAA,EAIZG,SAAAA,IAJY,WAAA,KAAA,GAKZC,IALY,EAKZA,MALY,IAAA,EAMZC,MAAAA,IANY,WAAA,IAMLlB,0BANK,GAAA,IAAA,EAOZmB,MAAAA,IAPY,WAAA,IAOLjB,0BAPK,GAAA,IAAA,EAQZkB,OAAAA,IARY,WAAA,IAQJhB,2BARI,GASZiB,IATY,EASZA,UATY,IAAA,EAUZC,cACAC,IAXY,EAWZA,WACAC,IAZY,EAYZA,OACAC,IAbY,EAaZA,UACAC,IAdY,EAcZA,SACAC,IAfY,EAeZA,QACAC,IAhBY,EAgBZA,UACAC,IAjBY,EAiBZA,UACAC,IAlBY,EAkBZA,MACAC,IAnBY,EAmBZA,UACAC,IApBY,EAoBZA,SACAC,IArBY,EAqBZA,UACGC,IAtBS,yBAAA,GAAA,SAAA;AA+Bd,SACE,aAAAzB,QAAA,cAAA,SAAA,OAAA,OAAA,CAAA,GACMyB,GADN,EAEE,WAAW5B,WAAW,EAAEY,MAAAA,GAAMC,MAAAA,GAAME,UAAAA,GAAUC,cAAY,WAAA,KAAA,GAAEF,OAAAA,EAAtC,GAA+C,CACnEG,CADmE,CAAhD,GAGrB,KAAKY,WAAW,CAACvB,GAAKC,CAAN,CAAD,EALjB,CAAA,GAOE,aAAAJ,QAAA,cAAA,SAAA,EACE,MAAK,YACL,MAAMQ,GACN,WAAWX,WAAW,SAAS,CAAC8B,WAAU,CAAX,CAAV,GACrB,SAASpB,GACT,IAAIgB,GACJ,UAAUX,GACV,UArBqD,SAArDgB,aAAsDC,IAAM;AAC5Db,SACFA,EAAS,EAAEa,GAAAA,IAAGtB,SAAS,CAACA,EAAf,CAAD;EAEX,GAkBK,SAASU,GACT,QAAQC,GACR,UAAUC,GACV,UAAUC,GACV,MAAMC,GACN,UAAUC,GACV,KAAKE,EAdP,CAAA,GAgBCT,KAAS,aAAAf,QAAA,cAAA,QAAA,EAAM,WAAWH,WAAW,OAAD,EAA3B,GAAuCkB,CAAvC,CAvBZ;AA0BH,CA3DqB;",
  "names": ["checkboxPropSize", "checkboxPropSizeDefault", "checkboxPropView", "checkboxPropViewDefault", "checkboxPropAlign", "checkboxPropAlignDefault", "COMPONENT_NAME", "cnCheckbox", "cn", "Checkbox", "React", "forwardRef", "props", "ref", "checkboxRef", "useRef", "usePropsHandler", "checked", "name", "size", "view", "align", "disabled", "intermediate", "className", "label", "onChange", "onFocus", "onBlur", "readOnly", "required", "step", "tabIndex", "inputId", "inputRef", "otherProps", "useForkRef", "cnMixFocus", "handleChange", "e"]
}
