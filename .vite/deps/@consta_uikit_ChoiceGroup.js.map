{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/ChoiceGroup/ChoiceGroup.tsx", "../../node_modules/@consta/src/components/ChoiceGroup/helper.ts", "../../node_modules/@consta/src/components/ChoiceGroup/Item/ChoiceGroup-Item.tsx", "../../node_modules/@consta/src/components/ChoiceGroup/types.ts"],
  "sourcesContent": ["import './ChoiceGroup.css';\n\nimport { IconPropSize } from '@consta/icons/Icon';\nimport React, { forwardRef } from 'react';\n\nimport { useChoiceGroup } from '../../hooks/useChoiceGroup/useChoiceGroup';\nimport { cn } from '../../utils/bem';\nimport { getByMap } from '../../utils/getByMap';\nimport { withDefaultGetters } from './helper';\nimport { ChoiceGroupItem } from './Item/ChoiceGroup-Item';\nimport {\n  ChoiceGroupComponent,\n  choiceGroupDefaultForm,\n  choiceGroupDefaultSize,\n  choiceGroupDefaultView,\n  ChoiceGroupPropOnChange,\n  ChoiceGroupProps,\n  ChoiceGroupPropSize,\n  choiceGroupWidthDefault,\n} from './types';\n\nconst sizeMap: Record<ChoiceGroupPropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 'xs',\n  m: 's',\n  l: 'm',\n};\n\nexport const cnChoiceGroup = cn('ChoiceGroup');\n\nconst ChoiceGroupRender = (\n  props: ChoiceGroupProps,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const {\n    size = choiceGroupDefaultSize,\n    form = choiceGroupDefaultForm,\n    view = choiceGroupDefaultView,\n    width = choiceGroupWidthDefault,\n    onlyIcon,\n    iconSize: iconSizeProp,\n    value = null,\n    multiple = false,\n    items,\n    getItemLabel,\n    onChange,\n    getItemIcon,\n    name,\n    className,\n    disabled = false,\n    getItemDisabled,\n    truncate,\n    ...otherProps\n  } = withDefaultGetters(props);\n\n  type Item = typeof items[number];\n\n  const { getOnChange, getChecked } = useChoiceGroup<\n    Item,\n    React.ChangeEvent<HTMLInputElement>\n  >({\n    value: value as Item,\n    getKey: getItemLabel,\n    callBack: onChange as ChoiceGroupPropOnChange<Item, false>,\n    multiple: multiple as false,\n    // привел к типам из-за того что\n    // TS не понимает что параметры для не Multiple и Multiple не могут прийти одновременно\n  });\n\n  const iconSize = getByMap(sizeMap, size, iconSizeProp);\n\n  return (\n    <div\n      {...otherProps}\n      ref={ref}\n      className={cnChoiceGroup(\n        { size, form, view, width, onlyIcon, disabled, truncate },\n        [className],\n      )}\n    >\n      {items.map((item, idx) => {\n        const itemChecked = getChecked(item);\n        const itemDisabled = !!getItemDisabled && getItemDisabled(item);\n        return (\n          <React.Fragment key={getItemLabel(item)}>\n            {idx > 0 && (\n              <div\n                className={cnChoiceGroup('Divider', {\n                  checked: itemChecked,\n                  disabled: itemDisabled,\n                })}\n              />\n            )}\n            <ChoiceGroupItem\n              onChange={getOnChange(item)}\n              checked={itemChecked}\n              label={getItemLabel(item).toString()}\n              icon={getItemIcon && getItemIcon(item)}\n              iconSize={iconSize}\n              multiple={multiple}\n              onlyIcon={onlyIcon}\n              name={name}\n              disabled={disabled || itemDisabled}\n            />\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const ChoiceGroup = forwardRef(\n  ChoiceGroupRender,\n) as ChoiceGroupComponent;\n\nexport * from './types';\n", "import {\n  ChoiceGroupDefaultItem,\n  ChoiceGroupPropGetItemDisabled,\n  ChoiceGroupPropGetItemIcon,\n  ChoiceGroupPropGetItemLabel,\n  ChoiceGroupProps,\n} from './types';\n\nconst defaultGetItemLabel: ChoiceGroupPropGetItemLabel<\n  ChoiceGroupDefaultItem\n> = (item) => item.label;\nconst defaultGetItemIcon: ChoiceGroupPropGetItemIcon<ChoiceGroupDefaultItem> = (\n  item,\n) => item.icon;\nconst defaultGetItemDisabled: ChoiceGroupPropGetItemDisabled<\n  ChoiceGroupDefaultItem\n> = (item) => item.disabled;\n\nexport const withDefaultGetters = (props: ChoiceGroupProps) => ({\n  ...props,\n  getItemLabel: props.getItemLabel || defaultGetItemLabel,\n  getItemIcon: props.getItemIcon || defaultGetItemIcon,\n  getItemDisabled: props.getItemDisabled || defaultGetItemDisabled,\n});\n", "import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React, { useState } from 'react';\n\nimport { cnMixFocus } from '../../../mixs/MixFocus/MixFocus';\nimport { cnChoiceGroup } from '../ChoiceGroup';\n\ntype Props = {\n  icon?: IconComponent;\n  onlyIcon?: boolean;\n  iconSize?: IconPropSize;\n  label: string;\n  name: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  checked: boolean;\n  multiple: boolean;\n  disabled?: boolean;\n};\n\nexport const ChoiceGroupItem: React.FC<Props> = (props) => {\n  const {\n    label,\n    onChange,\n    checked,\n    multiple,\n    icon: Icon,\n    onlyIcon,\n    name,\n    iconSize,\n    disabled = false,\n  } = props;\n  const [focus, setFocus] = useState<boolean>(false);\n\n  const handleBlur = () => setFocus(false);\n  const handleFocus = () => setFocus(true);\n\n  return (\n    <label\n      className={cnChoiceGroup('Label', { focus, checked, disabled }, [\n        cnMixFocus(),\n      ])}\n      title={onlyIcon ? label : undefined}\n    >\n      <input\n        type={multiple ? 'checkbox' : 'radio'}\n        className={cnChoiceGroup('Input')}\n        checked={checked}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        value={`${name}-${label}`}\n        onChange={onChange}\n        name={name}\n        disabled={disabled}\n      />\n      {Icon && <Icon className={cnChoiceGroup('Icon')} size={iconSize} />}\n      {!onlyIcon && <span className={cnChoiceGroup('Text')}>{label}</span>}\n    </label>\n  );\n};\n", "import { IconComponent, IconPropSize } from '@consta/icons/Icon';\n\nimport { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';\n\nexport type ChoiceGroupDefaultItem = {\n  label: string;\n  icon?: IconComponent;\n  disabled?: boolean;\n};\n\nexport const choiceGroupForms = ['default', 'brick', 'round'] as const;\nexport type ChoiceGroupPropForm = typeof choiceGroupForms[number];\nexport const choiceGroupDefaultForm: ChoiceGroupPropForm = 'default';\n\nexport const choiceGroupSizes = ['xs', 's', 'm', 'l'] as const;\nexport type ChoiceGroupPropSize = typeof choiceGroupSizes[number];\nexport const choiceGroupDefaultSize: ChoiceGroupPropSize = 'm';\n\nexport const choiceGroupViews = ['primary', 'ghost', 'secondary'] as const;\nexport type ChoiceGroupPropView = typeof choiceGroupViews[number];\nexport const choiceGroupDefaultView: ChoiceGroupPropView = 'primary';\n\nexport const choiceGroupWidth = ['default', 'full'] as const;\nexport type СhoiceGroupPropWidth = typeof choiceGroupWidth[number];\nexport const choiceGroupWidthDefault: СhoiceGroupPropWidth =\n  choiceGroupWidth[0];\n\nexport type ChoiceGroupPropGetItemLabel<ITEM> = (item: ITEM) => string | number;\nexport type ChoiceGroupPropGetItemIcon<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\nexport type ChoiceGroupPropGetItemDisabled<ITEM> = (\n  item: ITEM,\n) => boolean | undefined;\n\nexport type ChoiceGroupPropValue<ITEM, MULTIPLE extends boolean> =\n  | (MULTIPLE extends true ? ITEM[] : ITEM)\n  | null;\n\nexport type ChoiceGroupPropOnChange<ITEM, MULTIPLE extends boolean> = (props: {\n  e: React.ChangeEvent<HTMLInputElement>;\n  value: MULTIPLE extends true ? ITEM[] | null : ITEM;\n}) => void;\n\nexport type ChoiceGroupProps<\n  ITEM = ChoiceGroupDefaultItem,\n  MULTIPLE extends boolean = false,\n> = PropsWithHTMLAttributesAndRef<\n  {\n    size?: ChoiceGroupPropSize;\n    form?: ChoiceGroupPropForm;\n    view?: ChoiceGroupPropView;\n    width?: СhoiceGroupPropWidth;\n    onlyIcon?: boolean;\n    iconSize?: IconPropSize;\n    items: ITEM[];\n    getItemLabel?: ChoiceGroupPropGetItemLabel<ITEM>;\n    getItemIcon?: ChoiceGroupPropGetItemIcon<ITEM>;\n    name: string;\n    disabled?: boolean;\n    getItemDisabled?: ChoiceGroupPropGetItemDisabled<ITEM>;\n    value?: ChoiceGroupPropValue<ITEM, MULTIPLE>;\n    onChange?: ChoiceGroupPropOnChange<ITEM, MULTIPLE>;\n    multiple?: MULTIPLE;\n    truncate?: boolean;\n    children?: never;\n  },\n  HTMLDivElement\n> &\n  (ITEM extends { label: ChoiceGroupDefaultItem['label'] }\n    ? {}\n    : {\n        getItemLabel: ChoiceGroupPropGetItemLabel<ITEM>;\n      });\n\nexport type ChoiceGroupItemProps = {\n  icon?: IconComponent;\n  onlyIcon?: boolean;\n  iconSize?: IconPropSize;\n  label: string;\n  name: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  checked: boolean;\n  multiple: boolean;\n  disabled?: boolean;\n};\n\nexport type ChoiceGroupComponent = <ITEM, MULTIPLE extends boolean = false>(\n  props: ChoiceGroupProps<ITEM, MULTIPLE>,\n) => React.ReactElement | null;\n"],
  "mappings": "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",
  "names": ["import_react", "defaultGetItemLabel", "item", "label", "defaultGetItemIcon", "icon", "defaultGetItemDisabled", "disabled", "withDefaultGetters", "props", "getItemLabel", "getItemIcon", "getItemDisabled", "ChoiceGroupItem", "props", "label", "onChange", "checked", "multiple", "Icon", "icon", "onlyIcon", "name", "iconSize", "disabled", "useState", "focus", "setFocus", "React", "cnChoiceGroup", "cnMixFocus", "handleFocus", "handleBlur", "choiceGroupForms", "choiceGroupDefaultForm", "choiceGroupSizes", "choiceGroupDefaultSize", "choiceGroupViews", "choiceGroupDefaultView", "choiceGroupWidth", "choiceGroupWidthDefault", "sizeMap", "xs", "s", "m", "l", "cnChoiceGroup", "cn", "ChoiceGroupRender", "props", "ref", "withDefaultGetters", "size", "choiceGroupDefaultSize", "form", "choiceGroupDefaultForm", "view", "choiceGroupDefaultView", "width", "choiceGroupWidthDefault", "onlyIcon", "iconSizeProp", "iconSize", "value", "multiple", "items", "getItemLabel", "onChange", "getItemIcon", "name", "className", "disabled", "getItemDisabled", "truncate", "otherProps", "useChoiceGroup", "getKey", "callBack", "getOnChange", "getChecked", "getByMap", "React", "map", "item", "idx", "itemChecked", "itemDisabled", "checked", "toString", "ChoiceGroup", "forwardRef"]
}
