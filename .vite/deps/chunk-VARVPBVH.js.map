{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/hooks/useRefs/useRefs.ts"],
  "sourcesContent": ["import { createRef, useMemo } from 'react';\n\nconst isNotNumber = <T>(value: T): value is Exclude<T, number> =>\n  typeof value !== 'number';\n\ntype Return<\n  T,\n  E extends number | string[] | readonly string[],\n> = E extends string[]\n  ? Record<E[number], React.RefObject<T>>\n  : E extends readonly string[]\n  ? Record<E[number], React.RefObject<T>>\n  : Array<React.RefObject<T>>;\n\nexport const useRefs = <\n  T,\n  E extends number | string[] | readonly string[] = number,\n>(\n  elements: E,\n  deps: unknown[] = [],\n): Return<T, E> =>\n  useMemo(() => {\n    if (isNotNumber(elements)) {\n      const obj: Record<string, React.RefObject<T>> = {};\n      for (let index = 0; index < elements.length; index++) {\n        obj[elements[index]] = createRef<T>();\n      }\n\n      return obj as Return<T, E>;\n    }\n\n    return new Array(elements as number)\n      .fill(null)\n      .map(() => createRef<T>()) as unknown as Return<T, E>;\n  }, [typeof elements === 'number' ? elements : elements.join('-'), ...deps]);\n"],
  "mappings": ";;;;;;;;;;;AAAA,mBAAmC;AAEnC,IAAMA,cAAc,SAAIC,GAAJ;AAAA,SACD,YAAjB,OAAOA;AADW;AAYb,IAAMC,UAAU,SAIrBC,GAJqB;AAAA,MAKrBC,IALqB,IAAA,UAAA,UAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAKH,CAAA;AALG,aAOrBC,sBAAQ,WAAM;AACZ,QAAIL,YAAYG,CAAD,GAAY;AAEzB,eADMG,KAA0C,CAAA,GACvCC,IAAQ,GAAGA,IAAQJ,EAASK,QAAQD;AAC3CD,QAAAA,GAAIH,EAASI,CAAD,CAAT,QAAoBE,wBAAS;AAGlC,aAAOH;IACR;AAED,WAAWI,MAAMP,CAAV,EACJQ,KAAK,IADD,EAEJC,IAAI,WAAA;AAAA,iBAAMH,wBAAS;IAAf,CAFA;EAGR,GAbM,CAaiB,YAApB,OAAON,IAAwBA,IAAWA,EAASU,KAAK,GAAd,CAbvC,EAAA,OAAA,mBAa8DT,CAb9D,CAAA,CAAA;AAPc;",
  "names": ["isNotNumber", "value", "useRefs", "elements", "deps", "useMemo", "obj", "index", "length", "createRef", "Array", "fill", "map", "join"]
}
