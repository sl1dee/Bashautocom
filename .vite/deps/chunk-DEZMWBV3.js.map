{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/hooks/useSelect/useSelect.ts", "../../node_modules/@consta/src/hooks/useKeys/useKeys.tsx", "../../node_modules/@consta/src/hooks/usePrevious/usePrevious.ts", "../../node_modules/@consta/src/hooks/useSelect/helpers.ts", "../../node_modules/compute-scroll-into-view/src/index.ts", "../../node_modules/@consta/src/utils/scrollIntoView.ts", "../../node_modules/@consta/src/components/SelectComponents/cnSelect.ts", "../../node_modules/@consta/src/components/SelectComponents/helpers.ts", "../../node_modules/@consta/src/components/SelectComponents/types.ts", "../../node_modules/@consta/src/components/SelectComponents/SelectContainer/SelectContainer.tsx", "../../node_modules/@consta/src/components/SelectComponents/SelectItem/SelectItem.tsx", "../../node_modules/@consta/src/components/SelectComponents/SelectDropdown/SelectDropdown.tsx", "../../node_modules/@consta/src/utils/fabricIndex.ts", "../../node_modules/@consta/src/components/SelectComponents/SelectCreateButton/SelectCreateButton.tsx", "../../node_modules/@consta/src/components/SelectComponents/SelectGroupLabel/SelectGroupLabel.tsx", "../../node_modules/@consta/src/components/SelectComponents/SelectItemAll/SelectSelectAll.tsx", "../../node_modules/@consta/src/components/SelectComponents/SelectLoader/SelectLoader.tsx"],
  "sourcesContent": ["import React, { useEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n  CountedGroup,\n  getCountedGroups,\n  getGroups,\n  SelectAllItem,\n} from '../../utils/getGroups';\nimport { useClickOutside } from '../useClickOutside/useClickOutside';\nimport { useDebounce } from '../useDebounce/useDebounce';\nimport { KeyHandler, useKeys } from '../useKeys/useKeys';\nimport { usePrevious } from '../usePrevious/usePrevious';\nimport { scrollToIndex, useHoistedState } from './helpers';\n\ntype IndexForHighlight = number | ((oldIndex: number) => number);\n\ntype Group<ITEM, GROUP> = {\n  items: ITEM[];\n  key: string | number;\n  group?: GROUP;\n};\ntype GetItemGroupKey<ITEM> = (item: ITEM) => string | number | undefined;\ntype GetGroupKey<GROUP> = (item: GROUP) => string | number | undefined;\ntype SortGroups<ITEM, GROUP> = (\n  a: Group<ITEM, GROUP>,\n  b: Group<ITEM, GROUP>,\n) => number;\n\ntype OnChangeProp<ITEM, MULTIPLE extends boolean> = (props: {\n  value: (MULTIPLE extends true ? ITEM[] : ITEM) | null;\n  e: React.SyntheticEvent;\n}) => void;\n\ntype ValueProp<ITEM, MULTIPLE extends boolean> =\n  | (MULTIPLE extends true ? ITEM[] : ITEM)\n  | null\n  | undefined;\n\nexport type OptionForCreate = {\n  label: string;\n  __optionForCreate: boolean;\n};\n\nexport type SelectProps<ITEM, GROUP, MULTIPLE extends boolean> = {\n  getItemGroupKey?: GetItemGroupKey<ITEM> | undefined;\n  getGroupKey?: GetGroupKey<GROUP>;\n  sortGroups?: SortGroups<ITEM, GROUP>;\n  groups?: GROUP[];\n  items: ITEM[];\n  dropdownRef: React.MutableRefObject<HTMLDivElement | null>;\n  controlRef: React.MutableRefObject<HTMLDivElement | null>;\n  disabled?: boolean;\n  selectAll?: boolean;\n  getItemLabel: (item: ITEM) => string;\n  getItemKey: (item: ITEM) => string | number;\n  getItemDisabled?: (item: ITEM) => boolean | undefined;\n  searchFunction?: (item: ITEM, searchValue: string) => boolean;\n  onCreate?: (props: { e: React.SyntheticEvent; label: string }) => void;\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n  multiple: boolean;\n  searchValue?: string;\n  withoutClearSearch?: boolean;\n  onChange: OnChangeProp<ITEM, MULTIPLE>;\n  value: ValueProp<ITEM, MULTIPLE>;\n};\n\nexport type OptionProps<ITEM> = {\n  index: number;\n  item: ITEM | OptionForCreate | SelectAllItem;\n};\n\nexport type GetOptionPropsResult = {\n  onClick: (e: React.SyntheticEvent) => void;\n  onMouseEnter: (e: React.SyntheticEvent) => void;\n  active: boolean;\n  hovered: boolean;\n  key: string | number;\n};\n\nconst isMultipleParams = <ITEM, GROUP>(\n  params: SelectProps<ITEM, GROUP, boolean>,\n): params is SelectProps<ITEM, GROUP, true> => {\n  return params.multiple;\n};\n\nconst isNotMultipleParams = <ITEM, GROUP>(\n  params: SelectProps<ITEM, GROUP, boolean>,\n): params is SelectProps<ITEM, GROUP, false> => {\n  return !params.multiple;\n};\n\nconst actions = {\n  setOpen: 'setOpen',\n  setSearch: 'setSearch',\n  highlightIndex: 'highlightIndex',\n};\n\nconst initialState = {\n  searchValue: '',\n  resolvedSearchValue: '',\n  isOpen: false,\n  highlightedIndex: 0,\n  scrollToHighlighted: false,\n};\n\nexport const isOptionForCreate = <ITEM, GROUP>(\n  params: OptionForCreate | Group<ITEM, GROUP> | ITEM,\n): params is OptionForCreate => {\n  return (\n    params && Object.prototype.hasOwnProperty.call(params, '__optionForCreate')\n  );\n};\n\nexport const isOptionForSelectAll = <ITEM, GROUP>(\n  params: SelectAllItem | Group<ITEM, GROUP> | ITEM,\n): params is SelectAllItem => {\n  return (\n    params && Object.prototype.hasOwnProperty.call(params, '__optionSelctAll')\n  );\n};\n\nexport function useSelect<ITEM, GROUP, MULTIPLE extends boolean>(\n  params: SelectProps<ITEM, GROUP, MULTIPLE>,\n) {\n  const {\n    items,\n    dropdownRef,\n    controlRef,\n    disabled = false,\n    multiple = false,\n    getItemLabel,\n    getItemKey,\n    searchFunction,\n    getItemGroupKey,\n    groups,\n    selectAll = false,\n    getGroupKey,\n    sortGroups,\n    getItemDisabled,\n    onFocus,\n    onBlur,\n    searchValue: searchValueProp,\n    withoutClearSearch,\n  } = params;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const value =\n    (params.value &&\n      (Array.isArray(params.value) ? params.value : [params.value])) ||\n    [];\n\n  const [\n    {\n      searchValue,\n      isOpen,\n      highlightedIndex,\n      resolvedSearchValue,\n      scrollToHighlighted,\n    },\n    setState,\n  ] = useHoistedState(initialState);\n\n  const searchFunctionDefault = (item: ITEM, searchValue: string) =>\n    getItemLabel(item)\n      .toLocaleLowerCase()\n      .indexOf(searchValue.toLocaleLowerCase()) !== -1;\n\n  const [filteredOptions, optionForCreate] = React.useMemo(() => {\n    if (resolvedSearchValue && resolvedSearchValue !== '') {\n      const fiteredOptions = items.filter((item) =>\n        searchFunction\n          ? searchFunction(item, resolvedSearchValue)\n          : searchFunctionDefault(item, resolvedSearchValue),\n      );\n\n      const matchWithValueSearch = Boolean(\n        items.find(\n          (option) =>\n            getItemLabel(option).toString().toLowerCase() ===\n            resolvedSearchValue.toLocaleLowerCase(),\n        ),\n      );\n\n      const optionForCreate: OptionForCreate = {\n        label: searchValue,\n        __optionForCreate: true,\n      };\n\n      return [\n        fiteredOptions,\n        params.onCreate && !matchWithValueSearch ? optionForCreate : undefined,\n      ] as const;\n    }\n    return [items, undefined] as const;\n  }, [items, resolvedSearchValue]);\n\n  const visibleItems = useMemo(() => {\n    const resultGroups = getCountedGroups(\n      getGroups(\n        filteredOptions,\n        groups?.length ? getItemGroupKey : undefined,\n        groups,\n        getGroupKey,\n        sortGroups,\n      ),\n      isMultipleParams(params) ? params.value : [],\n      selectAll,\n      getItemKey,\n      getItemDisabled,\n    );\n\n    return optionForCreate ? [optionForCreate, ...resultGroups] : resultGroups;\n  }, [\n    value,\n    selectAll,\n    filteredOptions,\n    groups,\n    getItemGroupKey,\n    getItemDisabled,\n    getGroupKey,\n    sortGroups,\n    optionForCreate,\n  ]);\n\n  const notFound = useMemo(() => {\n    let flag = false;\n    if (searchValue.length > 0) {\n      flag =\n        visibleItems.filter(\n          (group) =>\n            isOptionForCreate(group) || group.items.length > 0 || group.group,\n        ).length === 0 && !params.onCreate;\n    }\n    return flag;\n  }, [visibleItems]);\n\n  const hasItems = items.length !== 0;\n\n  const getSelectedOptionIndex = (): number => {\n    let index = 0;\n    if (value.length > 0) {\n      for (const group of visibleItems) {\n        if (isOptionForCreate(group)) {\n          index++;\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        for (const item of group.items) {\n          if (isOptionForSelectAll(item)) {\n            return index;\n          }\n          if (getItemKey(item) === getItemKey(value[0])) {\n            return index;\n          }\n          index++;\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  // Actions\n\n  const setOpen = React.useCallback(\n    (newIsOpen: boolean) => {\n      setState(\n        (old) => ({\n          ...old,\n          isOpen: newIsOpen,\n        }),\n        actions.setOpen,\n      );\n    },\n    [setState],\n  );\n\n  const setResolvedSearch = useDebounce((value: string) => {\n    setState(\n      (old) => ({\n        ...old,\n        resolvedSearchValue: value,\n      }),\n      actions.setSearch,\n    );\n  }, 300);\n\n  const setSearch = React.useCallback(\n    (value: string | undefined) => {\n      setState(\n        (old) => ({\n          ...old,\n          searchValue: value || '',\n        }),\n        actions.setSearch,\n      );\n      setResolvedSearch(value || '');\n    },\n    [setState, setResolvedSearch],\n  );\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  React.useLayoutEffect(() => {\n    if (value !== null && !prevIsOpen && isOpen) {\n      const currentHighlightIndex = getSelectedOptionIndex();\n      if (filteredOptions.length > 0) {\n        scrollToIndex(currentHighlightIndex, dropdownRef);\n      }\n    }\n  });\n\n  const highlightIndex = React.useCallback(\n    (indexForHighlight: IndexForHighlight, scrollToHighlighted: boolean) => {\n      setState((old) => {\n        return {\n          ...old,\n          highlightedIndex: Math.min(\n            Math.max(\n              0,\n              typeof indexForHighlight === 'function'\n                ? indexForHighlight(old.highlightedIndex)\n                : indexForHighlight,\n            ),\n            optionForCreate\n              ? filteredOptions.length\n              : filteredOptions.length - 1,\n          ),\n          scrollToHighlighted,\n        };\n      }, actions.highlightIndex);\n    },\n    [filteredOptions, setState, optionForCreate],\n  );\n\n  const removeValue = (e: React.SyntheticEvent, valueItem: ITEM) => {\n    e.stopPropagation();\n    if (isMultipleParams(params)) {\n      const newValue = params.value?.filter(\n        (item) => getItemKey(item) !== getItemKey(valueItem),\n      );\n      params.onChange({\n        e,\n        value: newValue?.length ? newValue : null,\n      });\n    }\n  };\n\n  const onChange = (e: React.SyntheticEvent, item: ITEM) => {\n    if (getItemDisabled && getItemDisabled(item)) {\n      return;\n    }\n    if (isMultipleParams(params)) {\n      const newValue = value.some(\n        (value) => getItemKey(value) === getItemKey(item),\n      )\n        ? value.filter((value) => getItemKey(value) !== getItemKey(item))\n        : [...value, item];\n      params.onChange({ value: newValue.length ? newValue : null, e });\n    }\n    if (isNotMultipleParams(params)) {\n      params.onChange({ value: item, e });\n      setOpen(false);\n    }\n    !withoutClearSearch && setSearch('');\n  };\n\n  const onChangeAll = (parametrs: {\n    e: React.SyntheticEvent;\n    items: ITEM[];\n  }) => {\n    const { e, items } = parametrs;\n    if (isMultipleParams(params)) {\n      const nonDisabledItems = getItemDisabled\n        ? items.filter((item) => !getItemDisabled(item))\n        : items;\n\n      const currentGroupValues: ITEM[] = [];\n      const withoutGroupValues: ITEM[] = [];\n      value.forEach((el) => {\n        if (\n          nonDisabledItems.find((item) => getItemKey(el) === getItemKey(item))\n        ) {\n          currentGroupValues.push(el);\n        } else {\n          withoutGroupValues.push(el);\n        }\n      });\n      if (currentGroupValues.length === nonDisabledItems.length) {\n        params.onChange({ value: withoutGroupValues, e });\n      } else {\n        params.onChange({\n          e,\n          value: [...withoutGroupValues, ...nonDisabledItems],\n        });\n      }\n    }\n  };\n\n  const onCreate = (e: React.SyntheticEvent, label: string) => {\n    params.onCreate && params.onCreate({ e, label });\n    setOpen(false);\n    !withoutClearSearch && setSearch('');\n  };\n\n  // Handlers\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!disabled && !(!multiple && value.length > 0)) {\n      setSearch(e.target.value);\n      setOpen(true);\n    }\n  };\n\n  const handleInputClick = (): void => {\n    !disabled && setOpen(!isOpen);\n\n    if (multiple) {\n      inputRef.current?.focus();\n    }\n  };\n\n  const clearValue = (e: React.SyntheticEvent) => {\n    !withoutClearSearch && setSearch('');\n    if (isMultipleParams(params)) {\n      const results = value?.filter((item) => getItemDisabled?.(item));\n      params.onChange({\n        value: results && results.length > 0 ? results : null,\n        e,\n      });\n    }\n    if (isNotMultipleParams(params)) {\n      params.onChange({ value: null, e });\n    }\n  };\n\n  const getHandleRemoveValue = (item: ITEM) => (e: React.SyntheticEvent) =>\n    removeValue(e, item);\n\n  // Prop Getters\n\n  const ArrowUp: KeyHandler = (_, e): void => {\n    e.preventDefault();\n    !disabled && setOpen(true);\n    highlightIndex((old) => old - 1, true);\n  };\n\n  const ArrowDown: KeyHandler = (_, e): void => {\n    e.preventDefault();\n    !disabled && setOpen(true);\n    highlightIndex((old) => old + 1, true);\n  };\n\n  const Enter: KeyHandler = (_, e): void => {\n    if (isOpen) {\n      if (searchValue || filteredOptions[highlightedIndex]) {\n        e.preventDefault();\n      }\n\n      const getData = (\n        index: number,\n      ): [\n        CountedGroup<ITEM, GROUP> | undefined,\n        SelectAllItem | OptionForCreate | ITEM | undefined,\n      ] => {\n        let couter = 0;\n        for (const group of visibleItems) {\n          if (isOptionForCreate(group)) {\n            couter++;\n            return [undefined, group];\n          }\n          if (group.items.length + couter > index) {\n            return [group, group.items[index - couter]];\n          }\n          couter += group.items.length;\n        }\n        return [undefined, undefined];\n      };\n\n      const [group, item] = getData(highlightedIndex);\n\n      if (isOptionForCreate(item)) {\n        onCreate(e, item.label);\n        return;\n      }\n\n      if (isOptionForSelectAll(item)) {\n        onChangeAll({\n          e,\n          items:\n            (group?.items.filter(\n              (el) => !isOptionForSelectAll(el),\n            ) as ITEM[]) ?? [],\n        });\n        return;\n      }\n\n      if (item) {\n        onChange(e, item);\n      }\n    }\n  };\n\n  const Escape = (): void => {\n    setOpen(false);\n  };\n\n  const Tab = (): void => {\n    setOpen(false);\n  };\n\n  const Backspace: KeyHandler = (_, e): void => {\n    if (searchValue) {\n      return;\n    }\n    if (multiple) {\n      removeValue(e, value[value.length - 1]);\n    } else {\n      clearValue(e);\n    }\n  };\n\n  const getKeyProps = useKeys({\n    ArrowUp,\n    ArrowDown,\n    PageUp: ArrowUp,\n    PageDown: ArrowDown,\n    Home: ArrowUp,\n    End: ArrowDown,\n    Enter,\n    Escape,\n    Tab,\n    Backspace,\n  });\n\n  const getOptionProps = ({\n    index,\n    item,\n  }: OptionProps<ITEM>): GetOptionPropsResult => {\n    if (isOptionForCreate(item)) {\n      return {\n        onClick: (e: React.SyntheticEvent) => {\n          onCreate(e, item.label);\n        },\n        onMouseEnter: () => {\n          highlightIndex(index, false);\n        },\n        active: false,\n        hovered: index === highlightedIndex,\n        key: '__optionForCreate',\n      };\n    }\n    if (isOptionForSelectAll(item)) {\n      const getItems = (): ITEM[] => {\n        for (const group of visibleItems) {\n          if (isOptionForCreate(group)) {\n            break;\n          }\n          if (group.key === item.groupKey) {\n            return (\n              (group?.items.filter(\n                (el) => !isOptionForSelectAll(el),\n              ) as ITEM[]) ?? []\n            );\n          }\n        }\n        return [];\n      };\n      return {\n        onClick: (e: React.SyntheticEvent) => {\n          onChangeAll({ e, items: getItems() });\n        },\n        onMouseEnter: () => {\n          highlightIndex(index, false);\n        },\n        active: false,\n        hovered: index === highlightedIndex,\n        key: '__optionForSelectAll',\n      };\n    }\n    const key = getItemKey(item);\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        onChange(e, item);\n      },\n      onMouseEnter: () => {\n        highlightIndex(index, false);\n      },\n      active: Boolean(value.find((item) => getItemKey(item) === key)),\n      hovered: index === highlightedIndex,\n      key,\n    };\n  };\n\n  useClickOutside({\n    isActive: isOpen,\n    ignoreClicksInsideRefs: [dropdownRef, controlRef],\n    handler: () => {\n      setOpen(false);\n    },\n  });\n\n  React.useEffect(() => {\n    if (disabled) {\n      setOpen(false);\n    }\n  }, [disabled]);\n\n  React.useEffect(() => {\n    const currentHighlightIndex = getSelectedOptionIndex();\n    highlightIndex(currentHighlightIndex, true);\n  }, [highlightIndex]);\n\n  React.useEffect(() => {\n    if (filteredOptions.length > 0 && scrollToHighlighted) {\n      scrollToIndex(highlightedIndex, dropdownRef);\n    }\n  }, [highlightedIndex]);\n\n  const handleInputFocus = (e: React.FocusEvent<HTMLInputElement>): void => {\n    if (!disabled) {\n      if (!isFocused) {\n        setIsFocused(true);\n      }\n      if (typeof onFocus === 'function') {\n        onFocus(e);\n      }\n    }\n  };\n\n  const handleInputBlur = (e: React.FocusEvent<HTMLInputElement>): void => {\n    if (isOpen) {\n      inputRef.current?.focus();\n      return;\n    }\n\n    if (isFocused) {\n      setIsFocused(false);\n    }\n\n    if (typeof onBlur === 'function') {\n      onBlur(e);\n    }\n  };\n\n  const handleToggleDropdown = (): void => {\n    if (isOpen) {\n      setOpen(false);\n      setIsFocused(false);\n    } else {\n      setOpen(true);\n      setIsFocused(true);\n      inputRef.current?.focus();\n    }\n  };\n\n  useEffect(() => {\n    setSearch(searchValueProp);\n  }, [searchValueProp]);\n\n  return {\n    isOpen,\n    isFocused,\n    highlightedIndex,\n    visibleItems,\n    highlightIndex,\n    getOptionProps,\n    handleInputFocus,\n    handleInputBlur,\n    handleToggleDropdown,\n    handleInputClick,\n    inputRef,\n    getKeyProps,\n    handleInputChange,\n    searchValue,\n    clearValue,\n    getHandleRemoveValue,\n    notFound,\n    hasItems,\n  };\n}\n", "export type KeyHandler = (\n  prop: Record<string, unknown>,\n  e: React.KeyboardEvent,\n) => void;\n\nexport type KeyProps = {\n  onKeyDown?: (e: React.KeyboardEvent) => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onClick?: (e: React.MouseEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n};\n\nexport type UserKeysProps = {\n  [key: string]: (\n    prop: { keyCode: number; key: string; shift: boolean; meta: boolean },\n    e: React.KeyboardEvent<Element>,\n  ) => void;\n};\n\nexport const useKeys = (userKeys: UserKeysProps) => {\n  return (rest?: KeyProps): KeyProps => {\n    return {\n      ...rest,\n      onKeyDown: (e: React.KeyboardEvent): void => {\n        const { keyCode, key, shiftKey: shift, metaKey: meta } = e;\n        const handler = userKeys[key] || userKeys[keyCode];\n        if (typeof handler === 'function') {\n          handler(\n            {\n              keyCode,\n              key,\n              shift,\n              meta,\n            },\n            e,\n          );\n        }\n        if (typeof rest?.onKeyDown === 'function') {\n          rest.onKeyDown(e);\n        }\n      },\n    };\n  };\n};\n", "import React from 'react';\n\nexport function usePrevious<T>(value: T): T {\n  const ref = React.useRef(value);\n\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n", "import React from 'react';\n\nimport { scrollIntoView } from '../../utils/scrollIntoView';\n\n// useHoistedState\n\ntype State = {\n  searchValue: string;\n  resolvedSearchValue: string;\n  isOpen: boolean;\n  highlightedIndex: number;\n  scrollToHighlighted: boolean;\n};\ntype Action = string;\ntype Reducer = (state: State, newState: State, action: Action) => State;\ntype Updater = (state: State) => State;\n\nexport function useHoistedState(\n  initialState: State,\n): [State, (updater: Updater, action: Action) => void] {\n  const reducerRef = React.useRef<Reducer>((old, newState) => newState);\n  const [state, _setState] = React.useState<State>(initialState);\n  const setState = React.useCallback(\n    (updater: Updater, action: Action) => {\n      if (!action) {\n        throw new Error('An action type is required to update the state');\n      }\n      return _setState((old) => reducerRef.current(old, updater(old), action));\n    },\n    [_setState],\n  );\n  return [state, setState];\n}\n\n// scrollToIndex\n\ntype ScrollToIndexFunctionType = (\n  optionIndex: number,\n  dropdownRef: React.MutableRefObject<HTMLDivElement | null>,\n) => void;\n\nexport const scrollToIndex: ScrollToIndexFunctionType = (\n  index,\n  dropdownRef,\n): void => {\n  if (!dropdownRef.current) {\n    return;\n  }\n\n  const elements: NodeListOf<HTMLDivElement> =\n    dropdownRef.current.querySelectorAll('div[role=option]');\n\n  scrollIntoView(elements[index], dropdownRef.current);\n};\n", "// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n// add support for visualViewport object currently implemented in chrome\ninterface visualViewport {\n  height: number\n  width: number\n}\n\ntype ScrollLogicalPosition = 'start' | 'center' | 'end' | 'nearest'\n// This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\ntype ScrollMode = 'always' | 'if-needed'\n// New option that skips auto-scrolling all nodes with overflow: hidden set\n// See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\ntype SkipOverflowHiddenElements = boolean\n\ninterface Options {\n  block?: ScrollLogicalPosition\n  inline?: ScrollLogicalPosition\n  scrollMode?: ScrollMode\n  boundary?: CustomScrollBoundary\n  skipOverflowHiddenElements?: SkipOverflowHiddenElements\n}\n\n// Custom behavior, not in any spec\ntype CustomScrollBoundaryCallback = (parent: Element) => boolean\ntype CustomScrollBoundary = Element | CustomScrollBoundaryCallback | null\ninterface CustomScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nfunction isElement(el: any): el is Element {\n  return typeof el === 'object' && el != null && el.nodeType === 1\n}\n\nfunction canOverflow(\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nfunction getFrameElement(el: Element) {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nfunction isHiddenByFrame(el: Element): boolean {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nfunction isScrollable(el: Element, skipOverflowHiddenElements?: boolean) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nfunction alignNearest(\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nfunction getParentElement(element: Node): Element | null {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nexport default (target: Element, options: Options): CustomScrollAction[] => {\n  //TODO: remove this hack when microbundle will support typescript >= 4.0\n  const windowWithViewport = window as unknown as Window & {\n    visualViewport: visualViewport\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.width\n    : innerWidth\n  const viewportHeight = windowWithViewport.visualViewport\n    ? windowWithViewport.visualViewport.height\n    : innerHeight\n\n  // Newer browsers supports scroll[X|Y], page[X|Y]Offset is\n  const viewportX = window.scrollX || pageXOffset\n  const viewportY = window.scrollY || pageYOffset\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: CustomScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          viewportY,\n          viewportY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          viewportY + targetBlock,\n          viewportY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          viewportX,\n          viewportX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          viewportX + targetInline,\n          viewportX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + viewportY)\n      inlineScroll = Math.max(0, inlineScroll + viewportX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n", "import computeScrollIntoView from 'compute-scroll-into-view';\n\nexport function scrollIntoView(\n  node: HTMLDivElement,\n  menuNode: HTMLDivElement,\n): void {\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  });\n  actions.forEach((action) => {\n    const { el, top, left } = action;\n    el.scrollTop = top;\n    el.scrollLeft = left;\n  });\n}\n", "import './Select.css';\n\nimport { cn } from '../../utils/bem';\n\nexport const COMPONENT_NAME = 'Select' as const;\nexport const cnSelect = cn(COMPONENT_NAME);\n", "export const defaultlabelForNotFound = 'Не найдено';\nexport const defaultlabelForCreate = '';\nexport const defaultLabelForEmptyItems = 'Список пуст';\n\nexport const getInputWidth = (\n  controlInnerRef: React.RefObject<HTMLDivElement>,\n  helperInputFakeElement: React.RefObject<HTMLDivElement>,\n): number => {\n  if (!controlInnerRef.current || !helperInputFakeElement.current) {\n    return 20;\n  }\n  const fakeElWidth = helperInputFakeElement.current.offsetWidth + 20;\n  const maxWidth = controlInnerRef.current\n    ? controlInnerRef.current.offsetWidth - 15\n    : 2;\n  const width = fakeElWidth > maxWidth ? maxWidth : fakeElWidth;\n  return width;\n};\n", "import { RefObject } from 'react';\n\nexport const propSize = ['m', 'xs', 's', 'l'] as const;\nexport type PropSize = typeof propSize[number];\nexport const defaultPropSize = propSize[0];\n\nexport const propForm = [\n  'default',\n  'defaultClear',\n  'defaultBrick',\n  'brick',\n  'brickDefault',\n  'brickClear',\n  'brickRound',\n  'round',\n  'roundClear',\n  'roundBrick',\n  'clearRound',\n  'clearDefault',\n  'clearBrick',\n  'clearClear',\n] as const;\nexport type PropForm = typeof propForm[number];\nexport const defaultPropForm = propForm[0];\n\nexport const propView = ['default', 'clear'] as const;\nexport type PropView = typeof propView[number];\nexport const defaultPropView = propView[0];\n\nexport const propStatus = ['alert', 'warning', 'success'] as const;\nexport type PropStatus = typeof propStatus[number];\n\nexport type CommonSelectProps<ITEM> = {\n  options: ITEM[];\n  id: string;\n  placeholder?: string;\n  ariaLabel?: string;\n  getOptionLabel(arg: ITEM): string;\n  getOptionKey?(arg: ITEM): string | number;\n  onBlur?: (event?: React.FocusEvent<HTMLInputElement>) => void;\n  onFocus?: (event?: React.FocusEvent<HTMLInputElement>) => void;\n  children?: never;\n  dropdownClassName?: string;\n  dropdownRef?: RefObject<HTMLDivElement>;\n  name?: string;\n};\n\nexport type RenderItemProps<ITEM> = {\n  item: ITEM;\n  active: boolean;\n  hovered: boolean;\n  onClick: (e: React.SyntheticEvent) => void;\n  onMouseEnter: (e: React.SyntheticEvent) => void;\n};\n", "import { IconComponent } from '@consta/icons/Icon';\nimport React, { forwardRef } from 'react';\n\nimport { PropsWithHTMLAttributesAndRef } from '../../../utils/types/PropsWithHTMLAttributes';\nimport { FieldCaption } from '../../FieldCaption/FieldCaption';\nimport { FieldLabel } from '../../FieldLabel/FieldLabel';\nimport { cnSelect } from '../cnSelect';\nimport {\n  defaultPropForm,\n  defaultPropSize,\n  defaultPropView,\n  PropForm,\n  PropSize,\n  PropStatus,\n  PropView,\n} from '../types';\n\nexport type SelectContainerProps = PropsWithHTMLAttributesAndRef<\n  {\n    disabled?: boolean;\n    form?: PropForm;\n    size?: PropSize;\n    view?: PropView;\n    focused?: boolean;\n    multiple?: boolean;\n    required?: boolean;\n    status?: PropStatus;\n    label?: string;\n    labelIcon?: IconComponent;\n    type?: 'select' | 'combobox' | 'userselect';\n    labelPosition?: 'top' | 'left';\n    caption?: string;\n  },\n  HTMLDivElement\n>;\n\nexport const SelectContainer = forwardRef<HTMLDivElement, SelectContainerProps>(\n  (props, ref) => {\n    const {\n      size = defaultPropSize,\n      form = defaultPropForm,\n      view = defaultPropView,\n      className,\n      disabled,\n      required,\n      children,\n      status,\n      focused,\n      id,\n      multiple,\n      type = 'select',\n      labelPosition = 'top',\n      label,\n      labelIcon,\n      caption,\n      ...otherProps\n    } = props;\n\n    return (\n      <div\n        className={cnSelect({ labelPosition, size, view, type }, [className])}\n        {...otherProps}\n      >\n        {label && (\n          <FieldLabel\n            icon={labelIcon}\n            as=\"label\"\n            required={required}\n            htmlFor={id}\n            className={cnSelect('Label', { labelPosition })}\n            size={size}\n          >\n            {label}\n          </FieldLabel>\n        )}\n        <div className={cnSelect('Body')}>\n          <div\n            className={cnSelect('SelectContainer', {\n              view,\n              form,\n              disabled,\n              focused,\n              multiple,\n              status,\n            })}\n            ref={ref}\n          >\n            {children}\n          </div>\n          {caption && (\n            <FieldCaption className={cnSelect('Caption')} status={status}>\n              {caption}\n            </FieldCaption>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n", "import './SelectItem.css';\n\nimport React from 'react';\n\nimport { ListItem } from '##/components/ListCanary';\nimport { cn } from '##/utils/bem';\n\nimport { PropsWithHTMLAttributes } from '../../../utils/types/PropsWithHTMLAttributes';\nimport { Checkbox, CheckboxPropSize } from '../../Checkbox/Checkbox';\nimport { PropSize } from '../types';\n\nexport type SelectItemProps = PropsWithHTMLAttributes<\n  {\n    label: string;\n    active: boolean;\n    hovered: boolean;\n    multiple: boolean;\n    size: PropSize;\n    indent: 'normal' | 'increased';\n    disabled: boolean | undefined;\n  },\n  HTMLDivElement\n>;\n\nexport const sizeCheckboxMap: Record<PropSize, CheckboxPropSize> = {\n  xs: 'm',\n  s: 'm',\n  m: 'l',\n  l: 'l',\n};\n\nexport const cnSelectItem = cn('SelectItem');\n\nexport const SelectItem: React.FC<SelectItemProps> = (props) => {\n  const {\n    className,\n    label,\n    active,\n    hovered,\n    multiple,\n    size,\n    indent,\n    disabled,\n    ...otherProps\n  } = props;\n\n  return (\n    <ListItem\n      {...otherProps}\n      className={cnSelectItem(null, [className])}\n      aria-selected={active}\n      aria-disabled={disabled}\n      role=\"option\"\n      label={label}\n      innerOffset={indent}\n      size={size}\n      active={hovered}\n      checked={!multiple && active}\n      disabled={disabled}\n      leftSide={\n        multiple && (\n          <Checkbox\n            checked={active}\n            disabled={disabled}\n            size={sizeCheckboxMap[size]}\n          />\n        )\n      }\n    >\n      {label}\n    </ListItem>\n  );\n};\n", "import './SelectDropdown.css';\n\nimport React, { Fragment, useMemo, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\n\nimport {\n  cnListBox,\n  ListItem,\n  mapVerticalSpase,\n} from '##/components/ListCanary';\nimport { cnMixSpace } from '##/mixs/MixSpace';\nimport { SelectAllItem } from '##/utils/getGroups';\n\nimport {\n  GetOptionPropsResult,\n  isOptionForCreate,\n  isOptionForSelectAll,\n  OptionForCreate,\n  OptionProps,\n} from '../../../hooks/useSelect/useSelect';\nimport {\n  animateTimeout,\n  cnMixPopoverAnimate,\n} from '../../../mixs/MixPopoverAnimate/MixPopoverAnimate';\nimport { cn } from '../../../utils/bem';\nimport { fabricIndex } from '../../../utils/fabricIndex';\nimport { PropsWithJsxAttributes } from '../../../utils/types/PropsWithJsxAttributes';\nimport { Popover, PopoverPropOffset } from '../../Popover/Popover';\nimport { SelectCreateButton } from '../SelectCreateButton/SelectCreateButton';\nimport { SelectGroupLabel } from '../SelectGroupLabel/SelectGroupLabel';\nimport { SelectItemAll } from '../SelectItemAll/SelectSelectAll';\nimport { SelectLoader } from '../SelectLoader/SelectLoader';\nimport { PropSize, RenderItemProps } from '../types';\n\nexport const selectDropdownform = ['default', 'brick', 'round'] as const;\nexport type SelectDropdownPropForm = typeof selectDropdownform[number];\nexport const defaultSelectDropdownPropForm = selectDropdownform[0];\n\ntype Props<ITEM, GROUP> = PropsWithJsxAttributes<{\n  size: PropSize;\n  controlRef: React.MutableRefObject<HTMLDivElement | null>;\n  dropdownRef: React.Ref<HTMLDivElement>;\n  getOptionProps(props: OptionProps<ITEM>): GetOptionPropsResult;\n  form: SelectDropdownPropForm;\n  isOpen: boolean;\n  offset?: PopoverPropOffset | 'none';\n  isLoading?: boolean;\n  renderItem: (props: RenderItemProps<ITEM>) => JSX.Element | null;\n  visibleItems: (\n    | OptionForCreate\n    | {\n        items: Array<SelectAllItem | ITEM>;\n        key: string | number;\n        group?: GROUP;\n        groupIndex: number;\n        checkedCount?: number;\n        totalCount?: number;\n      }\n  )[];\n  getGroupLabel?: (group: GROUP) => string;\n  labelForCreate?: string;\n  labelForNotFound?: string;\n  labelForEmptyItems?: string;\n  notFound?: boolean;\n  hasItems?: boolean;\n}>;\n\ntype SelectDropdown = <ITEM, GROUP>(\n  props: Props<ITEM, GROUP>,\n) => React.ReactElement | null;\n\nconst cnSelectDropdown = cn('SelectDropdown');\n\nexport const SelectDropdown: SelectDropdown = (props) => {\n  const {\n    controlRef,\n    size,\n    getOptionProps,\n    dropdownRef,\n    labelForCreate,\n    className,\n    labelForNotFound,\n    labelForEmptyItems,\n    hasItems = true,\n    form,\n    isOpen,\n    offset: offsetProp = 'none',\n    renderItem,\n    visibleItems,\n    isLoading,\n    getGroupLabel,\n    notFound,\n    ...otherProps\n  } = props;\n\n  const indent = form === 'round' ? 'increased' : 'normal';\n\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  const isListShowed = useMemo(() => {\n    return (\n      visibleItems.filter(\n        (group) =>\n          isOptionForCreate(group) ||\n          (Array.isArray(group.items) && group.items.length > 0),\n      ).length > 0\n    );\n  }, [visibleItems]);\n\n  const offset = offsetProp === 'none' ? undefined : offsetProp;\n\n  return (\n    <Transition\n      in={isOpen}\n      unmountOnExit\n      nodeRef={popoverRef}\n      timeout={animateTimeout}\n    >\n      {(animate) => {\n        const getIndex = fabricIndex(-1);\n        return (\n          <Popover\n            {...otherProps}\n            anchorRef={controlRef}\n            direction=\"downStartLeft\"\n            possibleDirections={[\n              'downStartLeft',\n              'upStartLeft',\n              'downStartRight',\n              'upStartRight',\n            ]}\n            offset={offset}\n            ref={popoverRef}\n            role=\"listbox\"\n            className={cnSelectDropdown(null, [\n              cnListBox({ size, form, border: true, shadow: true }),\n              cnMixPopoverAnimate({ animate }),\n              className,\n            ])}\n            equalAnchorWidth\n          >\n            <div\n              className={cnSelectDropdown('List', [\n                cnMixSpace({\n                  pV: mapVerticalSpase[size],\n                }),\n              ])}\n              ref={dropdownRef}\n            >\n              {isLoading && (\n                <SelectLoader mode={isListShowed ? 'blur' : 'empty'} />\n              )}\n              {visibleItems.map((group) => {\n                if (isOptionForCreate(group)) {\n                  return (\n                    <SelectCreateButton\n                      size={size}\n                      labelForCreate={labelForCreate}\n                      inputValue={group.label}\n                      indent={indent}\n                      {...getOptionProps({ index: getIndex(), item: group })}\n                    />\n                  );\n                }\n                return (\n                  <Fragment key={group.key}>\n                    {group.group && getGroupLabel && (\n                      <SelectGroupLabel\n                        label={getGroupLabel(group.group)}\n                        size={size}\n                        indent={indent}\n                      />\n                    )}\n                    {group.items.map((item, i) => {\n                      if (isOptionForSelectAll(item)) {\n                        return (\n                          <SelectItemAll\n                            indent={indent}\n                            size={size}\n                            {...getOptionProps({ index: getIndex(), item })}\n                            intermediate={\n                              item.checkedCount && item.totalCount\n                                ? item.checkedCount !== item.totalCount\n                                : false\n                            }\n                            checked={item.checkedCount === item.totalCount}\n                            countItems={item.checkedCount}\n                            total={item.totalCount}\n                          />\n                        );\n                      }\n                      return (\n                        <Fragment key={`${group.key}-${i}`}>\n                          {renderItem({\n                            item,\n                            ...getOptionProps({ index: getIndex(), item }),\n                          })}\n                        </Fragment>\n                      );\n                    })}\n                  </Fragment>\n                );\n              })}\n              {!isLoading && hasItems && notFound && labelForNotFound && (\n                <ListItem\n                  size={size}\n                  label={labelForNotFound}\n                  innerOffset={indent}\n                >\n                  {labelForNotFound}\n                </ListItem>\n              )}\n              {!isLoading && !hasItems && labelForEmptyItems && (\n                <ListItem\n                  size={size}\n                  label={labelForEmptyItems}\n                  innerOffset={indent}\n                >\n                  {labelForEmptyItems}\n                </ListItem>\n              )}\n            </div>\n          </Popover>\n        );\n      }}\n    </Transition>\n  );\n};\n", "export const fabricIndex = (start = 0) => {\n  let index: number = start;\n\n  return () => {\n    index += 1;\n\n    return index;\n  };\n};\n", "import './SelectCreateButton.css';\n\nimport React from 'react';\n\nimport { ListAddItem } from '##/components/ListCanary';\nimport { cn } from '##/utils/bem';\nimport { PropsWithHTMLAttributes } from '##/utils/types/PropsWithHTMLAttributes';\n\nimport { PropSize } from '../types';\n\ntype SelectCreateButtonProps = PropsWithHTMLAttributes<\n  {\n    labelForCreate?: string;\n    inputValue?: string;\n    active: boolean;\n    hovered: boolean;\n    size: PropSize;\n    indent: 'normal' | 'increased';\n  },\n  HTMLDivElement\n>;\n\nexport const cnSelectCreateButton = cn('SelectCreateButton');\n\nexport const SelectCreateButton: React.FC<SelectCreateButtonProps> = (\n  props,\n) => {\n  const {\n    className,\n    labelForCreate,\n    inputValue,\n    active,\n    hovered,\n    size,\n    indent,\n    ...otherProps\n  } = props;\n\n  return (\n    <ListAddItem\n      {...otherProps}\n      className={cnSelectCreateButton(null, [className])}\n      aria-selected={active}\n      role=\"option\"\n      active={hovered}\n      size={size}\n      innerOffset={indent}\n      label={\n        <>\n          {labelForCreate} «<b>{inputValue}</b>»\n        </>\n      }\n    />\n  );\n};\n", "import React from 'react';\n\nimport { ListGroupLabel } from '##/components/ListCanary';\n\nimport { PropsWithHTMLAttributes } from '../../../utils/types/PropsWithHTMLAttributes';\nimport { PropSize } from '../types';\n\ntype SelectGroupLabelProps = PropsWithHTMLAttributes<\n  {\n    label: string;\n    size: PropSize;\n    indent: 'normal' | 'increased';\n  },\n  HTMLDivElement\n>;\n\nexport const SelectGroupLabel: React.FC<SelectGroupLabelProps> = (props) => {\n  const { indent, ...otherProps } = props;\n\n  return <ListGroupLabel {...otherProps} innerOffset={indent} />;\n};\n", "import React from 'react';\n\nimport { ListItem } from '##/components/ListCanary';\nimport { Text, TextPropSize } from '##/components/Text';\nimport { cn } from '##/utils/bem';\n\nimport { PropsWithHTMLAttributes } from '../../../utils/types/PropsWithHTMLAttributes';\nimport { Checkbox } from '../../Checkbox/Checkbox';\nimport { sizeCheckboxMap } from '../SelectItem/SelectItem';\nimport { PropSize } from '../types';\n\nexport type SelectItemAllProps = PropsWithHTMLAttributes<\n  {\n    checked: boolean;\n    intermediate?: boolean;\n    size: PropSize;\n    hovered?: boolean;\n    indent?: 'normal' | 'increased';\n    countItems?: number;\n    total?: number;\n  },\n  HTMLDivElement\n>;\n\nexport const cnSelectItemAll = cn('SelectItemAll');\n\nconst textSizeMap: Record<PropSize, TextPropSize> = {\n  xs: 's',\n  s: 's',\n  m: 'm',\n  l: 'l',\n};\n\nexport const SelectItemAll = (props: SelectItemAllProps) => {\n  const {\n    checked,\n    intermediate,\n    size,\n    indent,\n    hovered,\n    countItems = 0,\n    className,\n    total = 0,\n    ...otherProps\n  } = props;\n\n  return (\n    <ListItem\n      {...otherProps}\n      className={cnSelectItemAll(null, [className])}\n      aria-selected={checked}\n      role=\"option\"\n      label=\"Выбрать все\"\n      innerOffset={indent}\n      size={size}\n      active={hovered}\n      rightSide={\n        <Text\n          size={textSizeMap[size]}\n          lineHeight=\"xs\"\n          view=\"ghost\"\n        >{`${countItems} из ${total}`}</Text>\n      }\n      leftSide={\n        <Checkbox\n          checked={checked}\n          intermediate={intermediate}\n          size={sizeCheckboxMap[size]}\n        />\n      }\n    >\n      Выбрать все\n    </ListItem>\n  );\n};\n", "import './SelectLoader.css';\n\nimport React from 'react';\n\nimport { cn } from '../../../utils/bem';\nimport { Loader } from '../../Loader/Loader';\nimport { defaultPropSize, PropSize } from '../types';\n\ntype Props = {\n  mode?: 'empty' | 'blur';\n  size?: PropSize;\n};\n\nexport const cnSelectLoader = cn('SelectLoader');\n\nexport const SelectLoader = (props: Props) => {\n  const { mode = 'empty', size = defaultPropSize } = props;\n\n  return (\n    <div className={cnSelectLoader({ mode, size })}>\n      <Loader className={cnSelectLoader('Loader')} size=\"s\" />\n    </div>\n  );\n};\n"],
  "mappings": "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",
  "names": ["import_react", "useKeys", "userKeys", "rest", "onKeyDown", "e", "keyCode", "key", "shift", "shiftKey", "meta", "metaKey", "handler", "usePrevious", "value", "ref", "React", "useRef", "useEffect", "current", "import_react", "el", "nodeType", "canOverflow", "overflow", "skipOverflowHiddenElements", "t", "isScrollable", "clientHeight", "scrollHeight", "clientWidth", "scrollWidth", "style", "getComputedStyle", "overflowY", "overflowX", "frame", "ownerDocument", "defaultView", "frameElement", "e", "scrollingEdgeStart", "scrollingEdgeEnd", "scrollingSize", "scrollingBorderStart", "scrollingBorderEnd", "elementEdgeStart", "elementEdgeEnd", "elementSize", "target", "options", "windowWithViewport", "window", "scrollMode", "block", "inline", "boundary", "checkBoundary", "node", "isElement", "element", "parent", "scrollingElement", "document", "documentElement", "frames", "cursor", "parentElement", "getRootNode", "host", "push", "body", "viewportWidth", "visualViewport", "width", "innerWidth", "viewportHeight", "height", "innerHeight", "scrollX", "pageXOffset", "viewportY", "scrollY", "pageYOffset", "_target$getBoundingCl", "getBoundingClientRect", "targetHeight", "targetWidth", "targetTop", "top", "targetRight", "right", "targetBottom", "bottom", "targetLeft", "left", "targetBlock", "targetInline", "computations", "index", "length", "_frame$getBoundingCli", "frameStyle", "borderLeft", "parseInt", "borderLeftWidth", "borderTop", "borderTopWidth", "borderRightWidth", "borderBottom", "borderBottomWidth", "blockScroll", "inlineScroll", "scrollbarWidth", "offsetWidth", "borderRight", "scrollbarHeight", "offsetHeight", "scaleX", "scaleY", "alignNearest", "viewportX", "Math", "max", "scrollLeft", "scrollTop", "min", "scrollIntoView", "node", "menuNode", "actions", "computeScrollIntoView", "boundary", "block", "scrollMode", "forEach", "action", "el", "top", "left", "scrollTop", "scrollLeft", "useHoistedState", "initialState", "reducerRef", "React", "useRef", "old", "newState", "useState", "state", "_setState", "setState", "useCallback", "updater", "action", "Error", "current", "scrollToIndex", "index", "dropdownRef", "elements", "querySelectorAll", "scrollIntoView", "isMultipleParams", "params", "multiple", "isNotMultipleParams", "actions", "setOpen", "setSearch", "highlightIndex", "initialState", "searchValue", "resolvedSearchValue", "isOpen", "highlightedIndex", "scrollToHighlighted", "isOptionForCreate", "Object", "prototype", "hasOwnProperty", "call", "isOptionForSelectAll", "useSelect", "items", "dropdownRef", "controlRef", "e", "disabled", "getItemLabel", "getItemKey", "searchFunction", "getItemGroupKey", "groups", "n", "selectAll", "getGroupKey", "sortGroups", "getItemDisabled", "onFocus", "onBlur", "searchValueProp", "withoutClearSearch", "inputRef", "useRef", "useState", "isFocused", "setIsFocused", "value", "Array", "isArray", "useHoistedState", "setState", "searchFunctionDefault", "item", "toLocaleLowerCase", "indexOf", "React", "useMemo", "fiteredOptions", "filter", "matchWithValueSearch", "find", "option", "toString", "toLowerCase", "onCreate", "label", "__optionForCreate", "filteredOptions", "optionForCreate", "visibleItems", "resultGroups", "getCountedGroups", "getGroups", "length", "notFound", "flag", "group", "hasItems", "getSelectedOptionIndex", "index", "b", "c", "d", "a", "useCallback", "newIsOpen", "old", "_objectSpread", "setResolvedSearch", "useDebounce", "prevIsOpen", "usePrevious", "useLayoutEffect", "currentHighlightIndex", "scrollToIndex", "indexForHighlight", "Math", "min", "max", "removeValue", "valueItem", "stopPropagation", "newValue", "onChange", "some", "onChangeAll", "parametrs", "nonDisabledItems", "currentGroupValues", "withoutGroupValues", "forEach", "el", "push", "clearValue", "results", "ArrowUp", "_", "preventDefault", "ArrowDown", "getKeyProps", "useKeys", "PageUp", "PageDown", "Home", "End", "Enter", "getData", "couter", "h", "Escape", "Tab", "Backspace", "useClickOutside", "isActive", "ignoreClicksInsideRefs", "handler", "useEffect", "getOptionProps", "onClick", "onMouseEnter", "active", "hovered", "key", "getItems", "groupKey", "handleInputFocus", "handleInputBlur", "current", "focus", "handleToggleDropdown", "handleInputClick", "handleInputChange", "target", "getHandleRemoveValue", "COMPONENT_NAME", "cnSelect", "cn", "defaultlabelForNotFound", "defaultlabelForCreate", "defaultLabelForEmptyItems", "getInputWidth", "controlInnerRef", "helperInputFakeElement", "current", "fakeElWidth", "offsetWidth", "maxWidth", "width", "propSize", "defaultPropSize", "propForm", "defaultPropForm", "propView", "defaultPropView", "import_react", "SelectContainer", "forwardRef", "props", "ref", "size", "defaultPropSize", "e", "form", "defaultPropForm", "view", "defaultPropView", "className", "disabled", "required", "children", "status", "focused", "id", "multiple", "type", "labelPosition", "label", "labelIcon", "caption", "otherProps", "React", "cnSelect", "import_react", "sizeCheckboxMap", "xs", "s", "m", "l", "cnSelectItem", "cn", "SelectItem", "props", "className", "label", "active", "hovered", "multiple", "size", "indent", "disabled", "otherProps", "_excluded", "React", "import_react", "fabricIndex", "start", "index", "import_react", "cnSelectCreateButton", "cn", "SelectCreateButton", "props", "className", "labelForCreate", "inputValue", "active", "hovered", "size", "indent", "otherProps", "_excluded", "React", "import_react", "SelectGroupLabel", "props", "indent", "otherProps", "_excluded", "React", "import_react", "cnSelectItemAll", "cn", "textSizeMap", "xs", "s", "m", "l", "SelectItemAll", "props", "checked", "intermediate", "size", "indent", "hovered", "countItems", "className", "total", "otherProps", "_excluded", "React", "sizeCheckboxMap", "import_react", "cnSelectLoader", "cn", "SelectLoader", "props", "mode", "size", "defaultPropSize", "React", "selectDropdownform", "defaultSelectDropdownPropForm", "cnSelectDropdown", "cn", "SelectDropdown", "props", "controlRef", "size", "getOptionProps", "dropdownRef", "labelForCreate", "className", "labelForNotFound", "labelForEmptyItems", "hasItems", "form", "isOpen", "n", "offset", "offsetProp", "renderItem", "visibleItems", "isLoading", "getGroupLabel", "notFound", "otherProps", "_excluded", "indent", "popoverRef", "useRef", "isListShowed", "useMemo", "filter", "group", "isOptionForCreate", "Array", "isArray", "items", "length", "React", "animateTimeout", "animate", "getIndex", "fabricIndex", "cnListBox", "border", "shadow", "cnMixPopoverAnimate", "cnMixSpace", "pV", "mapVerticalSpase", "map", "label", "index", "item", "key", "i", "isOptionForSelectAll", "checkedCount", "totalCount", "_objectSpread"]
}
