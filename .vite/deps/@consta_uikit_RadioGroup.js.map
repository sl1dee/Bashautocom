{
  "version": 3,
  "sources": ["../../node_modules/@consta/src/components/RadioGroup/RadioGroup.tsx", "../../node_modules/@consta/src/components/Radio/Radio.tsx", "../../node_modules/@consta/src/components/RadioGroup/helper.ts", "../../node_modules/@consta/src/components/RadioGroup/types.ts"],
  "sourcesContent": ["import './RadioGroup.css';\n\nimport React, { forwardRef } from 'react';\n\nimport { useChoiceGroup } from '../../hooks/useChoiceGroup/useChoiceGroup';\nimport { cn } from '../../utils/bem';\nimport { Radio } from '../Radio/Radio';\nimport { withDefaultGetters } from './helper';\nimport {\n  RadioGroupComponent,\n  radioGroupDefaultDirection,\n  radioGroupDefaultSize,\n  radioGroupDefaultView,\n  radioGroupPropAlignDefault,\n  RadioGroupProps,\n} from './types';\n\nexport const cnRadioGroup = cn('RadioGroup');\n\nconst RadioGroupRender = (\n  props: RadioGroupProps,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const {\n    value = null,\n    items,\n    getItemLabel,\n    getItemKey,\n    getItemDisabled,\n    onChange,\n    name,\n    direction = radioGroupDefaultDirection,\n    size = radioGroupDefaultSize,\n    view = radioGroupDefaultView,\n    align = radioGroupPropAlignDefault,\n    disabled = false,\n    className,\n    ...otherProps\n  } = withDefaultGetters(props);\n\n  const { getOnChange, getChecked } = useChoiceGroup({\n    value,\n    getKey: (item) => getItemKey(item) ?? getItemLabel(item),\n    callBack: onChange,\n    multiple: false,\n  });\n\n  return (\n    <div\n      {...otherProps}\n      ref={ref}\n      className={cnRadioGroup({ direction, size, view }, [className])}\n    >\n      {items.map((item) => (\n        <Radio\n          align={align}\n          key={getItemKey(item) ?? getItemLabel(item)}\n          label={getItemLabel(item)}\n          size={size}\n          view={view}\n          name={name}\n          disabled={disabled || (!!getItemDisabled && getItemDisabled(item))}\n          checked={getChecked(item)}\n          onChange={({ e }) => getOnChange(item)(e)}\n          className={cnRadioGroup('Item')}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const RadioGroup = forwardRef(RadioGroupRender) as RadioGroupComponent;\n\nexport * from './types';\n", "import './Radio.css';\n\nimport React, { ChangeEventHandler, useRef } from 'react';\n\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { cnMixFocus } from '../../mixs/MixFocus/MixFocus';\nimport { cn } from '../../utils/bem';\nimport { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\n\nexport const radioPropSize = ['m', 'l', 's', 'xs'] as const;\nexport type RadioPropSize = typeof radioPropSize[number];\nexport const radioPropSizeDefault: RadioPropSize = radioPropSize[0];\n\nexport const radioPropView = ['primary', 'ghost'] as const;\nexport type RadioPropView = typeof radioPropView[number];\nexport const radioPropViewDefault: RadioPropView = radioPropView[0];\n\nexport const radioPropAlign = ['center', 'top'] as const;\nexport type RadioPropAlign = typeof radioPropAlign[number];\nexport const radioPropAlignDefault: RadioPropAlign = radioPropAlign[0];\n\nexport type RadioPropOnChange = (object: {\n  e: React.ChangeEvent<HTMLInputElement>;\n  checked: boolean;\n}) => void;\n\nexport type Props = {\n  checked?: boolean;\n  size?: RadioPropSize;\n  view?: RadioPropView;\n  align?: RadioPropAlign;\n  disabled?: boolean;\n  className?: string;\n  label?: string;\n  onChange?: RadioPropOnChange;\n  name?: string;\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n  autoFocus?: boolean;\n  readOnly?: boolean;\n  required?: boolean;\n  step?: number | string;\n  tabIndex?: number;\n  inputRef?: React.Ref<HTMLInputElement>;\n  children?: never;\n  for?: string;\n  inputId?: string;\n};\n\nexport type RadioProps = PropsWithHTMLAttributes<Props, HTMLLabelElement>;\n\nexport const cnRadio = cn('Radio');\n\nexport const COMPONENT_NAME = 'Radio' as const;\n\nexport const Radio = React.forwardRef<HTMLLabelElement, RadioProps>(\n  (props, ref) => {\n    const radioRef = useRef<HTMLLabelElement>(null);\n\n    const {\n      checked = false,\n      name,\n      size = radioPropSizeDefault,\n      view = radioPropViewDefault,\n      align = radioPropAlignDefault,\n      disabled,\n      className,\n      label,\n      onChange,\n      onFocus,\n      onBlur,\n      readOnly,\n      required,\n      step,\n      tabIndex,\n      inputId,\n      inputRef,\n      ...otherProps\n    } = usePropsHandler(COMPONENT_NAME, props, radioRef);\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n      if (onChange) {\n        onChange({ e, checked: !checked });\n      }\n    };\n\n    return (\n      <label\n        {...otherProps}\n        className={cnRadio({ size, view, disabled, align }, [className])}\n        ref={useForkRef([ref, radioRef])}\n      >\n        <input\n          type=\"radio\"\n          name={name}\n          className={cnRadio('Input', [cnMixFocus()])}\n          checked={checked}\n          disabled={disabled}\n          onChange={handleChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          readOnly={readOnly}\n          required={required}\n          step={step}\n          id={inputId}\n          tabIndex={tabIndex}\n          ref={inputRef}\n        />\n        {label && <span className={cnRadio('Label')}>{label}</span>}\n      </label>\n    );\n  },\n);\n", "import {\n  RadioGroupDefaultItem,\n  RadioGroupPropGetItemDisabled,\n  RadioGroupPropGetItemKey,\n  RadioGroupPropGetItemLabel,\n  RadioGroupProps,\n} from './types';\n\nconst defaultGetItemKey: RadioGroupPropGetItemKey<RadioGroupDefaultItem> = (\n  item,\n) => item.key;\nconst defaultGetItemLabel: RadioGroupPropGetItemLabel<RadioGroupDefaultItem> = (\n  item,\n) => item.label;\nconst defaultGetItemDisabled: RadioGroupPropGetItemDisabled<\n  RadioGroupDefaultItem\n> = (item) => item.disabled;\n\nexport const withDefaultGetters = (props: RadioGroupProps) => ({\n  ...props,\n  getItemKey: props.getItemKey || defaultGetItemKey,\n  getItemLabel: props.getItemLabel || defaultGetItemLabel,\n  getItemDisabled: props.getItemDisabled || defaultGetItemDisabled,\n});\n", "import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';\n\nexport type RadioGroupDefaultItem = {\n  key?: string | number;\n  label: string;\n  disabled?: boolean;\n};\n\nexport const radioGroupDirections = ['column', 'row'] as const;\nexport type RadioGroupDirection = typeof radioGroupDirections[number];\nexport const radioGroupDefaultDirection: RadioGroupDirection =\n  radioGroupDirections[0];\n\nexport const radioGroupSizes = ['m', 'l', 'xs', 's'] as const;\nexport type RadioGroupPropSize = typeof radioGroupSizes[number];\nexport const radioGroupDefaultSize: RadioGroupPropSize = radioGroupSizes[0];\n\nexport const radioGroupViews = ['primary', 'ghost'] as const;\nexport type RadioGroupPropView = typeof radioGroupViews[number];\nexport const radioGroupDefaultView: RadioGroupPropView = radioGroupViews[0];\n\nexport const radioGroupPropAlign = ['center', 'top'] as const;\nexport type RadioGroupPropAlign = typeof radioGroupPropAlign[number];\nexport const radioGroupPropAlignDefault: RadioGroupPropAlign =\n  radioGroupPropAlign[0];\n\nexport type RadioGroupPropGetItemKey<ITEM> = (\n  item: ITEM,\n) => string | number | undefined;\nexport type RadioGroupPropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type RadioGroupPropGetItemDisabled<ITEM> = (\n  item: ITEM,\n) => boolean | undefined;\n\nexport type RadioGroupProps<ITEM = RadioGroupDefaultItem> =\n  PropsWithHTMLAttributesAndRef<\n    {\n      align?: RadioGroupPropAlign;\n      value?: ITEM | null;\n      items: ITEM[];\n      getItemKey?: RadioGroupPropGetItemKey<ITEM>;\n      getItemLabel?: RadioGroupPropGetItemLabel<ITEM>;\n      getItemDisabled?: RadioGroupPropGetItemDisabled<ITEM>;\n      onChange: (props: {\n        e: React.ChangeEvent<HTMLInputElement>;\n        value: ITEM;\n      }) => void;\n      name?: string;\n      direction?: RadioGroupDirection;\n      size?: RadioGroupPropSize;\n      view?: RadioGroupPropView;\n      disabled?: boolean;\n      className?: string;\n    },\n    HTMLDivElement\n  > &\n    (ITEM extends { label: RadioGroupDefaultItem['label'] }\n      ? {}\n      : {\n          getItemLabel: RadioGroupPropGetItemLabel<ITEM>;\n        });\n\nexport type RadioGroupComponent = <ITEM = RadioGroupDefaultItem>(\n  props: RadioGroupProps<ITEM>,\n) => React.ReactElement | null;\n"],
  "mappings": "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",
  "names": ["import_react", "radioPropSize", "radioPropSizeDefault", "radioPropView", "radioPropViewDefault", "radioPropAlign", "radioPropAlignDefault", "cnRadio", "cn", "COMPONENT_NAME", "Radio", "React", "forwardRef", "props", "ref", "radioRef", "useRef", "usePropsHandler", "checked", "name", "size", "view", "align", "disabled", "className", "label", "onChange", "onFocus", "onBlur", "readOnly", "required", "step", "tabIndex", "inputId", "inputRef", "otherProps", "useForkRef", "cnMixFocus", "handleChange", "e", "defaultGetItemKey", "item", "key", "defaultGetItemLabel", "label", "defaultGetItemDisabled", "disabled", "withDefaultGetters", "props", "getItemKey", "getItemLabel", "getItemDisabled", "radioGroupDirections", "radioGroupDefaultDirection", "radioGroupSizes", "radioGroupDefaultSize", "radioGroupViews", "radioGroupDefaultView", "radioGroupPropAlign", "radioGroupPropAlignDefault", "cnRadioGroup", "cn", "RadioGroupRender", "props", "ref", "withDefaultGetters", "value", "items", "getItemLabel", "getItemKey", "getItemDisabled", "onChange", "name", "direction", "radioGroupDefaultDirection", "size", "radioGroupDefaultSize", "view", "radioGroupDefaultView", "align", "radioGroupPropAlignDefault", "disabled", "className", "otherProps", "_excluded", "useChoiceGroup", "getKey", "item", "b", "callBack", "multiple", "getOnChange", "getChecked", "React", "map", "e", "RadioGroup", "forwardRef"]
}
